///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.3.3983 for 8051               12/Jan/2019  20:12:22
// Copyright 2004-2016 IAR Systems AB.
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\Source\zcl_samplelight.c
//    Command line       =  
//        -f
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\Source\zcl_samplelight.c
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D
//        POWER_SAVING -D NWK_AUTO_POLL -D xHOLD_AUTO_START -D xZTOOL_P1 -D
//        MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
//        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_REPORT -D xZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY
//        -D ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D
//        ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -lC
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\EndDeviceEB\List
//        -lA
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\EndDeviceEB\List
//        --diag_suppress Pe001,Pa010 -o
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\EndDeviceEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\Source\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\Source\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ohz --require_prototypes
//    List file          =  
//        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\EndDeviceEB\List\zcl_samplelight.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_samplelight

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??zclSampleLight1_Init::?relay`
        FUNCTION `??zclSampleLight1_Init::?relay`,0203H
        FUNCTION `??zclSampleLight_BasicResetCB::?relay`,0203H
        FUNCTION `??zclSampleLight_HandleKeys::?relay`,0203H
        FUNCTION `??zclSampleLight_IdentifyCB::?relay`,0203H
        FUNCTION `??zclSampleLight_IdentifyQueryRspCB::?relay`,0203H
        PUBLIC `??zclSampleLight_Init::?relay`
        FUNCTION `??zclSampleLight_Init::?relay`,0203H
        FUNCTION `??zclSampleLight_LcdDisplayUpdate::?relay`,0203H
        FUNCTION `??zclSampleLight_OnOffCB::?relay`,0203H
        FUNCTION `??zclSampleLight_ProcessIdentifyTimeChange::?re`,0203H
        PUBLIC `??zclSampleLight_event_loop::?relay`
        FUNCTION `??zclSampleLight_event_loop::?relay`,0203H
        PUBWEAK __Constant_3e8
        PUBLIC bindingInClusters
        PUBLIC gPermitDuration
        PUBLIC giLightScreenMode
        PUBLIC zclSampleLight1_Init
        FUNCTION zclSampleLight1_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclSampleLight1_TaskID
        PUBLIC zclSampleLightSeqNum
        FUNCTION zclSampleLight_BasicResetCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 5, STACK
        PUBLIC zclSampleLight_DstAddr
        FUNCTION zclSampleLight_HandleKeys,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 28, STACK
        FUNCTION zclSampleLight_IdentifyCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleLight_IdentifyQueryRspCB,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zclSampleLight_Init
        FUNCTION zclSampleLight_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclSampleLight_LcdDisplayUpdate,0a1203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 17, STACK
        PUBLIC zclSampleLight_NwkState
        FUNCTION zclSampleLight_OnOffCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION zclSampleLight_ProcessIdentifyTimeChange,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        PUBLIC zclSampleLight_TaskID
        PUBLIC zclSampleLight_event_loop
        FUNCTION zclSampleLight_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLedBlink         SYMBOL "HalLedBlink"
`??HalLedBlink::?relay` SYMBOL "?relay", HalLedBlink
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
`??NLME_LeaveReq::?relay` SYMBOL "?relay", NLME_LeaveReq
Onboard_wait        SYMBOL "Onboard_wait"
`??Onboard_wait::?relay` SYMBOL "?relay", Onboard_wait
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
`??ZDApp_LeaveReset::?relay` SYMBOL "?relay", ZDApp_LeaveReset
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
`??ZDP_EndDeviceBindReq::?relay` SYMBOL "?relay", ZDP_EndDeviceBindReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
zclDiagnostic_InitStats SYMBOL "zclDiagnostic_InitStats"
`??zclDiagnostic_InitStats::?relay` SYMBOL "?relay", zclDiagnostic_InitStats
`?<Name zclDiagnostic_ReadWr 32>` SYMBOL "zclDiagnostic_ReadWriteAttrCB"
`??zclDiagnostic_ReadWriteAttrCB::?relay` SYMBOL "?relay", `?<Name zclDiagnostic_ReadWr 32>`
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclHA_Init          SYMBOL "zclHA_Init"
`??zclHA_Init::?relay` SYMBOL "?relay", zclHA_Init
zcl_SendReportCmd   SYMBOL "zcl_SendReportCmd"
`??zcl_SendReportCmd::?relay` SYMBOL "?relay", zcl_SendReportCmd
zcl_getRawAFMsg     SYMBOL "zcl_getRawAFMsg"
`??zcl_getRawAFMsg::?relay` SYMBOL "?relay", zcl_getRawAFMsg
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zcl_registerReadWriteCB SYMBOL "zcl_registerReadWriteCB"
`??zcl_registerReadWriteCB::?relay` SYMBOL "?relay", zcl_registerReadWriteCB
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
zclSampleLight1_Init SYMBOL "zclSampleLight1_Init"
`??zclSampleLight1_Init::?relay` SYMBOL "?relay", zclSampleLight1_Init
zclSampleLight_Init SYMBOL "zclSampleLight_Init"
`??zclSampleLight_Init::?relay` SYMBOL "?relay", zclSampleLight_Init
zclSampleLight_event_loop SYMBOL "zclSampleLight_event_loop"
`??zclSampleLight_event_loop::?relay` SYMBOL "?relay", zclSampleLight_event_loop

        EXTERN `??HalLedBlink::?relay`
        FUNCTION `??HalLedBlink::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_LeaveReq::?relay`
        FUNCTION `??NLME_LeaveReq::?relay`,00H
        EXTERN `??Onboard_wait::?relay`
        FUNCTION `??Onboard_wait::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??ZDApp_LeaveReset::?relay`
        FUNCTION `??ZDApp_LeaveReset::?relay`,00H
        EXTERN `??ZDP_EndDeviceBindReq::?relay`
        FUNCTION `??ZDP_EndDeviceBindReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??zclDiagnostic_InitStats::?relay`
        FUNCTION `??zclDiagnostic_InitStats::?relay`,00H
        EXTERN `??zclDiagnostic_ReadWriteAttrCB::?relay`
        FUNCTION `??zclDiagnostic_ReadWriteAttrCB::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclHA_Init::?relay`
        FUNCTION `??zclHA_Init::?relay`,00H
        EXTERN `??zcl_SendReportCmd::?relay`
        FUNCTION `??zcl_SendReportCmd::?relay`,00H
        EXTERN `??zcl_getRawAFMsg::?relay`
        FUNCTION `??zcl_getRawAFMsg::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN `??zcl_registerReadWriteCB::?relay`
        FUNCTION `??zcl_registerReadWriteCB::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclDiagnostic_InitStats
        FUNCTION zclDiagnostic_InitStats,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_Init
        FUNCTION zclHA_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleLight_Attrs
        EXTERN zclSampleLight_Hold
        EXTERN zclSampleLight_Hold1
        EXTERN zclSampleLight_IdentifyTime
        EXTERN zclSampleLight_NumAttributes
        EXTERN zclSampleLight_OnOff
        EXTERN zclSampleLight_OnOff1
        EXTERN zclSampleLight_SimpleDesc
        EXTERN zcl_SendReportCmd
        FUNCTION zcl_SendReportCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_getRawAFMsg
        FUNCTION zcl_getRawAFMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerReadWriteCB
        FUNCTION zcl_registerReadWriteCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\Source\zcl_samplelight.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_sampleLight.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6 
//    7   Description:    Zigbee Cluster Library - sample device application.
//    8 
//    9 
//   10   Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This application implements a ZigBee HA 1.2 Light. It can be configured as an
//   43   On/Off light, or as a dimmable light. The following flags must be defined in
//   44   the compiler's pre-defined symbols.
//   45 
//   46   ZCL_ON_OFF
//   47   ZCL_LEVEL_CTRL    (only if dimming functionality desired)
//   48   HOLD_AUTO_START
//   49   ZCL_EZMODE
//   50 
//   51   This device supports all mandatory and optional commands/attributes for the
//   52   OnOff (0x0006) and LevelControl (0x0008) clusters.
//   53 
//   54   SCREEN MODES
//   55   ----------------------------------------
//   56   Main:
//   57     - SW1: Toggle local light
//   58     - SW2: Invoke EZMode
//   59     - SW4: Enable/Disable local permit join
//   60     - SW5: Go to Help screen
//   61   ----------------------------------------
//   62 *********************************************************************/
//   63 
//   64 /*********************************************************************
//   65  * INCLUDES
//   66  */
//   67 #include "ZComDef.h"
//   68 #include "OSAL.h"
//   69 #include "AF.h"
//   70 #include "ZDApp.h"
//   71 #include "ZDObject.h"
//   72 #include "MT_SYS.h"
//   73 
//   74 #include "nwk_util.h"
//   75 
//   76 #include "zcl.h"
//   77 #include "zcl_general.h"
//   78 #include "zcl_ha.h"
//   79 #include "zcl_ezmode.h"
//   80 #include "zcl_diagnostic.h"
//   81 
//   82 #include "zcl_samplelight.h"
//   83 
//   84 #include "onboard.h"
//   85 
//   86 /* HAL */
//   87 #include "hal_lcd.h"
//   88 #include "hal_led.h"
//   89 #include "hal_key.h"
//   90 
//   91 #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \ 
//   92       || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
//   93 #include "zgp_translationtable.h"
//   94   #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
//   95     #define ZGP_AUTO_TT
//   96   #endif
//   97 #endif
//   98 
//   99 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  100 #include "math.h"
//  101 #include "hal_timer.h"
//  102 #endif
//  103 
//  104 #include "NLMEDE.h"
//  105 
//  106 /*********************************************************************
//  107  * MACROS
//  108  */
//  109 
//  110 /*********************************************************************
//  111  * CONSTANTS
//  112  */
//  113 #if (defined HAL_BOARD_ZLIGHT)
//  114 #define LEVEL_MAX                 0xFE
//  115 #define LEVEL_MIN                 0x0
//  116 #define GAMMA_VALUE               2
//  117 #define PWM_FULL_DUTY_CYCLE       1000
//  118 #elif (defined HAL_PWM)
//  119 #define LEVEL_MAX                 0xFE
//  120 #define LEVEL_MIN                 0x0
//  121 #define GAMMA_VALUE               2
//  122 #define PWM_FULL_DUTY_CYCLE       100
//  123 #endif
//  124 
//  125 /*********************************************************************
//  126  * TYPEDEFS
//  127  */
//  128 
//  129 /*********************************************************************
//  130  * GLOBAL VARIABLES
//  131  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  132 byte zclSampleLight_TaskID;
zclSampleLight_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  133 byte zclSampleLight1_TaskID;
zclSampleLight1_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  134 uint8 zclSampleLightSeqNum;
zclSampleLightSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  135 
//  136 
//  137 /*********************************************************************
//  138  * GLOBAL FUNCTIONS
//  139  */
//  140 
//  141 /*********************************************************************
//  142  * LOCAL VARIABLES
//  143  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  144 afAddrType_t zclSampleLight_DstAddr;
zclSampleLight_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  145 
//  146 #ifdef ZCL_EZMODE
//  147 static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
//  148 static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
//  149 
//  150 
//  151 // register EZ-Mode with task information (timeout events, callback, etc...)
//  152 static const zclEZMode_RegisterData_t zclSampleLight_RegisterEZModeData =
//  153 {
//  154   &zclSampleLight_TaskID,
//  155   SAMPLELIGHT_EZMODE_NEXTSTATE_EVT,
//  156   SAMPLELIGHT_EZMODE_TIMEOUT_EVT,
//  157   &zclSampleLightSeqNum,
//  158   zclSampleLight_EZModeCB
//  159 };
//  160 
//  161 #else

        RSEG XDATA_I:XDATA:NOROOT(0)
//  162 uint16 bindingInClusters[] =
bindingInClusters:
        DATA16
        DS 2
        REQUIRE `?<Initializer for bindingInClusters>`
        REQUIRE __INIT_XDATA_I
//  163 {
//  164 //  ZCL_CLUSTER_ID_GEN_ON_OFF,
//  165   ZCL_CLUSTER_ID_GEN_ON_OFF
//  166 #ifdef ZCL_LEVEL_CTRL
//  167   , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
//  168 #endif
//  169 };
//  170 #define ZCLSAMPLELIGHT_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
//  171 
//  172 static cId_t bindingOutClusters[] =
//  173 {
//  174 //  ZCL_CLUSTER_ID_GEN_ON_OFF,
//  175   ZCL_CLUSTER_ID_GEN_ON_OFF
//  176 #ifdef ZCL_LEVEL_CTRL
//  177   , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
//  178 #endif
//  179 };
//  180 #define ZCLSAMPLELIGHT_BINDINGLISTOUT (sizeof(bindingOutClusters) / sizeof(bindingOutClusters[0]))
//  181 
//  182 
//  183 #endif  // ZCL_EZMODE
//  184 
//  185 // Test Endpoint to allow SYS_APP_MSGs

        RSEG XDATA_I:XDATA:NOROOT(0)
//  186 static endPointDesc_t sampleLight_TestEp =
sampleLight_TestEp:
        DATA8
        DS 6
        REQUIRE `?<Initializer for sampleLight_TestEp>`
        REQUIRE __INIT_XDATA_I
//  187 {
//  188   SAMPLELIGHT_ENDPOINT,
//  189   &zclSampleLight_TaskID,
//  190   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  191   (afNetworkLatencyReq_t)0            // No Network Latency req
//  192 };
//  193 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  194 static endPointDesc_t sampleLight_TestEp1 =
sampleLight_TestEp1:
        DATA8
        DS 6
        REQUIRE `?<Initializer for sampleLight_TestEp1>`
        REQUIRE __INIT_XDATA_I
//  195 {
//  196   SAMPLELIGHT_ENDPOINT+1,
//  197   &zclSampleLight1_TaskID,
//  198   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  199   (afNetworkLatencyReq_t)0            // No Network Latency req
//  200 };

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  201 uint8 giLightScreenMode = LIGHT_MAINMODE;   // display the main screen mode first
giLightScreenMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  202 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  203 uint8 gPermitDuration = 0;    // permit joining default to disabled
gPermitDuration:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  204 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  205 devStates_t zclSampleLight_NwkState = DEV_INIT;
zclSampleLight_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclSampleLight_NwkState>`
        REQUIRE __INIT_XDATA_I
//  206 
//  207 #if ZCL_LEVEL_CTRL
//  208 uint8 zclSampleLight_WithOnOff;       // set to TRUE if state machine should set light on/off
//  209 uint8 zclSampleLight_NewLevel;        // new level when done moving
//  210 bool  zclSampleLight_NewLevelUp;      // is direction to new level up or down?
//  211 int32 zclSampleLight_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
//  212 int32 zclSampleLight_Rate32;          // rate in units, fixed point (e.g. 16.123)
//  213 uint8 zclSampleLight_LevelLastLevel;  // to save the Current Level before the light was turned OFF
//  214 #endif
//  215 
//  216 /*********************************************************************
//  217  * LOCAL FUNCTIONS
//  218  */
//  219 static void zclSampleLight_HandleKeys( byte shift, byte keys );
//  220 static void zclSampleLight_BasicResetCB( void );
//  221 static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd );
//  222 static void zclSampleLight_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
//  223 static void zclSampleLight_OnOffCB( uint8 cmd );
//  224 static void zclSampleLight_ProcessIdentifyTimeChange( void );
//  225 #ifdef ZCL_LEVEL_CTRL
//  226 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
//  227 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd );
//  228 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd );
//  229 static void zclSampleLight_LevelControlStopCB( void );
//  230 static void zclSampleLight_DefaultMove( void );
//  231 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel );
//  232 static uint16 zclSampleLight_GetTime ( uint8 level, uint16 time );
//  233 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate );
//  234 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time );
//  235 static void zclSampleLight_AdjustLightLevel( void );
//  236 #endif
//  237 
//  238 // app display functions
//  239 static void zclSampleLight_LcdDisplayUpdate( void );
//  240 #ifdef LCD_SUPPORTED
//  241 static void zclSampleLight_LcdDisplayMainMode( void );
//  242 static void zclSampleLight_LcdDisplayHelpMode( void );
//  243 #endif
//  244 static void zclSampleLight_DisplayLight( void );
//  245 
//  246 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  247 void zclSampleLight_UpdateLampLevel( uint8 level );
//  248 #endif
//  249 
//  250 // Functions to process ZCL Foundation incoming Command/Response messages
//  251 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  252 #ifdef ZCL_READ
//  253 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  254 #endif
//  255 #ifdef ZCL_WRITE
//  256 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  257 #endif
//  258 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  259 #ifdef ZCL_DISCOVER
//  260 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  261 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  262 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  263 #endif
//  264 
//  265 /*********************************************************************
//  266  * STATUS STRINGS
//  267  */
//  268 #ifdef LCD_SUPPORTED
//  269 const char sDeviceName[]   = "  Sample Light";
//  270 const char sClearLine[]    = " ";
//  271 const char sSwLight[]      = "SW1: ToggleLight";  // 16 chars max
//  272 const char sSwEZMode[]     = "SW2: EZ-Mode";
//  273 char sSwHelp[]             = "SW5: Help       ";  // last character is * if NWK open
//  274 const char sLightOn[]      = "    LIGHT ON ";
//  275 const char sLightOff[]     = "    LIGHT OFF";
//  276  #if ZCL_LEVEL_CTRL
//  277  char sLightLevel[]        = "    LEVEL ###"; // displays level 1-254
//  278  #endif
//  279 #endif
//  280 
//  281 /*********************************************************************
//  282  * ZCL General Profile Callback table
//  283  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  284 static zclGeneral_AppCallbacks_t zclSampleLight_CmdCallbacks =
zclSampleLight_CmdCallbacks:
        DATA8
        DS 28
        REQUIRE `?<Initializer for zclSampleLight_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  285 {
//  286   zclSampleLight_BasicResetCB,            // Basic Cluster Reset command
//  287   zclSampleLight_IdentifyCB,              // Identify command
//  288 #ifdef ZCL_EZMODE
//  289   NULL,                                   // Identify EZ-Mode Invoke command
//  290   NULL,                                   // Identify Update Commission State command
//  291 #endif
//  292   NULL,                                   // Identify Trigger Effect command
//  293   zclSampleLight_IdentifyQueryRspCB,      // Identify Query Response command
//  294   zclSampleLight_OnOffCB,                 // On/Off cluster commands
//  295   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  296   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  297   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  298 #ifdef ZCL_LEVEL_CTRL
//  299   zclSampleLight_LevelControlMoveToLevelCB, // Level Control Move to Level command
//  300   zclSampleLight_LevelControlMoveCB,        // Level Control Move command
//  301   zclSampleLight_LevelControlStepCB,        // Level Control Step command
//  302   zclSampleLight_LevelControlStopCB,        // Level Control Stop command
//  303 #endif
//  304 #ifdef ZCL_GROUPS
//  305   NULL,                                   // Group Response commands
//  306 #endif
//  307 #ifdef ZCL_SCENES
//  308   NULL,                                  // Scene Store Request command
//  309   NULL,                                  // Scene Recall Request command
//  310   NULL,                                  // Scene Response command
//  311 #endif
//  312 #ifdef ZCL_ALARMS
//  313   NULL,                                  // Alarm (Response) commands
//  314 #endif
//  315 #ifdef SE_UK_EXT
//  316   NULL,                                  // Get Event Log command
//  317   NULL,                                  // Publish Event Log command
//  318 #endif
//  319   NULL,                                  // RSSI Location command
//  320   NULL                                   // RSSI Location Response command
//  321 };
//  322 
//  323 /*********************************************************************
//  324  * @fn          zclSampleLight_Init
//  325  *
//  326  * @brief       Initialization function for the zclGeneral layer.
//  327  *
//  328  * @param       none
//  329  *
//  330  * @return      none
//  331  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  332 void zclSampleLight_Init( byte task_id )
zclSampleLight_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclSampleLight_Init
        CODE
//  333 {
        FUNCALL zclSampleLight_Init, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerReadWriteCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclDiagnostic_InitStats
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  334 
//  335   zclSampleLight_TaskID = task_id;
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    @DPTR,A
//  336 
//  337   
//  338   Onboard_wait(1000);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//  339   HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  340   HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x2
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  341   Onboard_wait(20);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//  342   HalLedSet( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  343   Onboard_wait(1000);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//  344   HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  345   Onboard_wait(20);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//  346   HalLedSet( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  347   Onboard_wait(1000);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//  348   HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  349   Onboard_wait(20);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//  350   HalLedSet( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  351   Onboard_wait(1000);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//  352   HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x2
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  353   Onboard_wait(20);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//  354   HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x2
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  355   Onboard_wait(1000);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//  356   HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x2
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  357   Onboard_wait(20);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//  358   HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x2
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  359   Onboard_wait(1000);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//  360   HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x2
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  361   Onboard_wait(20);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//  362   HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x2
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  363   Onboard_wait(1000);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//  364 
//  365 
//  366   // Set destination address to indirect
//  367   zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        LCALL   ?Subroutine6 & 0xFFFF
//  368   zclSampleLight_DstAddr.endPoint = 0;
//  369   zclSampleLight_DstAddr.addr.shortAddr = 0;
//  370  
//  371 // This app is part of the Home Automation Profile
//  372   zclHA_Init( &(zclSampleLight_SimpleDesc[0]) ); //button 1
??CrossCallReturnLabel_6:
        ; Setup parameters for call to function zclHA_Init
        MOV     R2,#zclSampleLight_SimpleDesc & 0xff
        MOV     R3,#(zclSampleLight_SimpleDesc >> 8) & 0xff
        LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
//  373 
//  374   // Register the ZCL General Cluster Library callback functions
//  375   zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zclSampleLight_CmdCallbacks );//button 1
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#zclSampleLight_CmdCallbacks & 0xff
        MOV     R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  376 
//  377   // Register the application's attribute list
//  378   zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zclSampleLight_NumAttributes, zclSampleLight_Attrs );//button 1
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zclSampleLight_Attrs & 0xff
        MOV     R5,#(zclSampleLight_Attrs >> 8) & 0xff
        MOV     DPTR,#zclSampleLight_NumAttributes
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     R1,#0x1
        LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  379 
//  380   // Register the Application to receive the unprocessed Foundation command/response messages
//  381   zcl_registerForMsg( zclSampleLight_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  382 
//  383 #ifdef ZCL_DISCOVER
//  384   // Register the application's command list
//  385   zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zclSampleLight_Cmds );//button 1
//  386 #endif
//  387 
//  388   // Register for all key events - This app will handle all key events
//  389   RegisterForKeys( zclSampleLight_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  390 
//  391   // Register for a test endpoint
//  392   afRegister( &sampleLight_TestEp );
        ; Setup parameters for call to function afRegister
        MOV     R2,#sampleLight_TestEp & 0xff
        MOV     R3,#(sampleLight_TestEp >> 8) & 0xff
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  393   //afRegister( &sampleLight_TestEp1 );
//  394 
//  395 #ifdef ZCL_EZMODE
//  396   // Register EZ-Mode
//  397   zcl_RegisterEZMode( &zclSampleLight_RegisterEZModeData );
//  398 
//  399   // Register with the ZDO to receive Match Descriptor Responses
//  400   ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
//  401 #endif
//  402 
//  403 
//  404 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  405   HalTimer1Init( 0 );
//  406   halTimer1SetChannelDuty( WHITE_LED, 0 );
//  407   halTimer1SetChannelDuty( RED_LED, 0 );
//  408   halTimer1SetChannelDuty( BLUE_LED, 0 );
//  409   halTimer1SetChannelDuty( GREEN_LED, 0 );
//  410 
//  411   // find if we are already on a network from NV_RESTORE
//  412   uint8 state;
//  413   NLME_GetRequest( nwkNwkState, 0, &state );
//  414 
//  415   if ( state < NWK_ENDDEVICE )
//  416   {
//  417     // Start EZMode on Start up to avoid button press
//  418     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_START_EZMODE_EVT, 500 );
//  419   }
//  420 #if ZCL_LEVEL_CTRL
//  421   zclSampleLight_DefaultMove();
//  422 #endif
//  423 #endif // #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  424 
//  425 #ifdef ZCL_DIAGNOSTIC
//  426   // Register the application's callback function to read/write attribute data.
//  427   // This is only required when the attribute data format is unknown to ZCL.
//  428   zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
//  429 
//  430   if ( zclDiagnostic_InitStats() == ZSuccess )
//  431   {
//  432     // Here the user could start the timer to save Diagnostics to NV
//  433   }
//  434 #endif
//  435 
//  436 #ifdef LCD_SUPPORTED
//  437   HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
//  438 #endif  // LCD_SUPPORTED
//  439 
//  440 #ifdef ZGP_AUTO_TT
//  441   zgpTranslationTable_RegisterEP ( &zclSampleLight_SimpleDesc[0] );
//  442 #endif
//  443 //  HalLedSet( HAL_LED_1, HAL_LED_MODE_BLINK);
//  444 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   `??afRegister::?relay`; Banked call to: afRegister
        ; Setup parameters for call to function zcl_registerReadWriteCB
        ; Setup parameters for call to function zcl_registerReadWriteCB
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#`??zclDiagnostic_ReadWriteAttrCB::?relay` & 0xff
        MOV     R3,#(`??zclDiagnostic_ReadWriteAttrCB::?relay` >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   `??zcl_registerReadWriteCB::?relay`; Banked call to: zcl_registerReadWriteCB
        ; Setup parameters for call to function zclDiagnostic_InitStats
        ; Setup parameters for call to function zclDiagnostic_InitStats
        LCALL   `??zclDiagnostic_InitStats::?relay`; Banked call to: zclDiagnostic_InitStats
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  445 
//  446 
//  447 /*********************************************************************
//  448  * @fn          zclSampleLight_Init
//  449  *
//  450  * @brief       Initialization function for the zclGeneral layer.
//  451  *
//  452  * @param       none
//  453  *
//  454  * @return      none
//  455  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  456 void zclSampleLight1_Init( byte task_id )
zclSampleLight1_Init:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zclSampleLight1_Init
        CODE
//  457 {
        FUNCALL zclSampleLight1_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight1_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight1_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight1_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight1_Init, zcl_registerReadWriteCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight1_Init, zclDiagnostic_InitStats
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  458   zclSampleLight1_TaskID = task_id;
        MOV     DPTR,#zclSampleLight1_TaskID
        MOVX    @DPTR,A
//  459 
//  460   
//  461   // Set destination address to indirect
//  462   zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        LCALL   ?Subroutine6 & 0xFFFF
//  463   zclSampleLight_DstAddr.endPoint = 0;
//  464   zclSampleLight_DstAddr.addr.shortAddr = 0;
//  465 
//  466 // This app is part of the Home Automation Profile
//  467   zclHA_Init( &(zclSampleLight_SimpleDesc[1]) ); //button 2
??CrossCallReturnLabel_7:
        ; Setup parameters for call to function zclHA_Init
        MOV     R2,#(zclSampleLight_SimpleDesc + 12) & 0xff
        MOV     R3,#((zclSampleLight_SimpleDesc + 12) >> 8) & 0xff
        LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
//  468 
//  469   // Register the ZCL General Cluster Library callback functions
//  470   zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT+1, &zclSampleLight_CmdCallbacks );//button 2
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#zclSampleLight_CmdCallbacks & 0xff
        MOV     R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
        MOV     R1,#0x2
        LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  471 
//  472   // Register the application's attribute list
//  473   zcl_registerAttrList( SAMPLELIGHT_ENDPOINT+1, zclSampleLight_NumAttributes, zclSampleLight_Attrs );//button 2
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zclSampleLight_Attrs & 0xff
        MOV     R5,#(zclSampleLight_Attrs >> 8) & 0xff
        MOV     DPTR,#zclSampleLight_NumAttributes
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     R1,#0x2
        LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  474 
//  475   // Register the Application to receive the unprocessed Foundation command/response messages
//  476 //  zcl_registerForMsg( zclSampleLight1_TaskID );
//  477 
//  478 #ifdef ZCL_DISCOVER
//  479   // Register the application's command list
//  480   zcl_registerCmdList( SAMPLELIGHT_ENDPOINT+1, zclCmdsArraySize, zclSampleLight_Cmds );//button 1
//  481 #endif
//  482 
//  483 #ifdef ZCL_DISCOVER
//  484   // Register the application's command list
//  485   zcl_registerCmdList( SAMPLELIGHT_ENDPOINT+1, zclCmdsArraySize, zclSampleLight_Cmds );
//  486 #endif
//  487 
//  488   // Register for all key events - This app will handle all key events
//  489 //  RegisterForKeys( zclSampleLight1_TaskID );
//  490 
//  491   // Register for a test endpoint
//  492   afRegister( &sampleLight_TestEp1 );
        ; Setup parameters for call to function afRegister
        MOV     R2,#sampleLight_TestEp1 & 0xff
        MOV     R3,#(sampleLight_TestEp1 >> 8) & 0xff
        SJMP    ?Subroutine0
//  493 
//  494 #ifdef ZCL_EZMODE
//  495   // Register EZ-Mode
//  496   zcl_RegisterEZMode( &zclSampleLight_RegisterEZModeData );
//  497 
//  498   // Register with the ZDO to receive Match Descriptor Responses
//  499   ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
//  500 #endif
//  501 
//  502 
//  503 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  504   HalTimer1Init( 0 );
//  505   halTimer1SetChannelDuty( WHITE_LED, 0 );
//  506   halTimer1SetChannelDuty( RED_LED, 0 );
//  507   halTimer1SetChannelDuty( BLUE_LED, 0 );
//  508   halTimer1SetChannelDuty( GREEN_LED, 0 );
//  509 
//  510   // find if we are already on a network from NV_RESTORE
//  511   uint8 state;
//  512   NLME_GetRequest( nwkNwkState, 0, &state );
//  513 
//  514   if ( state < NWK_ENDDEVICE )
//  515   {
//  516     // Start EZMode on Start up to avoid button press
//  517     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_START_EZMODE_EVT, 500 );
//  518   }
//  519 #if ZCL_LEVEL_CTRL
//  520   zclSampleLight_DefaultMove();
//  521 #endif
//  522 #endif // #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  523 
//  524 #ifdef ZCL_DIAGNOSTIC
//  525   // Register the application's callback function to read/write attribute data.
//  526   // This is only required when the attribute data format is unknown to ZCL.
//  527   zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
//  528 
//  529   if ( zclDiagnostic_InitStats() == ZSuccess )
//  530   {
//  531     // Here the user could start the timer to save Diagnostics to NV
//  532   }
//  533 #endif
//  534 
//  535 #ifdef LCD_SUPPORTED
//  536   HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
//  537 #endif  // LCD_SUPPORTED
//  538 
//  539 #ifdef ZGP_AUTO_TT
//  540   zgpTranslationTable_RegisterEP ( &zclSampleLight_SimpleDesc[1] );
//  541 #endif
//  542 }
          CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function zclSampleLight_Init
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function zclSampleLight1_Init
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOV     DPTR,#zclSampleLight_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPTR,#zclSampleLight_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5
//  543 
//  544 
//  545 /*********************************************************************
//  546  * @fn          zclSample_event_loop
//  547  *
//  548  * @brief       Event Loop Processor for zclGeneral.
//  549  *
//  550  * @param       none
//  551  *
//  552  * @return      none
//  553  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  554 uint16 zclSampleLight_event_loop( uint8 task_id, uint16 events )
zclSampleLight_event_loop:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
        CODE
//  555 {
        FUNCALL zclSampleLight_event_loop, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  556   afIncomingMSGPacket_t *MSGpkt;
//  557 
//  558   (void)task_id;  // Intentionally unreferenced parameter
//  559 
//  560   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??zclSampleLight_event_loop_0
//  561   {
//  562     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleLight_TaskID )) )
//  563     {
//  564       switch ( MSGpkt->hdr.event )
//  565       {
//  566 #ifdef ZCL_EZMODE
//  567         case ZDO_CB_MSG:
//  568           zclSampleLight_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  569           break;
//  570 #endif
//  571         case ZCL_INCOMING_MSG:
//  572           // Incoming ZCL Foundation command/response messages
//  573           zclSampleLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  574           break;
//  575 
//  576         case KEY_CHANGE:
//  577           zclSampleLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  578           break;
//  579 
//  580         case ZDO_STATE_CHANGE:
//  581           zclSampleLight_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  582 
//  583           // now on the network
//  584           if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
//  585                (zclSampleLight_NwkState == DEV_ROUTER)   ||
//  586                (zclSampleLight_NwkState == DEV_END_DEVICE) )
//  587           {
//  588             giLightScreenMode = LIGHT_MAINMODE;
//  589             zclSampleLight_LcdDisplayUpdate();
//  590 #ifdef ZCL_EZMODE
//  591             zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
//  592 #endif // ZCL_EZMODE
//  593           }
//  594           break;
//  595 
//  596         default:
//  597           break;
//  598       }
//  599 
//  600       // Release the memory
//  601       osal_msg_deallocate( (uint8 *)MSGpkt );
//  602     }
//  603 
//  604     // return unprocessed events
//  605     return (events ^ SYS_EVENT_MSG);
//  606   }
//  607 
//  608   if ( events & SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??zclSampleLight_event_loop_1 & 0xFFFF
//  609   {
//  610     if ( zclSampleLight_IdentifyTime > 0 )
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     A,R0
        ORL     A,R1
        JZ      ??zclSampleLight_event_loop_2
//  611       zclSampleLight_IdentifyTime--;
        MOV     DPTR,#zclSampleLight_IdentifyTime
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
//  612     zclSampleLight_ProcessIdentifyTimeChange();
??zclSampleLight_event_loop_2:
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
//  613 
//  614     return ( events ^ SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
        MOV     A,R6
        XRL     A,#0x1
        LJMP    ??zclSampleLight_event_loop_3 & 0xFFFF
//  615   }
??zclSampleLight_event_loop_4:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#zclSampleLight_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JZ      ??zclSampleLight_event_loop_5
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??zclSampleLight_event_loop_5
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclSampleLight_event_loop_6
??zclSampleLight_event_loop_5:
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
??zclSampleLight_event_loop_6:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclSampleLight_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??zclSampleLight_event_loop_7
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x34
        JZ      ??zclSampleLight_event_loop_8
        ADD     A,#0x74
        JZ      ??zclSampleLight_event_loop_9
        ADD     A,#-0x11
        JZ      ??zclSampleLight_event_loop_4
        SJMP    ??zclSampleLight_event_loop_6
??zclSampleLight_event_loop_8:
        MOV     A,R2
        ADD     A,#0x17
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        JZ      ??zclSampleLight_event_loop_10
        ADD     A,#-0x3
        JNZ     ??zclSampleLight_event_loop_11
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_12:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JNC     ??zclSampleLight_event_loop_11
        INC     R0
        SJMP    ??CrossCallReturnLabel_12
??zclSampleLight_event_loop_10:
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_13:
        SJMP    ??zclSampleLight_event_loop_12
??zclSampleLight_event_loop_13:
        INC     R0
??zclSampleLight_event_loop_12:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JC      ??zclSampleLight_event_loop_13
??zclSampleLight_event_loop_11:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??zclSampleLight_event_loop_6
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP    ??zclSampleLight_event_loop_6
??zclSampleLight_event_loop_9:
        ; Setup parameters for call to function zclSampleLight_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zclSampleLight_HandleKeys::?relay`; Banked call to: zclSampleLight_HandleKeys
        LJMP    ??zclSampleLight_event_loop_6 & 0xFFFF
??zclSampleLight_event_loop_7:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        SJMP    ??zclSampleLight_event_loop_14
//  616 
//  617   if ( events & SAMPLELIGHT_MAIN_SCREEN_EVT )
??zclSampleLight_event_loop_1:
        ANL     A,#0x10
        JZ      ??zclSampleLight_event_loop_15
//  618   {
//  619     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  620     zclSampleLight_LcdDisplayUpdate();
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
//  621 
//  622     return ( events ^ SAMPLELIGHT_MAIN_SCREEN_EVT );
        MOV     A,R6
        XRL     A,#0x10
??zclSampleLight_event_loop_3:
        MOV     R2,A
        MOV     A,R7
??zclSampleLight_event_loop_14:
        MOV     R3,A
        SJMP    ??zclSampleLight_event_loop_16
//  623   }
//  624 
//  625 #ifdef ZCL_EZMODE
//  626 #if (defined HAL_BOARD_ZLIGHT)
//  627   // event to start EZMode on startup with a delay
//  628   if ( events & SAMPLELIGHT_START_EZMODE_EVT )
//  629   {
//  630     // Invoke EZ-Mode
//  631     zclEZMode_InvokeData_t ezModeData;
//  632 
//  633     // Invoke EZ-Mode
//  634     ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
//  635     if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
//  636          (zclSampleLight_NwkState == DEV_ROUTER)   ||
//  637          (zclSampleLight_NwkState == DEV_END_DEVICE) )
//  638     {
//  639       ezModeData.onNetwork = TRUE;      // node is already on the network
//  640     }
//  641     else
//  642     {
//  643       ezModeData.onNetwork = FALSE;     // node is not yet on the network
//  644     }
//  645     ezModeData.initiator = FALSE;          // OnOffLight is a target
//  646     ezModeData.numActiveOutClusters = 0;
//  647     ezModeData.pActiveOutClusterIDs = NULL;
//  648     ezModeData.numActiveInClusters = 0;
//  649     ezModeData.pActiveOutClusterIDs = NULL;
//  650     zcl_InvokeEZMode( &ezModeData );
//  651 
//  652     return ( events ^ SAMPLELIGHT_START_EZMODE_EVT );
//  653   }
//  654 #endif // #if (defined HAL_BOARD_ZLIGHT)
//  655 
//  656   // going on to next state
//  657   if ( events & SAMPLELIGHT_EZMODE_NEXTSTATE_EVT )
//  658   {
//  659     zcl_EZModeAction ( EZMODE_ACTION_PROCESS, NULL );   // going on to next state
//  660     return ( events ^ SAMPLELIGHT_EZMODE_NEXTSTATE_EVT );
//  661   }
//  662 
//  663   // the overall EZMode timer expired, so we timed out
//  664   if ( events & SAMPLELIGHT_EZMODE_TIMEOUT_EVT )
//  665   {
//  666     zcl_EZModeAction ( EZMODE_ACTION_TIMED_OUT, NULL ); // EZ-Mode timed out
//  667     return ( events ^ SAMPLELIGHT_EZMODE_TIMEOUT_EVT );
//  668   }
//  669 #endif // ZLC_EZMODE
//  670 
//  671 #ifdef ZCL_LEVEL_CTRL
//  672   if ( events & SAMPLELIGHT_LEVEL_CTRL_EVT )
//  673   {
//  674     zclSampleLight_AdjustLightLevel();
//  675     return ( events ^ SAMPLELIGHT_LEVEL_CTRL_EVT );
//  676   }
//  677 #endif
//  678 
//  679   // Discard unknown events
//  680   return 0;
??zclSampleLight_event_loop_15:
        MOV     R2,#0x0
        MOV     R3,#0x0
??zclSampleLight_event_loop_16:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
//  681 }
          CFI EndBlock cfiBlock6

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond7 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function zclSampleLight_event_loop
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     R0,#0x0
        RET
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9
//  682 
//  683 /*********************************************************************
//  684  * @fn      zclSampleLight_HandleKeys
//  685  *
//  686  * @brief   Handles all key events for this device.
//  687  *
//  688  * @param   shift - true if in shift/alt.
//  689  * @param   keys - bit field for key events. Valid entries:
//  690  *                 HAL_KEY_SW_5
//  691  *                 HAL_KEY_SW_4
//  692  *                 HAL_KEY_SW_2
//  693  *                 HAL_KEY_SW_1
//  694  *
//  695  * @return  none
//  696  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  697 static void zclSampleLight_HandleKeys( byte shift, byte keys )
zclSampleLight_HandleKeys:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function zclSampleLight_HandleKeys
        CODE
//  698 {
        FUNCALL zclSampleLight_HandleKeys, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R2
        MOV     R6,A
//  699   zclSampleLight_Hold = 0;
        MOV     DPTR,#zclSampleLight_Hold
        CLR     A
        MOVX    @DPTR,A
//  700   zclSampleLight_Hold1 = 0;
        MOV     DPTR,#zclSampleLight_Hold1
        MOVX    @DPTR,A
//  701 
//  702   if ( keys & HAL_KEY_SW_6 )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.5
        JNC     ??zclSampleLight_HandleKeys_0
//  703 //  if ( shift )
//  704   {
//  705     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  706 
//  707     // toggle local light immediately
//  708     zclSampleLight_OnOff = zclSampleLight_OnOff ? LIGHT_OFF : LIGHT_ON;
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        JZ      ??zclSampleLight_HandleKeys_1
        LCALL   ?Subroutine4 & 0xFFFF
//  709     if ( zclSampleLight_OnOff == LIGHT_ON )
//  710     {
//  711       HalLedBlink(HAL_LED_4, 1, 50, 40);
//  712     }
//  713     else
//  714     {
//  715       HalLedBlink(HAL_LED_2, 1, 50, 40);
??CrossCallReturnLabel_2:
        SJMP    ??CrossCallReturnLabel_4
??zclSampleLight_HandleKeys_1:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
//  716     }
//  717     zclSampleLight_Hold = 1;
        MOV     DPTR,#zclSampleLight_Hold
        MOV     A,#0x1
        MOVX    @DPTR,A
//  718 #ifdef ZCL_LEVEL_CTRL
//  719     zclSampleLight_LevelCurrentLevel = zclSampleLight_OnOff ? zclSampleLight_LevelOnLevel : ATTR_LEVEL_MIN_LEVEL;
//  720 #endif
//  721   }
//  722 
//  723 /*  if ( keys & HAL_KEY_SW_3 )
//  724   {
//  725     giLightScreenMode = LIGHT_MAINMODE;
//  726 
//  727     // toggle local light immediately
//  728     zclSampleLight_OnOff1 = zclSampleLight_OnOff1 ? LIGHT_OFF : LIGHT_ON;
//  729     zclSampleLight_Hold1 = 1;
//  730 
//  731 #ifdef ZCL_LEVEL_CTRL
//  732     zclSampleLight_LevelCurrentLevel = zclSampleLight_OnOff ? zclSampleLight_LevelOnLevel : ATTR_LEVEL_MIN_LEVEL;
//  733 #endif
//  734   }
//  735 
//  736 */
//  737   if ( keys & HAL_KEY_SW_5 )
??zclSampleLight_HandleKeys_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.2
        JC      $+5
        LJMP    ??zclSampleLight_HandleKeys_2 & 0xFFFF
//  738   {
//  739 #if (defined HAL_BOARD_ZLIGHT)
//  740 
//  741     zclSampleLight_BasicResetCB();
//  742 
//  743 #else
//  744 
//  745     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  746 
//  747 #ifdef ZCL_EZMODE
//  748     {
//  749       // Invoke EZ-Mode
//  750       zclEZMode_InvokeData_t ezModeData;
//  751 
//  752       // Invoke EZ-Mode
//  753       ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
//  754       if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
//  755           (zclSampleLight_NwkState == DEV_ROUTER)   ||
//  756             (zclSampleLight_NwkState == DEV_END_DEVICE) )
//  757       {
//  758         ezModeData.onNetwork = TRUE;      // node is already on the network
//  759       }
//  760       else
//  761       {
//  762         ezModeData.onNetwork = FALSE;     // node is not yet on the network
//  763       }
//  764       ezModeData.initiator = FALSE;          // OnOffLight is a target
//  765       ezModeData.numActiveOutClusters = 0;
//  766       ezModeData.pActiveOutClusterIDs = NULL;
//  767       ezModeData.numActiveInClusters = 0;
//  768       ezModeData.pActiveOutClusterIDs = NULL;
//  769       zcl_InvokeEZMode( &ezModeData );
//  770     }
//  771 
//  772 #else // NOT EZ-Mode
//  773     {
//  774       zAddrType_t dstAddr;
//  775       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,A
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  776 
//  777       // Initiate an End Device Bind Request, this bind request will
//  778       // only use a cluster list that is important to binding.
//  779       dstAddr.addrMode = afAddr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  780       dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  781       ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
//  782                            SAMPLELIGHT_ENDPOINT,
//  783                            ZCL_HA_PROFILE_ID,
//  784                            ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
//  785 //                           ZCLSAMPLELIGHT_BINDINGLISTOUT, bindingOutClusters,
//  786                            0,NULL,
//  787                            TRUE );
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        CLR     A
        MOV     ?V0,A
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0,#bindingInClusters & 0xff
        MOV     ?V1,#(bindingInClusters >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0,#0x4
        MOV     ?V1,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     R1,#0x1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  788       ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
//  789                            SAMPLELIGHT_ENDPOINT+1,
//  790                            ZCL_HA_PROFILE_ID,
//  791                            ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
//  792 //                           ZCLSAMPLELIGHT_BINDINGLISTOUT, bindingOutClusters,
//  793                            0,NULL,
//  794                            TRUE );
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        CLR     A
        MOV     ?V0,A
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0,#bindingInClusters & 0xff
        MOV     ?V1,#(bindingInClusters >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0,#0x4
        MOV     ?V1,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     R1,#0x2
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  795     }
//  796 #endif // ZCL_EZMODE
//  797 #endif // HAL_BOARD_ZLIGHT
//  798   }
//  799 /*
//  800   if ( keys & HAL_KEY_SW_3 )
//  801   {
//  802     NLME_SendNetworkStatus( zclSampleLight_DstAddr.addr.shortAddr,
//  803                        NLME_GetShortAddr(), NWKSTAT_NONTREE_LINK_FAILURE, FALSE );
//  804   }
//  805 
//  806   if ( keys & HAL_KEY_SW_4 )
//  807   {
//  808     giLightScreenMode = LIGHT_MAINMODE;
//  809 
//  810     if ( ( zclSampleLight_NwkState == DEV_ZB_COORD ) ||
//  811           ( zclSampleLight_NwkState == DEV_ROUTER ) )
//  812     {
//  813       zAddrType_t tmpAddr;
//  814 
//  815       tmpAddr.addrMode = Addr16Bit;
//  816       tmpAddr.addr.shortAddr = NLME_GetShortAddr();
//  817 
//  818       // toggle permit join
//  819       gPermitDuration = gPermitDuration ? 0 : 0xff;
//  820 
//  821       // Trust Center significance is always true
//  822       ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
//  823     }
//  824   }
//  825 
//  826   // Shift F5 does a Basic Reset (factory defaults)
//  827   if ( shift && ( keys & HAL_KEY_SW_5 ) )
//  828   {
//  829     zclSampleLight_BasicResetCB();
//  830   }
//  831   else if ( keys & HAL_KEY_SW_5 )
//  832   {
//  833     giLightScreenMode = giLightScreenMode ? LIGHT_MAINMODE : LIGHT_HELPMODE;
//  834   }
//  835 */
//  836   // update the display, including the light
//  837   zclSampleLight_LcdDisplayUpdate();
??zclSampleLight_HandleKeys_2:
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
//  838 }
        MOV     A,#0x9
          CFI EndBlock cfiBlock10
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock11
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine11_0:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock12
//  839 
//  840 /*********************************************************************
//  841  * @fn      zclSampleLight_LcdDisplayUpdate
//  842  *
//  843  * @brief   Called to update the LCD display.
//  844  *
//  845  * @param   none
//  846  *
//  847  * @return  none
//  848  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  849 void zclSampleLight_LcdDisplayUpdate( void )
zclSampleLight_LcdDisplayUpdate:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function zclSampleLight_LcdDisplayUpdate
        CODE
//  850 {
        FUNCALL zclSampleLight_LcdDisplayUpdate, zcl_SendReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, zcl_SendReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  851    //report state for button 1
//  852   zclSampleLightSeqNum++;
        MOV     DPTR,#zclSampleLightSeqNum
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  853   zclReportCmd_t rptnullcmd;
//  854   rptnullcmd.numAttr = 0;
//  855 
//  856   zclReportCmd_t rptcmd;
//  857   rptcmd.numAttr = 1;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  858   // Set destination address to indirect
//  859   zclSampleLight_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#zclSampleLight_DstAddr + 8
        INC     A
        LCALL   ?Subroutine3 & 0xFFFF
//  860   zclSampleLight_DstAddr.addr.shortAddr = 0;
//  861   zclSampleLight_DstAddr.endPoint=1;
//  862 
//  863   if (zclSampleLight_Hold == 1) {
??CrossCallReturnLabel_0:
        MOV     DPTR,#zclSampleLight_Hold
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclSampleLight_LcdDisplayUpdate_0
//  864     rptcmd.attrList[0].attrID = ATTRID_ON_OFF;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  865     rptcmd.attrList[0].dataType = ZCL_DATATYPE_BOOLEAN;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x10
        MOVX    @DPTR,A
//  866     rptcmd.attrList[0].attrData = (void *)(&zclSampleLight_OnOff);
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#zclSampleLight_OnOff & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(zclSampleLight_OnOff >> 8) & 0xff
        LCALL   ?Subroutine7 & 0xFFFF
//  867     zcl_SendReportCmd(SAMPLELIGHT_ENDPOINT,&zclSampleLight_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, &rptcmd, ZCL_FRAME_SERVER_CLIENT_DIR, true, zclSampleLightSeqNum );
//  868   } else {
??CrossCallReturnLabel_8:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#zclSampleLight_DstAddr & 0xff
        MOV     R3,#(zclSampleLight_DstAddr >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  869 //	    rptcmd.attrList[0].attrID = ATTRID_BASIC_DEVICE_ENABLED;
//  870 //	    rptcmd.attrList[0].dataType = ZCL_DATATYPE_BOOLEAN;
//  871 //	    rptcmd.attrList[0].attrData = (void *)(&zclSampleLight_DeviceEnable);
//  872 	    //zcl_SendReportCmd(SAMPLELIGHT_ENDPOINT,&zclSampleLight_DstAddr, ZCL_CLUSTER_ID_GEN_BASIC, &rptcmd, ZCL_FRAME_SERVER_CLIENT_DIR, true, zclSampleLightSeqNum );
//  873 //	    zcl_SendReportCmd(SAMPLELIGHT_ENDPOINT,&zclSampleLight_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, &rptnullcmd, ZCL_FRAME_SERVER_CLIENT_DIR, true, zclSampleLightSeqNum );
//  874   }
//  875 
//  876 
//  877   //report state for button 2
//  878   zclSampleLightSeqNum++;
??zclSampleLight_LcdDisplayUpdate_0:
        MOV     DPTR,#zclSampleLightSeqNum
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  879   zclReportCmd_t rptcmd1;
//  880   // Set destination address to indirect
//  881   zclSampleLight_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#zclSampleLight_DstAddr + 8
        MOV     A,#0x2
        LCALL   ?Subroutine3 & 0xFFFF
//  882   zclSampleLight_DstAddr.addr.shortAddr = 0;
//  883   zclSampleLight_DstAddr.endPoint=1;
//  884   rptcmd1.numAttr = 1;
??CrossCallReturnLabel_1:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  885 
//  886   if (zclSampleLight_Hold1 == 1) {
        MOV     DPTR,#zclSampleLight_Hold1
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclSampleLight_LcdDisplayUpdate_1
//  887     rptcmd1.attrList[0].attrID = ATTRID_ON_OFF;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  888     rptcmd1.attrList[0].dataType = ZCL_DATATYPE_BOOLEAN;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x10
        MOVX    @DPTR,A
//  889     rptcmd1.attrList[0].attrData = (void *)(&zclSampleLight_OnOff1);
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#zclSampleLight_OnOff1 & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(zclSampleLight_OnOff1 >> 8) & 0xff
        LCALL   ?Subroutine7 & 0xFFFF
//  890     zcl_SendReportCmd(SAMPLELIGHT_ENDPOINT+1,&zclSampleLight_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, &rptcmd1, ZCL_FRAME_SERVER_CLIENT_DIR, true, zclSampleLightSeqNum );
//  891   } else {
??CrossCallReturnLabel_9:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#zclSampleLight_DstAddr & 0xff
        MOV     R3,#(zclSampleLight_DstAddr >> 8) & 0xff
        MOV     R1,#0x2
        LCALL   `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  892 //	    rptcmd1.attrList[0].attrID = ATTRID_BASIC_DEVICE_ENABLED;
//  893 //	    rptcmd1.attrList[0].dataType = ZCL_DATATYPE_BOOLEAN;
//  894 //	    rptcmd1.attrList[0].attrData = (void *)(&zclSampleLight_DeviceEnable);
//  895 //	    zcl_SendReportCmd(SAMPLELIGHT_ENDPOINT+1,&zclSampleLight_DstAddr, ZCL_CLUSTER_ID_GEN_BASIC, &rptcmd1, ZCL_FRAME_SERVER_CLIENT_DIR, true, zclSampleLightSeqNum );
//  896 //	    zcl_SendReportCmd(SAMPLELIGHT_ENDPOINT+1,&zclSampleLight_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, &rptnullcmd, ZCL_FRAME_SERVER_CLIENT_DIR, true, zclSampleLightSeqNum );
//  897   }
//  898   /*//report state
//  899   zclSampleLightSeqNumState++;
//  900   zclReportCmd_t rptcmd;
//  901   rptcmd.numAttr = 1;
//  902   rptcmd.attrList[0].attrID = ATTRID_ON_OFF;
//  903   rptcmd.attrList[0].dataType = ZCL_DATATYPE_BOOLEAN;
//  904   rptcmd.attrList[0].attrData = (void *)(&zclSampleLight_OnOff);
//  905 
//  906   // Set destination address to indirect
//  907   zclSampleLight_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  908   zclSampleLight_DstAddr.addr.shortAddr = 0;
//  909   zclSampleLight_DstAddr.endPoint=1;
//  910   zcl_SendReportCmd(SAMPLELIGHT_ENDPOINT,&zclSampleLight_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, &rptcmd, ZCL_FRAME_SERVER_CLIENT_DIR, true, zclSampleLightSeqNumState );*/
//  911   
//  912 #ifdef LCD_SUPPORTED
//  913   if ( giLightScreenMode == LIGHT_HELPMODE )
//  914   {
//  915     zclSampleLight_LcdDisplayHelpMode();
//  916   }
//  917   else
//  918   {
//  919     zclSampleLight_LcdDisplayMainMode();
//  920   }
//  921 #endif
//  922 
//  923   zclSampleLight_DisplayLight();
//  924 }
??zclSampleLight_LcdDisplayUpdate_1:
        MOV     A,#0x2
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock13

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function zclSampleLight_LcdDisplayUpdate
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function zclSampleLight_LcdDisplayUpdate
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function zcl_SendReportCmd
        ; Setup parameters for call to function zcl_SendReportCmd
        MOV     DPTR,#zclSampleLightSeqNum
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function zclSampleLight_LcdDisplayUpdate
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function zclSampleLight_LcdDisplayUpdate
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#zclSampleLight_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPTR,#zclSampleLight_DstAddr + 9
        INC     A
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19
//  925 
//  926 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  927 /*********************************************************************
//  928  * @fn      zclSampleLight_UpdateLampLevel
//  929  *
//  930  * @brief   Update lamp level output with gamma compensation
//  931  *
//  932  * @param   level
//  933  *
//  934  * @return  none
//  935  */
//  936 void zclSampleLight_UpdateLampLevel( uint8 level )
//  937 
//  938 {
//  939   uint16 gammaCorrectedLevel;
//  940 
//  941   // gamma correct the level
//  942   gammaCorrectedLevel = (uint16) ( pow( ( (float)level / LEVEL_MAX ), (float)GAMMA_VALUE ) * (float)LEVEL_MAX);
//  943 
//  944   halTimer1SetChannelDuty(WHITE_LED, (uint16)(((uint32)gammaCorrectedLevel*PWM_FULL_DUTY_CYCLE)/LEVEL_MAX) );
//  945 }
//  946 #endif
//  947 
//  948 /*********************************************************************
//  949  * @fn      zclSampleLight_DisplayLight
//  950  *
//  951  * @brief   Displays current state of light on LED and also on main display if supported.
//  952  *
//  953  * @param   none
//  954  *
//  955  * @return  none
//  956  */
//  957 static void zclSampleLight_DisplayLight( void )
//  958 {
//  959   // set the LED1 based on light (on or off)
//  960 /*  if ( zclSampleLight_OnOff == LIGHT_ON )
//  961   {
//  962     HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  963   }
//  964   else
//  965   {
//  966     HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
//  967   }
//  968 
//  969   if ( zclSampleLight_OnOff1 == LIGHT_ON )
//  970   {
//  971     HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
//  972   }
//  973   else
//  974   {
//  975     HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
//  976   }*/
//  977   
//  978 #ifdef LCD_SUPPORTED
//  979   if (giLightScreenMode == LIGHT_MAINMODE)
//  980   {
//  981 #ifdef ZCL_LEVEL_CTRL
//  982     // display current light level
//  983     if ( ( zclSampleLight_LevelCurrentLevel == ATTR_LEVEL_MIN_LEVEL ) &&
//  984          ( zclSampleLight_OnOff == LIGHT_OFF ) )
//  985     {
//  986       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
//  987     }
//  988     else if ( ( zclSampleLight_LevelCurrentLevel >= ATTR_LEVEL_MAX_LEVEL ) ||
//  989               ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelOnLevel ) ||
//  990                ( ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ) &&
//  991                  ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelLastLevel ) ) )
//  992     {
//  993       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
//  994     }
//  995     else    // "    LEVEL ###"
//  996     {
//  997       zclHA_uint8toa( zclSampleLight_LevelCurrentLevel, &sLightLevel[10] );
//  998       HalLcdWriteString( (char *)sLightLevel, HAL_LCD_LINE_2 );
//  999     }
// 1000 #else
// 1001     if ( zclSampleLight_OnOff )
// 1002     {
// 1003       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
// 1004     }
// 1005     else
// 1006     {
// 1007       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
// 1008     }
// 1009 #endif // ZCL_LEVEL_CTRL
// 1010   }
// 1011 #endif // LCD_SUPPORTED
// 1012 }
// 1013 
// 1014 #ifdef LCD_SUPPORTED
// 1015 /*********************************************************************
// 1016  * @fn      zclSampleLight_LcdDisplayMainMode
// 1017  *
// 1018  * @brief   Called to display the main screen on the LCD.
// 1019  *
// 1020  * @param   none
// 1021  *
// 1022  * @return  none
// 1023  */
// 1024 static void zclSampleLight_LcdDisplayMainMode( void )
// 1025 {
// 1026   // display line 1 to indicate NWK status
// 1027   if ( zclSampleLight_NwkState == DEV_ZB_COORD )
// 1028   {
// 1029     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZC );
// 1030   }
// 1031   else if ( zclSampleLight_NwkState == DEV_ROUTER )
// 1032   {
// 1033     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZR );
// 1034   }
// 1035   else if ( zclSampleLight_NwkState == DEV_END_DEVICE )
// 1036   {
// 1037     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZED );
// 1038   }
// 1039 
// 1040   // end of line 3 displays permit join status (*)
// 1041   if ( gPermitDuration )
// 1042   {
// 1043     sSwHelp[15] = '*';
// 1044   }
// 1045   else
// 1046   {
// 1047     sSwHelp[15] = ' ';
// 1048   }
// 1049   HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
// 1050 }
// 1051 
// 1052 /*********************************************************************
// 1053  * @fn      zclSampleLight_LcdDisplayHelpMode
// 1054  *
// 1055  * @brief   Called to display the SW options on the LCD.
// 1056  *
// 1057  * @param   none
// 1058  *
// 1059  * @return  none
// 1060  */
// 1061 static void zclSampleLight_LcdDisplayHelpMode( void )
// 1062 {
// 1063   HalLcdWriteString( (char *)sSwLight, HAL_LCD_LINE_1 );
// 1064   HalLcdWriteString( (char *)sSwEZMode, HAL_LCD_LINE_2 );
// 1065   HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
// 1066 }
// 1067 #endif  // LCD_SUPPORTED
// 1068 
// 1069 /*********************************************************************
// 1070  * @fn      zclSampleLight_ProcessIdentifyTimeChange
// 1071  *
// 1072  * @brief   Called to process any change to the IdentifyTime attribute.
// 1073  *
// 1074  * @param   none
// 1075  *
// 1076  * @return  none
// 1077  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1078 static void zclSampleLight_ProcessIdentifyTimeChange( void )
zclSampleLight_ProcessIdentifyTimeChange:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function zclSampleLight_ProcessIdentifyTimeChange
        CODE
// 1079 {
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1080   if ( zclSampleLight_IdentifyTime > 0 )
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV     A,R0
        ORL     A,R1
        JZ      ??zclSampleLight_ProcessIdentifyTimeChange_0
// 1081   {
// 1082     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 4)
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
// 1083     HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x5
        MOV     R2,#-0x1
        MOV     R1,#0x8
        LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
        SJMP    ??zclSampleLight_ProcessIdentifyTimeChange_1
// 1084   }
// 1085   else
// 1086   {
// 1087 #ifdef ZCL_EZMODE
// 1088     if ( zclSampleLight_IdentifyCommissionState & EZMODE_COMMISSION_OPERATIONAL )
// 1089     {
// 1090       HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
// 1091     }
// 1092     else
// 1093     {
// 1094       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
// 1095     }
// 1096 #endif
// 1097 
// 1098     osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
??zclSampleLight_ProcessIdentifyTimeChange_0:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 1099   }
// 1100 }
??zclSampleLight_ProcessIdentifyTimeChange_1:
          CFI EndBlock cfiBlock20
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock21
// 1101 
// 1102 /*********************************************************************
// 1103  * @fn      zclSampleLight_BasicResetCB
// 1104  *
// 1105  * @brief   Callback from the ZCL General Cluster Library
// 1106  *          to set all the Basic Cluster attributes to default values.
// 1107  *
// 1108  * @param   none
// 1109  *
// 1110  * @return  none
// 1111  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1112 static void zclSampleLight_BasicResetCB( void )
zclSampleLight_BasicResetCB:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function zclSampleLight_BasicResetCB
        CODE
// 1113 {
        FUNCALL zclSampleLight_BasicResetCB, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, NLME_LeaveReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, ZDApp_LeaveReset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 5)
// 1114   NLME_LeaveReq_t leaveReq;
// 1115   // Set every field to 0
// 1116   osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1117 
// 1118   // This will enable the device to rejoin the network after reset.
// 1119   leaveReq.rejoin = TRUE;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1120 
// 1121   // Set the NV startup option to force a "new" join.
// 1122   zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
// 1123 
// 1124   // Leave the network, and reset afterwards
// 1125   if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
        ; Setup parameters for call to function NLME_LeaveReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
        MOV     A,R1
        JZ      ??zclSampleLight_BasicResetCB_0
// 1126   {
// 1127     // Couldn't send out leave; prepare to reset anyway
// 1128     ZDApp_LeaveReset( FALSE );
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     R1,#0x0
        LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
// 1129   }
// 1130 }
??zclSampleLight_BasicResetCB_0:
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        SJMP    ?Subroutine2
          CFI EndBlock cfiBlock22
// 1131 
// 1132 /*********************************************************************
// 1133  * @fn      zclSampleLight_IdentifyCB
// 1134  *
// 1135  * @brief   Callback from the ZCL General Cluster Library when
// 1136  *          it received an Identity Command for this application.
// 1137  *
// 1138  * @param   srcAddr - source address and endpoint of the response message
// 1139  * @param   identifyTime - the number of seconds to identify yourself
// 1140  *
// 1141  * @return  none
// 1142  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1143 static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd )
zclSampleLight_IdentifyCB:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyCB
        CODE
// 1144 {
        FUNCALL zclSampleLight_IdentifyCB, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1145   zclSampleLight_IdentifyTime = pCmd->identifyTime;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     DPTR,#zclSampleLight_IdentifyTime
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1146   zclSampleLight_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
// 1147 }
        SJMP    ?Subroutine2
          CFI EndBlock cfiBlock23
// 1148 
// 1149 /*********************************************************************
// 1150  * @fn      zclSampleLight_IdentifyQueryRspCB
// 1151  *
// 1152  * @brief   Callback from the ZCL General Cluster Library when
// 1153  *          it received an Identity Query Response Command for this application.
// 1154  *
// 1155  * @param   srcAddr - requestor's address
// 1156  * @param   timeout - number of seconds to identify yourself (valid for query response)
// 1157  *
// 1158  * @return  none
// 1159  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1160 static void zclSampleLight_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
zclSampleLight_IdentifyQueryRspCB:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyQueryRspCB
        CODE
// 1161 {
        ; Saved register size: 0
        ; Auto size: 0
// 1162   (void)pRsp;
// 1163 #ifdef ZCL_EZMODE
// 1164   {
// 1165     zclEZMode_ActionData_t data;
// 1166     data.pIdentifyQueryRsp = pRsp;
// 1167     zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
// 1168   }
// 1169 #endif
// 1170 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock24
// 1171 
// 1172 /*********************************************************************
// 1173  * @fn      zclSampleLight_OnOffCB
// 1174  *
// 1175  * @brief   Callback from the ZCL General Cluster Library when
// 1176  *          it received an On/Off Command for this application.
// 1177  *
// 1178  * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
// 1179  *
// 1180  * @return  none
// 1181  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1182 static void zclSampleLight_OnOffCB( uint8 cmd )
zclSampleLight_OnOffCB:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function zclSampleLight_OnOffCB
        CODE
// 1183 {
        FUNCALL zclSampleLight_OnOffCB, zcl_getRawAFMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_OnOffCB, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_OnOffCB, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_OnOffCB, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 1184   afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
        ; Setup parameters for call to function zcl_getRawAFMsg
        LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
// 1185 if (pPtr->endPoint == SAMPLELIGHT_ENDPOINT) //button 1
        MOV     A,R2
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??zclSampleLight_OnOffCB_0
// 1186 {
// 1187   zclSampleLight_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
        LCALL   ?Subroutine8 & 0xFFFF
// 1188 
// 1189 
// 1190   // Turn on the light
// 1191   if ( cmd == COMMAND_ON )
??CrossCallReturnLabel_10:
        JZ      ??zclSampleLight_OnOffCB_1
// 1192   {
// 1193     zclSampleLight_OnOff = LIGHT_ON;
// 1194     HalLedBlink(HAL_LED_4, 1, 50, 40);
// 1195 
// 1196   }
// 1197   // Turn off the light
// 1198   else if ( cmd == COMMAND_OFF )
        MOV     A,R6
        JZ      ??zclSampleLight_OnOffCB_2
// 1199   {
// 1200     zclSampleLight_OnOff = LIGHT_OFF;
// 1201     HalLedBlink(HAL_LED_2, 1, 50, 40);
// 1202   }
// 1203   // Toggle the light
// 1204   else if ( cmd == COMMAND_TOGGLE )
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??zclSampleLight_OnOffCB_3
// 1205   {
// 1206     if ( zclSampleLight_OnOff == LIGHT_OFF )
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        JNZ     ??zclSampleLight_OnOffCB_2
// 1207     {
// 1208       zclSampleLight_OnOff = LIGHT_ON;
??zclSampleLight_OnOffCB_1:
        MOV     DPTR,#zclSampleLight_OnOff
        LCALL   ?Subroutine5 & 0xFFFF
// 1209       HalLedBlink(HAL_LED_4, 1, 50, 40);
// 1210     }
??CrossCallReturnLabel_5:
        SJMP    ??CrossCallReturnLabel_3
// 1211     else
// 1212     {
// 1213       zclSampleLight_OnOff = LIGHT_OFF;
??zclSampleLight_OnOffCB_2:
        MOV     DPTR,#zclSampleLight_OnOff
        LCALL   ?Subroutine4 & 0xFFFF
// 1214       HalLedBlink(HAL_LED_2, 1, 50, 40);
// 1215     }
// 1216   }
// 1217 }
??CrossCallReturnLabel_3:
        LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
        SJMP    ??zclSampleLight_OnOffCB_3
// 1218 else if (pPtr->endPoint == SAMPLELIGHT_ENDPOINT+1) //button 2
??zclSampleLight_OnOffCB_0:
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??zclSampleLight_OnOffCB_3
// 1219 {
// 1220   zclSampleLight_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
        LCALL   ?Subroutine8 & 0xFFFF
// 1221 
// 1222 
// 1223   // Turn on the light
// 1224   if ( cmd == COMMAND_ON )
??CrossCallReturnLabel_11:
        JZ      ??zclSampleLight_OnOffCB_4
// 1225   {
// 1226     zclSampleLight_OnOff1 = LIGHT_ON;
// 1227   }
// 1228   // Turn off the light
// 1229   else if ( cmd == COMMAND_OFF )
        MOV     A,R6
        JZ      ??zclSampleLight_OnOffCB_5
// 1230   {
// 1231     zclSampleLight_OnOff1 = LIGHT_OFF;
// 1232   }
// 1233   // Toggle the light
// 1234   else if ( cmd == COMMAND_TOGGLE )
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??zclSampleLight_OnOffCB_3
// 1235   {
// 1236     if ( zclSampleLight_OnOff1 == LIGHT_OFF )
        MOV     DPTR,#zclSampleLight_OnOff1
        MOVX    A,@DPTR
        JNZ     ??zclSampleLight_OnOffCB_5
// 1237     {
// 1238       zclSampleLight_OnOff1 = LIGHT_ON;
??zclSampleLight_OnOffCB_4:
        MOV     DPTR,#zclSampleLight_OnOff1
        MOV     A,#0x1
        SJMP    ??zclSampleLight_OnOffCB_6
// 1239     }
// 1240     else
// 1241     {
// 1242       zclSampleLight_OnOff1 = LIGHT_OFF;
??zclSampleLight_OnOffCB_5:
        MOV     DPTR,#zclSampleLight_OnOff1
        CLR     A
??zclSampleLight_OnOffCB_6:
        MOVX    @DPTR,A
// 1243     }
// 1244   }
// 1245 
// 1246 }
// 1247 
// 1248 #if ZCL_LEVEL_CTRL
// 1249   zclSampleLight_DefaultMove( );
// 1250 #endif
// 1251 
// 1252   // update the display
// 1253   zclSampleLight_LcdDisplayUpdate( );
??zclSampleLight_OnOffCB_3:
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
// 1254 }
        LJMP    ??Subroutine11_0 & 0xFFFF
          CFI EndBlock cfiBlock25

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function zclSampleLight_OnOffCB
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function zclSampleLight_OnOffCB
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV     DPTR,#zclSampleLight_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x1
        XRL     A,R6
        RET
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond29 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function zclSampleLight_ProcessIdentifyTimeChange
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond30) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond30) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond30) CFA_SP SP+-7
          CFI Block cfiPicker31 Using cfiCommon1
          CFI (cfiPicker31) NoFunction
          CFI (cfiPicker31) Picker
        MOV     DPTR,#zclSampleLight_IdentifyTime
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiPicker31
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine12_0:
          CFI Block cfiCond32 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
          CFI Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function zclSampleLight_event_loop
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_13
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-4
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function zclSampleLight_IdentifyCB
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond34) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond34) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond34) CFA_SP SP+-7
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function zclSampleLight_OnOffCB
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_10
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-4
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function zclSampleLight_OnOffCB
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_11
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-4
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function zclSampleLight_event_loop
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function zclSampleLight_ProcessIdentifyTimeChange
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond38) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond38) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond38) CFA_SP SP+-7
          CFI Block cfiPicker39 Using cfiCommon1
          CFI (cfiPicker39) NoFunction
          CFI (cfiPicker39) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiPicker39

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond40 Using cfiCommon0
          CFI Function zclSampleLight_HandleKeys
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function zclSampleLight_OnOffCB
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker42 Using cfiCommon1
          CFI (cfiPicker42) NoFunction
          CFI (cfiPicker42) Picker
        MOV     A,#0x1
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalLedBlink
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#0x28
        MOV     R5,#0x0
        MOV     R3,#0x32
        MOV     R2,A
        MOV     R1,#0x8
        RET
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiPicker42

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond43 Using cfiCommon0
          CFI Function zclSampleLight_HandleKeys
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function zclSampleLight_OnOffCB
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker45 Using cfiCommon1
          CFI (cfiPicker45) NoFunction
          CFI (cfiPicker45) Picker
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalLedBlink
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#0x28
        MOV     R5,A
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x2
        RET
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiPicker45

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for bindingInClusters>`:
        DATA16
        DW 6

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sampleLight_TestEp>`:
        DATA8
        DB 1
        DATA16
        DW zclSampleLight_TaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sampleLight_TestEp1>`:
        DATA8
        DB 2
        DATA16
        DW zclSampleLight1_TaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleLight_NwkState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleLight_CmdCallbacks>`:
        DATA16
        DW `??zclSampleLight_BasicResetCB::?relay`
        DW `??zclSampleLight_IdentifyCB::?relay`
        DW 0H
        DW `??zclSampleLight_IdentifyQueryRspCB::?relay`
        DW `??zclSampleLight_OnOffCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight1_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight1_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_LcdDisplayUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_LcdDisplayUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_ProcessIdentifyTimeChange::?re`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_ProcessIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_IdentifyCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_IdentifyCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_IdentifyQueryRspCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_IdentifyQueryRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_OnOffCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_OnOffCB

        END
// 1255 
// 1256 #ifdef ZCL_LEVEL_CTRL
// 1257 /*********************************************************************
// 1258  * @fn      zclSampleLight_TimeRateHelper
// 1259  *
// 1260  * @brief   Calculate time based on rate, and startup level state machine
// 1261  *
// 1262  * @param   newLevel - new level for current level
// 1263  *
// 1264  * @return  diff (directly), zclSampleLight_CurrentLevel32 and zclSampleLight_NewLevel, zclSampleLight_NewLevelUp
// 1265  */
// 1266 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel )
// 1267 {
// 1268   uint32 diff;
// 1269   uint32 newLevel32;
// 1270 
// 1271   // remember current and new level
// 1272   zclSampleLight_NewLevel = newLevel;
// 1273   zclSampleLight_CurrentLevel32 = (uint32)1000 * zclSampleLight_LevelCurrentLevel;
// 1274 
// 1275   // calculate diff
// 1276   newLevel32 = (uint32)1000 * newLevel;
// 1277   if ( zclSampleLight_LevelCurrentLevel > newLevel )
// 1278   {
// 1279     diff = zclSampleLight_CurrentLevel32 - newLevel32;
// 1280     zclSampleLight_NewLevelUp = FALSE;  // moving down
// 1281   }
// 1282   else
// 1283   {
// 1284     diff = newLevel32 - zclSampleLight_CurrentLevel32;
// 1285     zclSampleLight_NewLevelUp = TRUE;   // moving up
// 1286   }
// 1287 
// 1288   return ( diff );
// 1289 }
// 1290 
// 1291 /*********************************************************************
// 1292  * @fn      zclSampleLight_MoveBasedOnRate
// 1293  *
// 1294  * @brief   Calculate time based on rate, and startup level state machine
// 1295  *
// 1296  * @param   newLevel - new level for current level
// 1297  * @param   rate16   - fixed point rate (e.g. 16.123)
// 1298  *
// 1299  * @return  none
// 1300  */
// 1301 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate )
// 1302 {
// 1303   uint32 diff;
// 1304 
// 1305   // determine how much time (in 10ths of seconds) based on the difference and rate
// 1306   zclSampleLight_Rate32 = rate;
// 1307   diff = zclSampleLight_TimeRateHelper( newLevel );
// 1308   zclSampleLight_LevelRemainingTime = diff / rate;
// 1309   if ( !zclSampleLight_LevelRemainingTime )
// 1310   {
// 1311     zclSampleLight_LevelRemainingTime = 1;
// 1312   }
// 1313 
// 1314   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
// 1315 }
// 1316 
// 1317 /*********************************************************************
// 1318  * @fn      zclSampleLight_MoveBasedOnTime
// 1319  *
// 1320  * @brief   Calculate rate based on time, and startup level state machine
// 1321  *
// 1322  * @param   newLevel  - new level for current level
// 1323  * @param   time      - in 10ths of seconds
// 1324  *
// 1325  * @return  none
// 1326  */
// 1327 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time )
// 1328 {
// 1329   uint16 diff;
// 1330 
// 1331   // determine rate (in units) based on difference and time
// 1332   diff = zclSampleLight_TimeRateHelper( newLevel );
// 1333   zclSampleLight_LevelRemainingTime = zclSampleLight_GetTime( newLevel, time );
// 1334   zclSampleLight_Rate32 = diff / time;
// 1335 
// 1336   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
// 1337 }
// 1338 
// 1339 /*********************************************************************
// 1340  * @fn      zclSampleLight_GetTime
// 1341  *
// 1342  * @brief   Determine amount of time that MoveXXX will take to complete.
// 1343  *
// 1344  * @param   level = new level to move to
// 1345  *          time  = 0xffff=default, or 0x0000-n amount of time in tenths of seconds.
// 1346  *
// 1347  * @return  none
// 1348  */
// 1349 static uint16 zclSampleLight_GetTime( uint8 level, uint16 time )
// 1350 {
// 1351   // there is a hiearchy of the amount of time to use for transistioning
// 1352   // check each one in turn. If none of defaults are set, then use fastest
// 1353   // time possible.
// 1354   if ( time == 0xFFFF )
// 1355   {
// 1356     // use On or Off Transition Time if set (not 0xffff)
// 1357     if ( zclSampleLight_OnOff == LIGHT_ON )
// 1358     {
// 1359       time = zclSampleLight_LevelOffTransitionTime;
// 1360     }
// 1361     else
// 1362     {
// 1363       time = zclSampleLight_LevelOnTransitionTime;
// 1364     }
// 1365 
// 1366     // else use OnOffTransitionTime if set (not 0xffff)
// 1367     if ( time == 0xFFFF )
// 1368     {
// 1369       time = zclSampleLight_LevelOnOffTransitionTime;
// 1370     }
// 1371 
// 1372     // else as fast as possible
// 1373     if ( time == 0xFFFF )
// 1374     {
// 1375       time = 1;
// 1376     }
// 1377   }
// 1378 
// 1379   if ( !time )
// 1380   {
// 1381     time = 1; // as fast as possible
// 1382   }
// 1383 
// 1384   return ( time );
// 1385 }
// 1386 
// 1387 /*********************************************************************
// 1388  * @fn      zclSampleLight_DefaultMove
// 1389  *
// 1390  * @brief   We were turned on/off. Use default time to move to on or off.
// 1391  *
// 1392  * @param   zclSampleLight_OnOff - must be set prior to calling this function.
// 1393  *
// 1394  * @return  none
// 1395  */
// 1396 static void zclSampleLight_DefaultMove( void )
// 1397 {
// 1398   uint8  newLevel;
// 1399   uint32 rate;      // fixed point decimal (3 places, eg. 16.345)
// 1400   uint16 time;
// 1401 
// 1402   // if moving to on position, move to on level
// 1403   if ( zclSampleLight_OnOff )
// 1404   {
// 1405     if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
// 1406     {
// 1407       // The last Level (before going OFF) should be used)
// 1408       newLevel = zclSampleLight_LevelLastLevel;
// 1409     }
// 1410     else
// 1411     {
// 1412       newLevel = zclSampleLight_LevelOnLevel;
// 1413     }
// 1414 
// 1415     time = zclSampleLight_LevelOnTransitionTime;
// 1416   }
// 1417   else
// 1418   {
// 1419     newLevel = ATTR_LEVEL_MIN_LEVEL;
// 1420 
// 1421     if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
// 1422     {
// 1423       // Save the current Level before going OFF to use it when the light turns ON
// 1424       // it should be back to this level
// 1425       zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
// 1426     }
// 1427 
// 1428     time = zclSampleLight_LevelOffTransitionTime;
// 1429   }
// 1430 
// 1431   // else use OnOffTransitionTime if set (not 0xffff)
// 1432   if ( time == 0xFFFF )
// 1433   {
// 1434     time = zclSampleLight_LevelOnOffTransitionTime;
// 1435   }
// 1436 
// 1437   // else as fast as possible
// 1438   if ( time == 0xFFFF )
// 1439   {
// 1440     time = 1;
// 1441   }
// 1442 
// 1443   // calculate rate based on time (int 10ths) for full transition (1-254)
// 1444   rate = 255000 / time;    // units per tick, fixed point, 3 decimal places (e.g. 8500 = 8.5 units per tick)
// 1445 
// 1446   // start up state machine.
// 1447   zclSampleLight_WithOnOff = TRUE;
// 1448   zclSampleLight_MoveBasedOnRate( newLevel, rate );
// 1449 }
// 1450 
// 1451 /*********************************************************************
// 1452  * @fn      zclSampleLight_AdjustLightLevel
// 1453  *
// 1454  * @brief   Called each 10th of a second while state machine running
// 1455  *
// 1456  * @param   none
// 1457  *
// 1458  * @return  none
// 1459  */
// 1460 static void zclSampleLight_AdjustLightLevel( void )
// 1461 {
// 1462   // one tick (10th of a second) less
// 1463   if ( zclSampleLight_LevelRemainingTime )
// 1464   {
// 1465     --zclSampleLight_LevelRemainingTime;
// 1466   }
// 1467 
// 1468   // no time left, done
// 1469   if ( zclSampleLight_LevelRemainingTime == 0)
// 1470   {
// 1471     zclSampleLight_LevelCurrentLevel = zclSampleLight_NewLevel;
// 1472   }
// 1473 
// 1474   // still time left, keep increment/decrementing
// 1475   else
// 1476   {
// 1477     if ( zclSampleLight_NewLevelUp )
// 1478     {
// 1479       zclSampleLight_CurrentLevel32 += zclSampleLight_Rate32;
// 1480     }
// 1481     else
// 1482     {
// 1483       zclSampleLight_CurrentLevel32 -= zclSampleLight_Rate32;
// 1484     }
// 1485     zclSampleLight_LevelCurrentLevel = (uint8)( zclSampleLight_CurrentLevel32 / 1000 );
// 1486   }
// 1487 
// 1488 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
// 1489   zclSampleLight_UpdateLampLevel(zclSampleLight_LevelCurrentLevel);
// 1490 #endif
// 1491 
// 1492   // also affect on/off
// 1493   if ( zclSampleLight_WithOnOff )
// 1494   {
// 1495     if ( zclSampleLight_LevelCurrentLevel > ATTR_LEVEL_MIN_LEVEL )
// 1496     {
// 1497       zclSampleLight_OnOff = LIGHT_ON;
// 1498 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
// 1499       ENABLE_LAMP;
// 1500 #endif
// 1501     }
// 1502     else
// 1503     {
// 1504       zclSampleLight_OnOff = LIGHT_OFF;
// 1505 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
// 1506       DISABLE_LAMP;
// 1507 #endif
// 1508     }
// 1509   }
// 1510 
// 1511   // display light level as we go
// 1512   zclSampleLight_DisplayLight( );
// 1513 
// 1514   // keep ticking away
// 1515   if ( zclSampleLight_LevelRemainingTime )
// 1516   {
// 1517     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
// 1518   }
// 1519 }
// 1520 
// 1521 /*********************************************************************
// 1522  * @fn      zclSampleLight_LevelControlMoveToLevelCB
// 1523  *
// 1524  * @brief   Callback from the ZCL General Cluster Library when
// 1525  *          it received a LevelControlMoveToLevel Command for this application.
// 1526  *
// 1527  * @param   pCmd - ZigBee command parameters
// 1528  *
// 1529  * @return  none
// 1530  */
// 1531 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
// 1532 {
// 1533   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1534   zclSampleLight_MoveBasedOnTime( pCmd->level, pCmd->transitionTime );
// 1535 }
// 1536 
// 1537 /*********************************************************************
// 1538  * @fn      zclSampleLight_LevelControlMoveCB
// 1539  *
// 1540  * @brief   Callback from the ZCL General Cluster Library when
// 1541  *          it received a LevelControlMove Command for this application.
// 1542  *
// 1543  * @param   pCmd - ZigBee command parameters
// 1544  *
// 1545  * @return  none
// 1546  */
// 1547 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd )
// 1548 {
// 1549   uint8 newLevel;
// 1550   uint32 rate;
// 1551 
// 1552   // convert rate from units per second to units per tick (10ths of seconds)
// 1553   // and move at that right up or down
// 1554   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1555 
// 1556   if ( pCmd->moveMode == LEVEL_MOVE_UP )
// 1557   {
// 1558     newLevel = ATTR_LEVEL_MAX_LEVEL;  // fully on
// 1559   }
// 1560   else
// 1561   {
// 1562     newLevel = ATTR_LEVEL_MIN_LEVEL; // fully off
// 1563   }
// 1564 
// 1565   rate = (uint32)100 * pCmd->rate;
// 1566   zclSampleLight_MoveBasedOnRate( newLevel, rate );
// 1567 }
// 1568 
// 1569 /*********************************************************************
// 1570  * @fn      zclSampleLight_LevelControlStepCB
// 1571  *
// 1572  * @brief   Callback from the ZCL General Cluster Library when
// 1573  *          it received an On/Off Command for this application.
// 1574  *
// 1575  * @param   pCmd - ZigBee command parameters
// 1576  *
// 1577  * @return  none
// 1578  */
// 1579 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd )
// 1580 {
// 1581   uint8 newLevel;
// 1582 
// 1583   // determine new level, but don't exceed boundaries
// 1584   if ( pCmd->stepMode == LEVEL_MOVE_UP )
// 1585   {
// 1586     if ( (uint16)zclSampleLight_LevelCurrentLevel + pCmd->amount > ATTR_LEVEL_MAX_LEVEL )
// 1587     {
// 1588       newLevel = ATTR_LEVEL_MAX_LEVEL;
// 1589     }
// 1590     else
// 1591     {
// 1592       newLevel = zclSampleLight_LevelCurrentLevel + pCmd->amount;
// 1593     }
// 1594   }
// 1595   else
// 1596   {
// 1597     if ( pCmd->amount >= zclSampleLight_LevelCurrentLevel )
// 1598     {
// 1599       newLevel = ATTR_LEVEL_MIN_LEVEL;
// 1600     }
// 1601     else
// 1602     {
// 1603       newLevel = zclSampleLight_LevelCurrentLevel - pCmd->amount;
// 1604     }
// 1605   }
// 1606 
// 1607   // move to the new level
// 1608   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1609   zclSampleLight_MoveBasedOnTime( newLevel, pCmd->transitionTime );
// 1610 }
// 1611 
// 1612 /*********************************************************************
// 1613  * @fn      zclSampleLight_LevelControlStopCB
// 1614  *
// 1615  * @brief   Callback from the ZCL General Cluster Library when
// 1616  *          it received an Level Control Stop Command for this application.
// 1617  *
// 1618  * @param   pCmd - ZigBee command parameters
// 1619  *
// 1620  * @return  none
// 1621  */
// 1622 static void zclSampleLight_LevelControlStopCB( void )
// 1623 {
// 1624   // stop immediately
// 1625   osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT );
// 1626   zclSampleLight_LevelRemainingTime = 0;
// 1627 }
// 1628 #endif
// 1629 
// 1630 /******************************************************************************
// 1631  *
// 1632  *  Functions for processing ZCL Foundation incoming Command/Response messages
// 1633  *
// 1634  *****************************************************************************/
// 1635 
// 1636 /*********************************************************************
// 1637  * @fn      zclSampleLight_ProcessIncomingMsg
// 1638  *
// 1639  * @brief   Process ZCL Foundation incoming message
// 1640  *
// 1641  * @param   pInMsg - pointer to the received message
// 1642  *
// 1643  * @return  none
// 1644  */
// 1645 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
// 1646 {
// 1647   switch ( pInMsg->zclHdr.commandID )
// 1648   {
// 1649 #ifdef ZCL_READ
// 1650     case ZCL_CMD_READ_RSP:
// 1651       zclSampleLight_ProcessInReadRspCmd( pInMsg );
// 1652       break;
// 1653 #endif
// 1654 #ifdef ZCL_WRITE
// 1655     case ZCL_CMD_WRITE_RSP:
// 1656       zclSampleLight_ProcessInWriteRspCmd( pInMsg );
// 1657       break;
// 1658 #endif
// 1659 #ifdef ZCL_REPORT
// 1660     // Attribute Reporting implementation should be added here
// 1661     case ZCL_CMD_CONFIG_REPORT:
// 1662       // zclSampleLight_ProcessInConfigReportCmd( pInMsg );
// 1663       break;
// 1664 
// 1665     case ZCL_CMD_CONFIG_REPORT_RSP:
// 1666       // zclSampleLight_ProcessInConfigReportRspCmd( pInMsg );
// 1667       break;
// 1668 
// 1669     case ZCL_CMD_READ_REPORT_CFG:
// 1670       // zclSampleLight_ProcessInReadReportCfgCmd( pInMsg );
// 1671       break;
// 1672 
// 1673     case ZCL_CMD_READ_REPORT_CFG_RSP:
// 1674       // zclSampleLight_ProcessInReadReportCfgRspCmd( pInMsg );
// 1675       break;
// 1676 
// 1677     case ZCL_CMD_REPORT:
// 1678       // zclSampleLight_ProcessInReportCmd( pInMsg );
// 1679       break;
// 1680 #endif
// 1681     case ZCL_CMD_DEFAULT_RSP:
// 1682       zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
// 1683       break;
// 1684 #ifdef ZCL_DISCOVER
// 1685     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
// 1686       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
// 1687       break;
// 1688 
// 1689     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
// 1690       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
// 1691       break;
// 1692 
// 1693     case ZCL_CMD_DISCOVER_ATTRS_RSP:
// 1694       zclSampleLight_ProcessInDiscAttrsRspCmd( pInMsg );
// 1695       break;
// 1696 
// 1697     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
// 1698       zclSampleLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
// 1699       break;
// 1700 #endif
// 1701     default:
// 1702       break;
// 1703   }
// 1704 
// 1705   if ( pInMsg->attrCmd )
// 1706     osal_mem_free( pInMsg->attrCmd );
// 1707 }
// 1708 
// 1709 #ifdef ZCL_READ
// 1710 /*********************************************************************
// 1711  * @fn      zclSampleLight_ProcessInReadRspCmd
// 1712  *
// 1713  * @brief   Process the "Profile" Read Response Command
// 1714  *
// 1715  * @param   pInMsg - incoming message to process
// 1716  *
// 1717  * @return  none
// 1718  */
// 1719 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
// 1720 {
// 1721   zclReadRspCmd_t *readRspCmd;
// 1722   uint8 i;
// 1723 
// 1724   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
// 1725   for (i = 0; i < readRspCmd->numAttr; i++)
// 1726   {
// 1727     // Notify the originator of the results of the original read attributes
// 1728     // attempt and, for each successfull request, the value of the requested
// 1729     // attribute
// 1730   }
// 1731 
// 1732   return ( TRUE );
// 1733 }
// 1734 #endif // ZCL_READ
// 1735 
// 1736 #ifdef ZCL_WRITE
// 1737 /*********************************************************************
// 1738  * @fn      zclSampleLight_ProcessInWriteRspCmd
// 1739  *
// 1740  * @brief   Process the "Profile" Write Response Command
// 1741  *
// 1742  * @param   pInMsg - incoming message to process
// 1743  *
// 1744  * @return  none
// 1745  */
// 1746 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
// 1747 {
// 1748   zclWriteRspCmd_t *writeRspCmd;
// 1749   uint8 i;
// 1750 
// 1751   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
// 1752   for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1753   {
// 1754     // Notify the device of the results of the its original write attributes
// 1755     // command.
// 1756   }
// 1757 
// 1758   return ( TRUE );
// 1759 }
// 1760 #endif // ZCL_WRITE
// 1761 
// 1762 /*********************************************************************
// 1763  * @fn      zclSampleLight_ProcessInDefaultRspCmd
// 1764  *
// 1765  * @brief   Process the "Profile" Default Response Command
// 1766  *
// 1767  * @param   pInMsg - incoming message to process
// 1768  *
// 1769  * @return  none
// 1770  */
// 1771 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
// 1772 {
// 1773   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
// 1774 
// 1775   // Device is notified of the Default Response command.
// 1776   (void)pInMsg;
// 1777 
// 1778   return ( TRUE );
// 1779 }
// 1780 
// 1781 #ifdef ZCL_DISCOVER
// 1782 /*********************************************************************
// 1783  * @fn      zclSampleLight_ProcessInDiscCmdsRspCmd
// 1784  *
// 1785  * @brief   Process the Discover Commands Response Command
// 1786  *
// 1787  * @param   pInMsg - incoming message to process
// 1788  *
// 1789  * @return  none
// 1790  */
// 1791 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
// 1792 {
// 1793   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
// 1794   uint8 i;
// 1795 
// 1796   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
// 1797   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
// 1798   {
// 1799     // Device is notified of the result of its attribute discovery command.
// 1800   }
// 1801 
// 1802   return ( TRUE );
// 1803 }
// 1804 
// 1805 /*********************************************************************
// 1806  * @fn      zclSampleLight_ProcessInDiscAttrsRspCmd
// 1807  *
// 1808  * @brief   Process the "Profile" Discover Attributes Response Command
// 1809  *
// 1810  * @param   pInMsg - incoming message to process
// 1811  *
// 1812  * @return  none
// 1813  */
// 1814 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
// 1815 {
// 1816   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
// 1817   uint8 i;
// 1818 
// 1819   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
// 1820   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1821   {
// 1822     // Device is notified of the result of its attribute discovery command.
// 1823   }
// 1824 
// 1825   return ( TRUE );
// 1826 }
// 1827 
// 1828 /*********************************************************************
// 1829  * @fn      zclSampleLight_ProcessInDiscAttrsExtRspCmd
// 1830  *
// 1831  * @brief   Process the "Profile" Discover Attributes Extended Response Command
// 1832  *
// 1833  * @param   pInMsg - incoming message to process
// 1834  *
// 1835  * @return  none
// 1836  */
// 1837 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
// 1838 {
// 1839   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
// 1840   uint8 i;
// 1841 
// 1842   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
// 1843   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1844   {
// 1845     // Device is notified of the result of its attribute discovery command.
// 1846   }
// 1847 
// 1848   return ( TRUE );
// 1849 }
// 1850 #endif // ZCL_DISCOVER
// 1851 
// 1852 #if ZCL_EZMODE
// 1853 /*********************************************************************
// 1854  * @fn      zclSampleLight_ProcessZDOMsgs
// 1855  *
// 1856  * @brief   Called when this node receives a ZDO/ZDP response.
// 1857  *
// 1858  * @param   none
// 1859  *
// 1860  * @return  status
// 1861  */
// 1862 static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
// 1863 {
// 1864   zclEZMode_ActionData_t data;
// 1865   ZDO_MatchDescRsp_t *pMatchDescRsp;
// 1866 
// 1867   // Let EZ-Mode know of the Simple Descriptor Response
// 1868   if ( pMsg->clusterID == Match_Desc_rsp )
// 1869   {
// 1870     pMatchDescRsp = ZDO_ParseEPListRsp( pMsg );
// 1871     data.pMatchDescRsp = pMatchDescRsp;
// 1872     zcl_EZModeAction( EZMODE_ACTION_MATCH_DESC_RSP, &data );
// 1873     osal_mem_free( pMatchDescRsp );
// 1874   }
// 1875 }
// 1876 
// 1877 /*********************************************************************
// 1878  * @fn      zclSampleLight_EZModeCB
// 1879  *
// 1880  * @brief   The Application is informed of events. This can be used to show on the UI what is
// 1881 *           going on during EZ-Mode steering/finding/binding.
// 1882  *
// 1883  * @param   state - an
// 1884  *
// 1885  * @return  none
// 1886  */
// 1887 static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
// 1888 {
// 1889 #ifdef LCD_SUPPORTED
// 1890   char *pStr;
// 1891   uint8 err;
// 1892 #endif
// 1893 
// 1894   // time to go into identify mode
// 1895   if ( state == EZMODE_STATE_IDENTIFYING )
// 1896   {
// 1897 #ifdef LCD_SUPPORTED
// 1898     HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
// 1899 #endif
// 1900 
// 1901     zclSampleLight_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
// 1902     zclSampleLight_ProcessIdentifyTimeChange();
// 1903   }
// 1904 
// 1905   // autoclosing, show what happened (success, cancelled, etc...)
// 1906   if( state == EZMODE_STATE_AUTOCLOSE )
// 1907   {
// 1908 #ifdef LCD_SUPPORTED
// 1909     pStr = NULL;
// 1910     err = pData->sAutoClose.err;
// 1911     if ( err == EZMODE_ERR_SUCCESS )
// 1912     {
// 1913       pStr = "EZMode: Success";
// 1914     }
// 1915     else if ( err == EZMODE_ERR_NOMATCH )
// 1916     {
// 1917       pStr = "EZMode: NoMatch"; // not a match made in heaven
// 1918     }
// 1919     if ( pStr )
// 1920     {
// 1921       if ( giLightScreenMode == LIGHT_MAINMODE )
// 1922       {
// 1923         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
// 1924       }
// 1925     }
// 1926 #endif
// 1927   }
// 1928 
// 1929   // finished, either show DstAddr/EP, or nothing (depending on success or not)
// 1930   if( state == EZMODE_STATE_FINISH )
// 1931   {
// 1932     // turn off identify mode
// 1933     zclSampleLight_IdentifyTime = 0;
// 1934     zclSampleLight_ProcessIdentifyTimeChange();
// 1935 
// 1936 #ifdef LCD_SUPPORTED
// 1937     // if successful, inform user which nwkaddr/ep we bound to
// 1938     pStr = NULL;
// 1939     err = pData->sFinish.err;
// 1940     if( err == EZMODE_ERR_SUCCESS )
// 1941     {
// 1942       // already stated on autoclose
// 1943     }
// 1944     else if ( err == EZMODE_ERR_CANCELLED )
// 1945     {
// 1946       pStr = "EZMode: Cancel";
// 1947     }
// 1948     else if ( err == EZMODE_ERR_BAD_PARAMETER )
// 1949     {
// 1950       pStr = "EZMode: BadParm";
// 1951     }
// 1952     else if ( err == EZMODE_ERR_TIMEDOUT )
// 1953     {
// 1954       pStr = "EZMode: TimeOut";
// 1955     }
// 1956     if ( pStr )
// 1957     {
// 1958       if ( giLightScreenMode == LIGHT_MAINMODE )
// 1959       {
// 1960         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
// 1961       }
// 1962     }
// 1963 #endif
// 1964     // show main UI screen 3 seconds after binding
// 1965     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_MAIN_SCREEN_EVT, 3000 );
// 1966   }
// 1967 }
// 1968 #endif // ZCL_EZMODE
// 1969 
// 1970 /****************************************************************************
// 1971 ****************************************************************************/
// 1972 
// 1973 
// 
// 1 433 bytes in segment BANKED_CODE
//    60 bytes in segment BANK_RELAYS
//    43 bytes in segment XDATA_I
//    43 bytes in segment XDATA_ID
//     4 bytes in segment XDATA_ROM_C
//    17 bytes in segment XDATA_Z
// 
//   103 bytes of CODE     memory
//     0 bytes of CONST    memory (+ 4 bytes shared)
// 1 433 bytes of HUGECODE memory
//    60 bytes of XDATA    memory
//
//Errors: none
//Warnings: 2
