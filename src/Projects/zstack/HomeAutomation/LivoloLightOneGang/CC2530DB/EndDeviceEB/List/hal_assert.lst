###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                12/Jan/2019  20:12:05
# Copyright 2004-2016 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        Z:\home\pail\git\dnckatsw00x\src\Components\hal\common\hal_assert.c
#    Command line       =  
#        -f
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        Z:\home\pail\git\dnckatsw00x\src\Components\hal\common\hal_assert.c -D
#        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D POWER_SAVING
#        -D NWK_AUTO_POLL -D xHOLD_AUTO_START -D xZTOOL_P1 -D MT_TASK -D
#        MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
#        xZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES
#        -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D
#        FEATURE_SYSTEM_STATS -lC
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\EndDeviceEB\List
#        -lA
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\Source\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\Source\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\EndDeviceEB\List\hal_assert.lst
#    Object file        =  
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530DB\EndDeviceEB\Obj\hal_assert.r51
#
###############################################################################

Z:\home\pail\git\dnckatsw00x\src\Components\hal\common\hal_assert.c
      1          /**************************************************************************************************
      2            Filename:       hal_assert.c
      3            Revised:        $Date: 2014-07-23 12:14:30 -0700 (Wed, 23 Jul 2014) $
      4            Revision:       $Revision: 39492 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          /* ------------------------------------------------------------------------------------------------
     42           *                                          Includes
     43           * ------------------------------------------------------------------------------------------------
     44           */
     45          #include "hal_assert.h"
     46          #include "hal_types.h"
     47          #include "hal_board.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     48          #include "hal_defs.h"
     49          #include "hal_mcu.h"
     50          
     51          #if (defined HAL_MCU_AVR) || (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || \
     52              (defined HAL_MCU_CC2533) || (defined HAL_MCU_MSP430)
     53            /* for access to debug data */
     54          #include "mac_rx.h"
     55          #include "mac_tx.h"
     56          #endif
     57          
     58          /* ------------------------------------------------------------------------------------------------
     59           *                                       Local Prototypes
     60           * ------------------------------------------------------------------------------------------------
     61           */
     62          void halAssertHazardLights(void);
     63          
     64          
     65          /**************************************************************************************************
     66           * @fn          halAssertHandler
     67           *
     68           * @brief       Logic to handle an assert.
     69           *
     70           * @param       none
     71           *
     72           * @return      none
     73           **************************************************************************************************
     74           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     75          void halAssertHandler( void )
   \                     halAssertHandler:
     76          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     77          #if defined( HAL_ASSERT_RESET )
     78            HAL_SYSTEM_RESET();
     79          #elif defined ( HAL_ASSERT_LIGHTS )
     80            halAssertHazardLights();
     81          #elif defined( HAL_ASSERT_SPIN )
     82            volatile uint8 i = 1;
     83            HAL_DISABLE_INTERRUPTS();
     84            while(i);
     85          #endif
     86          
     87            return;
   \   000000   02....       LJMP    ?BRET
     88          }
     89          
     90          #if !defined ASSERT_WHILE
     91          /**************************************************************************************************
     92           * @fn          halAssertHazardLights
     93           *
     94           * @brief       Blink LEDs to indicate an error.
     95           *
     96           * @param       none
     97           *
     98           * @return      none
     99           **************************************************************************************************
    100           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    101          void halAssertHazardLights(void)
   \                     halAssertHazardLights:
    102          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    103            enum
    104            {
    105              DEBUG_DATA_RSTACK_HIGH_OFS,
    106              DEBUG_DATA_RSTACK_LOW_OFS,
    107              DEBUG_DATA_TX_ACTIVE_OFS,
    108              DEBUG_DATA_RX_ACTIVE_OFS,
    109          
    110          #if (defined HAL_MCU_AVR) || (defined HAL_MCU_CC2430)
    111              DEBUG_DATA_INT_MASK_OFS,
    112          #elif (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533)
    113              DEBUG_DATA_INT_MASK0_OFS,
    114              DEBUG_DATA_INT_MASK1_OFS,
    115          #endif
    116          
    117              DEBUG_DATA_SIZE
    118            };
    119          
    120            uint8 buttonHeld;
    121            uint8 debugData[DEBUG_DATA_SIZE];
    122          
    123            /* disable all interrupts before anything else */
    124            HAL_DISABLE_INTERRUPTS();
   \   00000A   C2AF         CLR     0xa8.7
    125          
    126            /*-------------------------------------------------------------------------------
    127             *  Initialize LEDs and turn them off.
    128             */
    129            HAL_BOARD_INIT();
   \   00000C   53BEFB       ANL     0xbe,#0xfb
   \                     ??halAssertHazardLights_0:
   \   00000F   E59D         MOV     A,0x9d
   \   000011   A2E6         MOV     C,0xE0 /* A   */.6
   \   000013   50FA         JNC     ??halAssertHazardLights_0
   \   000015   00           NOP
   \   000016   78F8         MOV     R0,#-0x8
   \   000018   7901         MOV     R1,#0x1
   \                     ??halAssertHazardLights_1:
   \   00001A   00           NOP
   \   00001B   E8           MOV     A,R0
   \   00001C   24FF         ADD     A,#-0x1
   \   00001E   18           DEC     R0
   \   00001F   E9           MOV     A,R1
   \   000020   34FF         ADDC    A,#-0x1
   \   000022   F9           MOV     R1,A
   \   000023   E8           MOV     A,R0
   \   000024   49           ORL     A,R1
   \   000025   70F3         JNZ     ??halAssertHazardLights_1
   \   000027   75C600       MOV     0xc6,#0x0
   \                     ??halAssertHazardLights_2:
   \   00002A   E59E         MOV     A,0x9e
   \   00002C   70FC         JNZ     ??halAssertHazardLights_2
   \   00002E   43BE04       ORL     0xbe,#0x4
   \   000031   906270       MOV     DPTR,#0x6270
   \   000034   7408         MOV     A,#0x8
   \   000036   F0           MOVX    @DPTR,A
   \   000037   C291         CLR     0x90.1
   \   000039   43FE02       ORL     0xfe,#0x2
   \   00003C   C292         CLR     0x90.2
   \   00003E   43FE04       ORL     0xfe,#0x4
   \   000041   D290         SETB    0x90.0
   \   000043   43FE01       ORL     0xfe,#0x1
   \   000046   C294         CLR     0x90.4
   \   000048   43FE10       ORL     0xfe,#0x10
   \   00004B   438F01       ORL     0x8f,#0x1
    130          
    131            HAL_TURN_OFF_LED1();
   \   00004E   C291         CLR     0x90.1
    132            HAL_TURN_OFF_LED2();
   \   000050   C292         CLR     0x90.2
    133            HAL_TURN_OFF_LED3();
   \   000052   D290         SETB    0x90.0
    134            HAL_TURN_OFF_LED4();
   \   000054   C294         CLR     0x90.4
   \   000056   8019         SJMP    ??halAssertHazardLights_3
    135          
    136            /*-------------------------------------------------------------------------------
    137             *  Master infinite loop.
    138             */
    139            for (;;)
    140            {
    141              buttonHeld = 0;
    142          
    143              /*-------------------------------------------------------------------------------
    144               *  "Hazard lights" loop.  A held keypress will exit this loop.
    145               */
    146              do
    147              {
    148                HAL_LED_BLINK_DELAY();
    149          
    150                /* toggle LEDS, the #ifdefs are in case HAL has logically remapped non-existent LEDs */
    151          #if (HAL_NUM_LEDS >= 1)
    152                HAL_TOGGLE_LED1();
    153          #if (HAL_NUM_LEDS >= 2)
    154                HAL_TOGGLE_LED2();
    155          #if (HAL_NUM_LEDS >= 3)
    156                HAL_TOGGLE_LED3();
    157          #if (HAL_NUM_LEDS >= 4)
    158                HAL_TOGGLE_LED4();
    159          #endif
    160          #endif
    161          #endif
    162          #endif
    163          
    164                /* escape hatch to continue execution, set escape to '1' to continue execution */
    165                {
    166                  static uint8 escape = 0;
    167                  if (escape)
    168                  {
    169                    escape = 0;
    170                    return;
    171                  }
    172                }
    173          
    174                /* break out of loop if button is held long enough */
    175                if (HAL_PUSH_BUTTON1())
    176                {
    177                  buttonHeld++;
    178                }
    179                else
    180                {
    181                  buttonHeld = 0;
    182                }
    183              }
    184              while (buttonHeld != 10);  /* loop until button is held specified number of loops */
    185          
    186              /*-------------------------------------------------------------------------------
    187               *  Just exited from "hazard lights" loop.
    188               */
    189          
    190              /* turn off all LEDs */
    191              HAL_TURN_OFF_LED1();
    192              HAL_TURN_OFF_LED2();
    193              HAL_TURN_OFF_LED3();
    194              HAL_TURN_OFF_LED4();
    195          
    196              /* wait for button release */
    197              HAL_DEBOUNCE(!HAL_PUSH_BUTTON1());
    198          
    199              /*-------------------------------------------------------------------------------
    200               *  Load debug data into memory.
    201               */
    202          #ifdef HAL_MCU_AVR
    203              {
    204                uint8 * pStack;
    205                pStack = (uint8 *) SP;
    206                pStack++; /* point to return address on stack */
    207                debugData[DEBUG_DATA_RSTACK_HIGH_OFS] = *pStack;
    208                pStack++;
    209                debugData[DEBUG_DATA_RSTACK_LOW_OFS] = *pStack;
    210              }
    211              debugData[DEBUG_DATA_INT_MASK_OFS] = EIMSK;
    212          #endif
    213          
    214          #if (defined HAL_MCU_CC2430)
    215              debugData[DEBUG_DATA_INT_MASK_OFS] = RFIM;
    216          #elif (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533)
    217              debugData[DEBUG_DATA_INT_MASK0_OFS] = RFIRQM0;
    218              debugData[DEBUG_DATA_INT_MASK1_OFS] = RFIRQM1;
    219          #endif
    220          
    221          
    222          #if (defined HAL_MCU_AVR) || (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || \
    223              (defined HAL_MCU_CC2533) || (defined HAL_MCU_MSP430)
    224              debugData[DEBUG_DATA_TX_ACTIVE_OFS] = macTxActive;
    225              debugData[DEBUG_DATA_RX_ACTIVE_OFS] = macRxActive;
    226          #endif
    227          
    228             /* initialize for data dump loop */
    229              {
    230                uint8 iBit;
    231                uint8 iByte;
    232          
    233                iBit  = 0;
    234                iByte = 0;
    235          
    236                /*-------------------------------------------------------------------------------
    237                 *  Data dump loop.  A button press cycles data bits to an LED.
    238                 */
    239                while (iByte < DEBUG_DATA_SIZE)
    240                {
    241                  /* wait for key press */
    242                  while(!HAL_PUSH_BUTTON1());
    243          
    244                  /* turn on all LEDs for first bit of byte, turn on three LEDs if not first bit */
    245                  HAL_TURN_ON_LED1();
    246                  HAL_TURN_ON_LED2();
    247                  HAL_TURN_ON_LED3();
    248                  if (iBit == 0)
    249                  {
    250                    HAL_TURN_ON_LED4();
    251                  }
    252                  else
    253                  {
    254                    HAL_TURN_OFF_LED4();
    255                  }
    256          
    257                  /* wait for debounced key release */
    258                  HAL_DEBOUNCE(!HAL_PUSH_BUTTON1());
    259          
    260                  /* turn off all LEDs */
    261                  HAL_TURN_OFF_LED1();
    262                  HAL_TURN_OFF_LED2();
    263                  HAL_TURN_OFF_LED3();
    264                  HAL_TURN_OFF_LED4();
    265          
    266                  /* output value of data bit to LED1 */
    267                  if (debugData[iByte] & (1 << (7 - iBit)))
    268                  {
    269                    HAL_TURN_ON_LED1();
    270                  }
    271                  else
    272                  {
    273                    HAL_TURN_OFF_LED1();
   \                     ??halAssertHazardLights_4:
   \   000058   C291         CLR     0x90.1
    274                  }
    275          
    276                  /* advance to next bit */
    277                  iBit++;
   \                     ??halAssertHazardLights_5:
   \   00005A   0A           INC     R2
    278                  if (iBit == 8)
   \   00005B   7408         MOV     A,#0x8
   \   00005D   6A           XRL     A,R2
   \   00005E   6003         JZ      $+5
   \   000060   02....       LJMP    ??halAssertHazardLights_6 & 0xFFFF
    279                  {
    280                    iBit = 0;
   \   000063   7A00         MOV     R2,#0x0
    281                    iByte++;
   \   000065   0B           INC     R3
    282                  }
   \   000066   EB           MOV     A,R3
   \   000067   C3           CLR     C
   \   000068   9406         SUBB    A,#0x6
   \   00006A   5003         JNC     $+5
   \   00006C   02....       LJMP    ??halAssertHazardLights_6 & 0xFFFF
    283                }
    284              }
    285          
    286              /*
    287               *  About to enter "hazard lights" loop again.  Turn off LED1 in case the last bit
    288               *  displayed happened to be one.  This guarantees all LEDs are off at the start of
    289               *  the flashing loop which uses a toggle operation to change LED states.
    290               */
    291              HAL_TURN_OFF_LED1();
   \   00006F   C291         CLR     0x90.1
   \                     ??halAssertHazardLights_3:
   \   000071   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_7:
   \   000073   7406         MOV     A,#0x6
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   E4           CLR     A
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   A3           INC     DPTR
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   8012         SJMP    ??halAssertHazardLights_8
   \                     ??halAssertHazardLights_9:
   \   000082   90....       MOV     DPTR,#__Constant_1
   \   000085   78..         MOV     R0,#?V0
   \   000087   12....       LCALL   ?L_MOV_X
   \   00008A   7406         MOV     A,#0x6
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   78..         MOV     R0,#?V0
   \   000091   12....       LCALL   ?L_ADD_TO_X
   \                     ??halAssertHazardLights_8:
   \   000094   90....       MOV     DPTR,#__Constant_5800
   \   000097   78..         MOV     R0,#?V0
   \   000099   12....       LCALL   ?L_MOV_X
   \   00009C   7406         MOV     A,#0x6
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   78..         MOV     R0,#?V0
   \   0000A3   12....       LCALL   ?UL_GT_X
   \   0000A6   40DA         JC      ??halAssertHazardLights_9
   \   0000A8   A291         MOV     C,0x90.1
   \   0000AA   5004         JNC     ??halAssertHazardLights_10
   \   0000AC   C291         CLR     0x90.1
   \   0000AE   8002         SJMP    ??halAssertHazardLights_11
   \                     ??halAssertHazardLights_10:
   \   0000B0   D291         SETB    0x90.1
   \                     ??halAssertHazardLights_11:
   \   0000B2   A292         MOV     C,0x90.2
   \   0000B4   5004         JNC     ??halAssertHazardLights_12
   \   0000B6   C292         CLR     0x90.2
   \   0000B8   8002         SJMP    ??halAssertHazardLights_13
   \                     ??halAssertHazardLights_12:
   \   0000BA   D292         SETB    0x90.2
   \                     ??halAssertHazardLights_13:
   \   0000BC   A290         MOV     C,0x90.0
   \   0000BE   5004         JNC     ??halAssertHazardLights_14
   \   0000C0   C290         CLR     0x90.0
   \   0000C2   8002         SJMP    ??halAssertHazardLights_15
   \                     ??halAssertHazardLights_14:
   \   0000C4   D290         SETB    0x90.0
   \                     ??halAssertHazardLights_15:
   \   0000C6   A294         MOV     C,0x90.4
   \   0000C8   5004         JNC     ??halAssertHazardLights_16
   \   0000CA   C294         CLR     0x90.4
   \   0000CC   8002         SJMP    ??halAssertHazardLights_17
   \                     ??halAssertHazardLights_16:
   \   0000CE   D294         SETB    0x90.4
   \                     ??halAssertHazardLights_17:
   \   0000D0   90....       MOV     DPTR,#??escape
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   600C         JZ      ??halAssertHazardLights_18
   \   0000D6   E4           CLR     A
   \   0000D7   F0           MOVX    @DPTR,A
   \   0000D8   740A         MOV     A,#0xa
   \   0000DA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DD   7F04         MOV     R7,#0x4
   \   0000DF   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??halAssertHazardLights_18:
   \   0000E2   A281         MOV     C,0x80.1
   \   0000E4   508B         JNC     ??halAssertHazardLights_3
   \   0000E6   09           INC     R1
   \   0000E7   740A         MOV     A,#0xa
   \   0000E9   69           XRL     A,R1
   \   0000EA   7087         JNZ     ??halAssertHazardLights_7
   \   0000EC   C291         CLR     0x90.1
   \   0000EE   C292         CLR     0x90.2
   \   0000F0   D290         SETB    0x90.0
   \   0000F2   C294         CLR     0x90.4
   \   0000F4   7800         MOV     R0,#0x0
   \   0000F6   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_19:
   \   0000F8   A281         MOV     C,0x80.1
   \   0000FA   5004         JNC     ??halAssertHazardLights_20
   \   0000FC   7800         MOV     R0,#0x0
   \   0000FE   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_20:
   \   000100   08           INC     R0
   \   000101   E8           MOV     A,R0
   \   000102   7001         JNZ     ??halAssertHazardLights_21
   \   000104   09           INC     R1
   \                     ??halAssertHazardLights_21:
   \   000105   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000108   40EE         JC      ??halAssertHazardLights_19
   \   00010A   9061A3       MOV     DPTR,#0x61a3
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   C0E0         PUSH    A
   \   000110   7404         MOV     A,#0x4
   \   000112   12....       LCALL   ?XSTACK_DISP0_8
   \   000115   D0E0         POP     A
   \   000117   F0           MOVX    @DPTR,A
   \   000118   9061A4       MOV     DPTR,#0x61a4
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   C0E0         PUSH    A
   \   00011E   7405         MOV     A,#0x5
   \   000120   12....       LCALL   ?XSTACK_DISP0_8
   \   000123   D0E0         POP     A
   \   000125   F0           MOVX    @DPTR,A
   \   000126   90....       MOV     DPTR,#macTxActive
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   C0E0         PUSH    A
   \   00012C   7402         MOV     A,#0x2
   \   00012E   12....       LCALL   ?XSTACK_DISP0_8
   \   000131   D0E0         POP     A
   \   000133   F0           MOVX    @DPTR,A
   \   000134   90....       MOV     DPTR,#macRxActive
   \   000137   E0           MOVX    A,@DPTR
   \   000138   C0E0         PUSH    A
   \   00013A   7403         MOV     A,#0x3
   \   00013C   12....       LCALL   ?XSTACK_DISP0_8
   \   00013F   D0E0         POP     A
   \   000141   F0           MOVX    @DPTR,A
   \   000142   7A00         MOV     R2,#0x0
   \   000144   7B00         MOV     R3,#0x0
   \                     ??halAssertHazardLights_6:
   \   000146   A281         MOV     C,0x80.1
   \   000148   50FC         JNC     ??halAssertHazardLights_6
   \   00014A   D291         SETB    0x90.1
   \   00014C   D292         SETB    0x90.2
   \   00014E   C290         CLR     0x90.0
   \   000150   EA           MOV     A,R2
   \   000151   7004         JNZ     ??halAssertHazardLights_22
   \   000153   D294         SETB    0x90.4
   \   000155   8002         SJMP    ??halAssertHazardLights_23
   \                     ??halAssertHazardLights_22:
   \   000157   C294         CLR     0x90.4
   \                     ??halAssertHazardLights_23:
   \   000159   7800         MOV     R0,#0x0
   \   00015B   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_24:
   \   00015D   A281         MOV     C,0x80.1
   \   00015F   5004         JNC     ??halAssertHazardLights_25
   \   000161   7800         MOV     R0,#0x0
   \   000163   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_25:
   \   000165   08           INC     R0
   \   000166   E8           MOV     A,R0
   \   000167   7001         JNZ     ??halAssertHazardLights_26
   \   000169   09           INC     R1
   \                     ??halAssertHazardLights_26:
   \   00016A   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00016D   40EE         JC      ??halAssertHazardLights_24
   \   00016F   C291         CLR     0x90.1
   \   000171   C292         CLR     0x90.2
   \   000173   D290         SETB    0x90.0
   \   000175   C294         CLR     0x90.4
   \   000177   75..01       MOV     ?V0,#0x1
   \   00017A   75..00       MOV     ?V1,#0x0
   \   00017D   7407         MOV     A,#0x7
   \   00017F   C3           CLR     C
   \   000180   9A           SUBB    A,R2
   \   000181   78..         MOV     R0,#?V0
   \   000183   12....       LCALL   ?S_SHL
   \   000186   EB           MOV     A,R3
   \   000187   F8           MOV     R0,A
   \   000188   85..82       MOV     DPL,?XSP + 0
   \   00018B   85..83       MOV     DPH,?XSP + 1
   \   00018E   E582         MOV     A,DPL
   \   000190   28           ADD     A,R0
   \   000191   F582         MOV     DPL,A
   \   000193   E4           CLR     A
   \   000194   3583         ADDC    A,DPH
   \   000196   F583         MOV     DPH,A
   \   000198   E0           MOVX    A,@DPTR
   \   000199   55..         ANL     A,?V0
   \   00019B   7003         JNZ     $+5
   \   00019D   02....       LJMP    ??halAssertHazardLights_4 & 0xFFFF
   \   0001A0   D291         SETB    0x90.1
   \   0001A2   02....       LJMP    ??halAssertHazardLights_5 & 0xFFFF
   \   0001A5                REQUIRE _A_IEN0
   \   0001A5                REQUIRE SLEEPCMD
   \   0001A5                REQUIRE SLEEPSTA
   \   0001A5                REQUIRE CLKCONCMD
   \   0001A5                REQUIRE CLKCONSTA
   \   0001A5                REQUIRE _A_P1
   \   0001A5                REQUIRE P1DIR
   \   0001A5                REQUIRE P0INP
   \   0001A5                REQUIRE _A_P0
    292            }
    293          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   C3           CLR     C
   \   000001   94F4         SUBB    A,#-0xc
   \   000003   E9           MOV     A,R1
   \   000004   9401         SUBB    A,#0x1
   \   000006   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000008   65D0         XRL     A,PSW
   \   00000A   33           RLC     A
   \   00000B   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??escape:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_5800:
   \   000000   00580000     DD 22528

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halAssertHandler::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halAssertHandler

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halAssertHazardLights::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halAssertHazardLights
    294          #endif
    295          
    296          /* ------------------------------------------------------------------------------------------------
    297           *                                    Compile Time Assertions
    298           * ------------------------------------------------------------------------------------------------
    299           */
    300          
    301          /* integrity check of type sizes */
    302          HAL_ASSERT_SIZE(  int8, 1);
    303          HAL_ASSERT_SIZE( uint8, 1);
    304          HAL_ASSERT_SIZE( int16, 2);
    305          HAL_ASSERT_SIZE(uint16, 2);
    306          HAL_ASSERT_SIZE( int32, 4);
    307          HAL_ASSERT_SIZE(uint32, 4);
    308          
    309          
    310          /**************************************************************************************************
    311          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   halAssertHandler
      1     22   halAssertHazardLights


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?Subroutine0
       1  CLKCONCMD
       1  CLKCONSTA
       1  P0INP
       1  P1DIR
       1  SLEEPCMD
       1  SLEEPSTA
       1  _A_IEN0
       1  _A_P0
       1  _A_P1
       4  __Constant_1
       4  __Constant_5800
       1  escape
       3  halAssertHandler
       6  halAssertHandler::?relay
     421  halAssertHazardLights
       6  halAssertHazardLights::?relay

 
 436 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
   9 bytes in segment SFR_AN
   8 bytes in segment XDATA_ROM_C
   1 byte  in segment XDATA_Z
 
  12 bytes of CODE     memory
   0 bytes of CONST    memory (+ 8 bytes shared)
   0 bytes of DATA     memory (+ 9 bytes shared)
 436 bytes of HUGECODE memory
   1 byte  of XDATA    memory

Errors: none
Warnings: none
