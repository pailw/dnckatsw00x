###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                16/Jan/2019  20:42:03
# Copyright 2004-2016 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\ZMain\TI2530DB\ZMain.c
#    Command line       =  
#        -f
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\ZMain\TI2530DB\ZMain.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D
#        POWER_SAVING -D NWK_AUTO_POLL -D xHOLD_AUTO_START -D xZTOOL_P1 -D
#        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_REPORT -D xZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D
#        xZCL_DIAGNOSTIC -D xFEATURE_SYSTEM_STATS -lC
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\EndDeviceEB\List
#        -lA
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\Source\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\Source\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\ZMain\TI2530DB\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\hal\include\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\hal\target\CC2530LOWPWR\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\mac\include\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\mac\high_level\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\mt\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\osal\include\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\services\saddr\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\services\sdata\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\af\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\nwk\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\sapi\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\sec\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\sys\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\zcl\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\zdo\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\zmac\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\EndDeviceEB\List\ZMain.lst
#    Object file        =  
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\EndDeviceEB\Obj\ZMain.r51
#
###############################################################################

Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\ZMain\TI2530DB\ZMain.c
      1          /**************************************************************************************************
      2            Filename:       ZMain.c
      3            Revised:        $Date: 2010-09-17 16:25:30 -0700 (Fri, 17 Sep 2010) $
      4            Revision:       $Revision: 23835 $
      5          
      6            Description:    Startup and shutdown code for ZStack
      7            Notes:          This version targets the Chipcon CC2530
      8          
      9          
     10            Copyright 2005-2010 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #ifndef NONWK
     46          #include "AF.h"
     47          #endif
     48          #include "hal_adc.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     49          #include "hal_flash.h"
     50          #include "hal_lcd.h"
     51          #include "hal_led.h"
     52          #include "hal_drivers.h"
     53          #include "OnBoard.h"
     54          #include "OSAL.h"
     55          #include "OSAL_Nv.h"
     56          #include "ZComDef.h"
     57          #include "ZMAC.h"
     58          
     59          /*********************************************************************
     60           * LOCAL FUNCTIONS
     61           */
     62          
     63          static void zmain_ext_addr( void );
     64          #if defined ZCL_KEY_ESTABLISH
     65          static void zmain_cert_init( void );
     66          #endif
     67          static void zmain_dev_info( void );
     68          static void zmain_vdd_check( void );
     69          
     70          #ifdef LCD_SUPPORTED
     71          static void zmain_lcd_init( void );
     72          #endif
     73          
     74          /*********************************************************************
     75           * @fn      main
     76           * @brief   First function called after startup.
     77           * @return  don't care
     78           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     79          int main( void )
   \                     main:
     80          {
   \   000000                ; Auto size: 0
     81            // Turn off interrupts
     82            osal_int_disable( INTS_ALL );
   \   000000                ; Setup parameters for call to function osal_int_disable
   \   000000   79FF         MOV     R1,#-0x1
   \   000002   12....       LCALL   `??osal_int_disable::?relay`; Banked call to: osal_int_disable
     83          
     84            // Initialization for board related stuff such as LEDs
     85            HAL_BOARD_INIT();
   \   000005   53BEFB       ANL     0xbe,#0xfb
   \                     ??main_0:
   \   000008   E59D         MOV     A,0x9d
   \   00000A   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000C   50FA         JNC     ??main_0
   \   00000E   00           NOP
   \   00000F   78F8         MOV     R0,#-0x8
   \   000011   7901         MOV     R1,#0x1
   \                     ??main_1:
   \   000013   00           NOP
   \   000014   E8           MOV     A,R0
   \   000015   24FF         ADD     A,#-0x1
   \   000017   18           DEC     R0
   \   000018   E9           MOV     A,R1
   \   000019   34FF         ADDC    A,#-0x1
   \   00001B   F9           MOV     R1,A
   \   00001C   E8           MOV     A,R0
   \   00001D   49           ORL     A,R1
   \   00001E   70F3         JNZ     ??main_1
   \   000020   75C600       MOV     0xc6,#0x0
   \                     ??main_2:
   \   000023   E59E         MOV     A,0x9e
   \   000025   70FC         JNZ     ??main_2
   \   000027   43BE04       ORL     0xbe,#0x4
   \   00002A   906270       MOV     DPTR,#0x6270
   \   00002D   7408         MOV     A,#0x8
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   C292         CLR     0x90.2
   \   000032   43FE04       ORL     0xfe,#0x4
   \   000035   C291         CLR     0x90.1
   \   000037   43FE02       ORL     0xfe,#0x2
   \   00003A   D290         SETB    0x90.0
   \   00003C   43FE01       ORL     0xfe,#0x1
   \   00003F   C294         CLR     0x90.4
   \   000041   43FE10       ORL     0xfe,#0x10
   \   000044   D294         SETB    0x90.4
   \   000046   C291         CLR     0x90.1
   \   000048   7A14         MOV     R2,#0x14
   \   00004A   7B00         MOV     R3,#0x0
   \                     ??main_3:
   \   00004C   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00004F   601A         JZ      ??main_4
   \   000051   78E8         MOV     R0,#-0x18
   \   000053   7903         MOV     R1,#0x3
   \                     ??main_5:
   \   000055   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000058   60F2         JZ      ??main_3
   \   00005A   00           NOP
   \   00005B   00           NOP
   \   00005C   00           NOP
   \   00005D   00           NOP
   \   00005E   00           NOP
   \   00005F   00           NOP
   \   000060   00           NOP
   \   000061   00           NOP
   \   000062   00           NOP
   \   000063   00           NOP
   \   000064   00           NOP
   \   000065   00           NOP
   \   000066   00           NOP
   \   000067   00           NOP
   \   000068   00           NOP
   \   000069   80EA         SJMP    ??main_5
   \                     ??main_4:
   \   00006B   C294         CLR     0x90.4
   \   00006D   7AE8         MOV     R2,#-0x18
   \   00006F   7B03         MOV     R3,#0x3
   \                     ??main_6:
   \   000071   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000074   601A         JZ      ??main_7
   \   000076   78E8         MOV     R0,#-0x18
   \   000078   7903         MOV     R1,#0x3
   \                     ??main_8:
   \   00007A   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00007D   60F2         JZ      ??main_6
   \   00007F   00           NOP
   \   000080   00           NOP
   \   000081   00           NOP
   \   000082   00           NOP
   \   000083   00           NOP
   \   000084   00           NOP
   \   000085   00           NOP
   \   000086   00           NOP
   \   000087   00           NOP
   \   000088   00           NOP
   \   000089   00           NOP
   \   00008A   00           NOP
   \   00008B   00           NOP
   \   00008C   00           NOP
   \   00008D   00           NOP
   \   00008E   80EA         SJMP    ??main_8
   \                     ??main_7:
   \   000090   D294         SETB    0x90.4
   \   000092   7A14         MOV     R2,#0x14
   \   000094   7B00         MOV     R3,#0x0
   \                     ??main_9:
   \   000096   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000099   601A         JZ      ??main_10
   \   00009B   78E8         MOV     R0,#-0x18
   \   00009D   7903         MOV     R1,#0x3
   \                     ??main_11:
   \   00009F   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000A2   60F2         JZ      ??main_9
   \   0000A4   00           NOP
   \   0000A5   00           NOP
   \   0000A6   00           NOP
   \   0000A7   00           NOP
   \   0000A8   00           NOP
   \   0000A9   00           NOP
   \   0000AA   00           NOP
   \   0000AB   00           NOP
   \   0000AC   00           NOP
   \   0000AD   00           NOP
   \   0000AE   00           NOP
   \   0000AF   00           NOP
   \   0000B0   00           NOP
   \   0000B1   00           NOP
   \   0000B2   00           NOP
   \   0000B3   80EA         SJMP    ??main_11
   \                     ??main_10:
   \   0000B5   C294         CLR     0x90.4
   \   0000B7   7AE8         MOV     R2,#-0x18
   \   0000B9   7B03         MOV     R3,#0x3
   \                     ??main_12:
   \   0000BB   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000BE   601A         JZ      ??main_13
   \   0000C0   78E8         MOV     R0,#-0x18
   \   0000C2   7903         MOV     R1,#0x3
   \                     ??main_14:
   \   0000C4   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000C7   60F2         JZ      ??main_12
   \   0000C9   00           NOP
   \   0000CA   00           NOP
   \   0000CB   00           NOP
   \   0000CC   00           NOP
   \   0000CD   00           NOP
   \   0000CE   00           NOP
   \   0000CF   00           NOP
   \   0000D0   00           NOP
   \   0000D1   00           NOP
   \   0000D2   00           NOP
   \   0000D3   00           NOP
   \   0000D4   00           NOP
   \   0000D5   00           NOP
   \   0000D6   00           NOP
   \   0000D7   00           NOP
   \   0000D8   80EA         SJMP    ??main_14
   \                     ??main_13:
   \   0000DA   D294         SETB    0x90.4
   \   0000DC   7A14         MOV     R2,#0x14
   \   0000DE   7B00         MOV     R3,#0x0
   \                     ??main_15:
   \   0000E0   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000E3   601A         JZ      ??main_16
   \   0000E5   78E8         MOV     R0,#-0x18
   \   0000E7   7903         MOV     R1,#0x3
   \                     ??main_17:
   \   0000E9   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000EC   60F2         JZ      ??main_15
   \   0000EE   00           NOP
   \   0000EF   00           NOP
   \   0000F0   00           NOP
   \   0000F1   00           NOP
   \   0000F2   00           NOP
   \   0000F3   00           NOP
   \   0000F4   00           NOP
   \   0000F5   00           NOP
   \   0000F6   00           NOP
   \   0000F7   00           NOP
   \   0000F8   00           NOP
   \   0000F9   00           NOP
   \   0000FA   00           NOP
   \   0000FB   00           NOP
   \   0000FC   00           NOP
   \   0000FD   80EA         SJMP    ??main_17
   \                     ??main_16:
   \   0000FF   C294         CLR     0x90.4
   \   000101   7AE8         MOV     R2,#-0x18
   \   000103   7B03         MOV     R3,#0x3
   \                     ??main_18:
   \   000105   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000108   601A         JZ      ??main_19
   \   00010A   78E8         MOV     R0,#-0x18
   \   00010C   7903         MOV     R1,#0x3
   \                     ??main_20:
   \   00010E   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000111   60F2         JZ      ??main_18
   \   000113   00           NOP
   \   000114   00           NOP
   \   000115   00           NOP
   \   000116   00           NOP
   \   000117   00           NOP
   \   000118   00           NOP
   \   000119   00           NOP
   \   00011A   00           NOP
   \   00011B   00           NOP
   \   00011C   00           NOP
   \   00011D   00           NOP
   \   00011E   00           NOP
   \   00011F   00           NOP
   \   000120   00           NOP
   \   000121   00           NOP
   \   000122   80EA         SJMP    ??main_20
   \                     ??main_19:
   \   000124   D291         SETB    0x90.1
   \   000126   7A14         MOV     R2,#0x14
   \   000128   7B00         MOV     R3,#0x0
   \                     ??main_21:
   \   00012A   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00012D   601A         JZ      ??main_22
   \   00012F   78E8         MOV     R0,#-0x18
   \   000131   7903         MOV     R1,#0x3
   \                     ??main_23:
   \   000133   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000136   60F2         JZ      ??main_21
   \   000138   00           NOP
   \   000139   00           NOP
   \   00013A   00           NOP
   \   00013B   00           NOP
   \   00013C   00           NOP
   \   00013D   00           NOP
   \   00013E   00           NOP
   \   00013F   00           NOP
   \   000140   00           NOP
   \   000141   00           NOP
   \   000142   00           NOP
   \   000143   00           NOP
   \   000144   00           NOP
   \   000145   00           NOP
   \   000146   00           NOP
   \   000147   80EA         SJMP    ??main_23
   \                     ??main_22:
   \   000149   C291         CLR     0x90.1
   \   00014B   7AE8         MOV     R2,#-0x18
   \   00014D   7B03         MOV     R3,#0x3
   \                     ??main_24:
   \   00014F   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000152   601A         JZ      ??main_25
   \   000154   78E8         MOV     R0,#-0x18
   \   000156   7903         MOV     R1,#0x3
   \                     ??main_26:
   \   000158   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00015B   60F2         JZ      ??main_24
   \   00015D   00           NOP
   \   00015E   00           NOP
   \   00015F   00           NOP
   \   000160   00           NOP
   \   000161   00           NOP
   \   000162   00           NOP
   \   000163   00           NOP
   \   000164   00           NOP
   \   000165   00           NOP
   \   000166   00           NOP
   \   000167   00           NOP
   \   000168   00           NOP
   \   000169   00           NOP
   \   00016A   00           NOP
   \   00016B   00           NOP
   \   00016C   80EA         SJMP    ??main_26
   \                     ??main_25:
   \   00016E   D291         SETB    0x90.1
   \   000170   7A14         MOV     R2,#0x14
   \   000172   7B00         MOV     R3,#0x0
   \                     ??main_27:
   \   000174   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000177   601A         JZ      ??main_28
   \   000179   78E8         MOV     R0,#-0x18
   \   00017B   7903         MOV     R1,#0x3
   \                     ??main_29:
   \   00017D   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000180   60F2         JZ      ??main_27
   \   000182   00           NOP
   \   000183   00           NOP
   \   000184   00           NOP
   \   000185   00           NOP
   \   000186   00           NOP
   \   000187   00           NOP
   \   000188   00           NOP
   \   000189   00           NOP
   \   00018A   00           NOP
   \   00018B   00           NOP
   \   00018C   00           NOP
   \   00018D   00           NOP
   \   00018E   00           NOP
   \   00018F   00           NOP
   \   000190   00           NOP
   \   000191   80EA         SJMP    ??main_29
   \                     ??main_28:
   \   000193   C291         CLR     0x90.1
   \   000195   7AE8         MOV     R2,#-0x18
   \   000197   7B03         MOV     R3,#0x3
   \                     ??main_30:
   \   000199   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00019C   601A         JZ      ??main_31
   \   00019E   78E8         MOV     R0,#-0x18
   \   0001A0   7903         MOV     R1,#0x3
   \                     ??main_32:
   \   0001A2   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0001A5   60F2         JZ      ??main_30
   \   0001A7   00           NOP
   \   0001A8   00           NOP
   \   0001A9   00           NOP
   \   0001AA   00           NOP
   \   0001AB   00           NOP
   \   0001AC   00           NOP
   \   0001AD   00           NOP
   \   0001AE   00           NOP
   \   0001AF   00           NOP
   \   0001B0   00           NOP
   \   0001B1   00           NOP
   \   0001B2   00           NOP
   \   0001B3   00           NOP
   \   0001B4   00           NOP
   \   0001B5   00           NOP
   \   0001B6   80EA         SJMP    ??main_32
   \                     ??main_31:
   \   0001B8   D291         SETB    0x90.1
   \   0001BA   7A14         MOV     R2,#0x14
   \   0001BC   7B00         MOV     R3,#0x0
   \                     ??main_33:
   \   0001BE   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0001C1   601A         JZ      ??main_34
   \   0001C3   78E8         MOV     R0,#-0x18
   \   0001C5   7903         MOV     R1,#0x3
   \                     ??main_35:
   \   0001C7   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0001CA   60F2         JZ      ??main_33
   \   0001CC   00           NOP
   \   0001CD   00           NOP
   \   0001CE   00           NOP
   \   0001CF   00           NOP
   \   0001D0   00           NOP
   \   0001D1   00           NOP
   \   0001D2   00           NOP
   \   0001D3   00           NOP
   \   0001D4   00           NOP
   \   0001D5   00           NOP
   \   0001D6   00           NOP
   \   0001D7   00           NOP
   \   0001D8   00           NOP
   \   0001D9   00           NOP
   \   0001DA   00           NOP
   \   0001DB   80EA         SJMP    ??main_35
   \                     ??main_34:
   \   0001DD   C291         CLR     0x90.1
   \   0001DF   7AE8         MOV     R2,#-0x18
   \   0001E1   7B03         MOV     R3,#0x3
   \                     ??main_36:
   \   0001E3   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0001E6   601A         JZ      ??main_37
   \   0001E8   78E8         MOV     R0,#-0x18
   \   0001EA   7903         MOV     R1,#0x3
   \                     ??main_38:
   \   0001EC   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0001EF   60F2         JZ      ??main_36
   \   0001F1   00           NOP
   \   0001F2   00           NOP
   \   0001F3   00           NOP
   \   0001F4   00           NOP
   \   0001F5   00           NOP
   \   0001F6   00           NOP
   \   0001F7   00           NOP
   \   0001F8   00           NOP
   \   0001F9   00           NOP
   \   0001FA   00           NOP
   \   0001FB   00           NOP
   \   0001FC   00           NOP
   \   0001FD   00           NOP
   \   0001FE   00           NOP
   \   0001FF   00           NOP
   \   000200   80EA         SJMP    ??main_38
     86          
     87            // Make sure supply voltage is high enough to run
     88            zmain_vdd_check();
   \                     ??main_37:
   \   000202   7E10         MOV     R6,#0x10
   \                     ??main_39:
   \   000204                ; Setup parameters for call to function HalAdcCheckVdd
   \   000204   794A         MOV     R1,#0x4a
   \   000206   12....       LCALL   `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000209   E9           MOV     A,R1
   \   00020A   60F8         JZ      ??main_39
   \   00020C   1E           DEC     R6
   \   00020D   EE           MOV     A,R6
   \   00020E   70F4         JNZ     ??main_39
     89          
     90            // Initialize board I/O
     91            InitBoard( OB_COLD );
   \   000210                ; Setup parameters for call to function InitBoard
   \   000210   7900         MOV     R1,#0x0
   \   000212   12....       LCALL   `??InitBoard::?relay`; Banked call to: InitBoard
     92          
     93            // Initialze HAL drivers
     94            HalDriverInit();
   \   000215                ; Setup parameters for call to function HalDriverInit
   \   000215   12....       LCALL   `??HalDriverInit::?relay`; Banked call to: HalDriverInit
     95          
     96            // Initialize NV System
     97            osal_nv_init( NULL );
   \   000218                ; Setup parameters for call to function osal_nv_init
   \   000218   7A00         MOV     R2,#0x0
   \   00021A   7B00         MOV     R3,#0x0
   \   00021C   12....       LCALL   `??osal_nv_init::?relay`; Banked call to: osal_nv_init
     98          
     99            // Initialize the MAC
    100            ZMacInit();
   \   00021F                ; Setup parameters for call to function ZMacInit
   \   00021F   12....       LCALL   `??ZMacInit::?relay` ; Banked call to: ZMacInit
    101          
    102            // Determine the extended address
    103            zmain_ext_addr();
   \   000222                ; Setup parameters for call to function zmain_ext_addr
   \   000222   12....       LCALL   `??zmain_ext_addr::?relay`; Banked call to: zmain_ext_addr
    104          
    105          #if defined ZCL_KEY_ESTABLISH
    106            // Initialize the Certicom certificate information.
    107            zmain_cert_init();
    108          #endif
    109          
    110            // Initialize basic NV items
    111            zgInit();
   \   000225                ; Setup parameters for call to function zgInit
   \   000225   12....       LCALL   `??zgInit::?relay`   ; Banked call to: zgInit
    112          
    113          #ifndef NONWK
    114            // Since the AF isn't a task, call it's initialization routine
    115            afInit();
    116          #endif
    117          
    118            // Initialize the operating system
    119            osal_init_system();
   \   000228                ; Setup parameters for call to function osal_init_system
   \   000228   12....       LCALL   `??osal_init_system::?relay`; Banked call to: osal_init_system
    120          
    121            // Allow interrupts
    122            osal_int_enable( INTS_ALL );
   \   00022B                ; Setup parameters for call to function osal_int_enable
   \   00022B   79FF         MOV     R1,#-0x1
   \   00022D   12....       LCALL   `??osal_int_enable::?relay`; Banked call to: osal_int_enable
    123          
    124            // Final board initialization
    125            InitBoard( OB_READY );
   \   000230                ; Setup parameters for call to function InitBoard
   \   000230   7902         MOV     R1,#0x2
   \   000232   12....       LCALL   `??InitBoard::?relay`; Banked call to: InitBoard
    126          
    127            // Display information about this device
    128            zmain_dev_info();
    129          
    130            /* Display the device info on the LCD */
    131          #ifdef LCD_SUPPORTED
    132            zmain_lcd_init();
    133          #endif
    134          
    135          #ifdef WDT_IN_PM1
    136            /* If WDT is used, this is a good place to enable it. */
    137            WatchDogEnable( WDTIMX );
    138          #endif
    139          
    140            osal_start_system(); // No Return from here
   \   000235                ; Setup parameters for call to function osal_start_system
   \   000235   12....       LCALL   `??osal_start_system::?relay`; Banked call to: osal_start_system
    141          
    142            return 0;  // Shouldn't get here.
   \   000238   7A00         MOV     R2,#0x0
   \   00023A   7B00         MOV     R3,#0x0
   \   00023C   02....       LJMP    ?BRET
   \   00023F                REQUIRE SLEEPCMD
   \   00023F                REQUIRE SLEEPSTA
   \   00023F                REQUIRE CLKCONCMD
   \   00023F                REQUIRE CLKCONSTA
   \   00023F                REQUIRE _A_P1
   \   00023F                REQUIRE P1DIR
    143          } // main()

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   EA           MOV     A,R2
   \   000001   F8           MOV     R0,A
   \   000002   EB           MOV     A,R3
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   24FF         ADD     A,#-0x1
   \   000007   1A           DEC     R2
   \   000008   E9           MOV     A,R1
   \   000009   34FF         ADDC    A,#-0x1
   \   00000B   FB           MOV     R3,A
   \   00000C   E8           MOV     A,R0
   \   00000D   49           ORL     A,R1
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E8           MOV     A,R0
   \   000001   FC           MOV     R4,A
   \   000002   E9           MOV     A,R1
   \   000003   FD           MOV     R5,A
   \   000004   EC           MOV     A,R4
   \   000005   24FF         ADD     A,#-0x1
   \   000007   18           DEC     R0
   \   000008   ED           MOV     A,R5
   \   000009   34FF         ADDC    A,#-0x1
   \   00000B   F9           MOV     R1,A
   \   00000C   EC           MOV     A,R4
   \   00000D   4D           ORL     A,R5
   \   00000E   22           RET
    144          
    145          /*********************************************************************
    146           * @fn      zmain_vdd_check
    147           * @brief   Check if the Vdd is OK to run the processor.
    148           * @return  Return if Vdd is ok; otherwise, flash LED, then reset
    149           *********************************************************************/
    150          static void zmain_vdd_check( void )
    151          {
    152            uint8 cnt = 16;
    153            
    154            do {
    155              while (!HalAdcCheckVdd(VDD_MIN_RUN));
    156            } while (--cnt);
    157          }
    158          
    159          /**************************************************************************************************
    160           * @fn          zmain_ext_addr
    161           *
    162           * @brief       Execute a prioritized search for a valid extended address and write the results
    163           *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
    164           *
    165           * input parameters
    166           *
    167           * None.
    168           *
    169           * output parameters
    170           *
    171           * None.
    172           *
    173           * @return      None.
    174           **************************************************************************************************
    175           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    176          static void zmain_ext_addr(void)
   \                     zmain_ext_addr:
    177          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    178            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000A   90....       MOV     DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   00000D   AC..         MOV     R4,?XSP + 0
   \   00000F   AD..         MOV     R5,?XSP + 1
   \   000011   7408         MOV     A,#0x8
   \   000013   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    179            uint8 writeNV = TRUE;
    180          
    181            // First check whether a non-erased extended address exists in the OSAL NV.
    182            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL))  ||
    183                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    184                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
   \   000016   75....       MOV     ?V0,#aExtendedAddress & 0xff
   \   000019   75....       MOV     ?V1,#(aExtendedAddress >> 8) & 0xff
   \   00001C   F5..         MOV     ?V2,A
   \   00001E   A8..         MOV     R0,?XSP + 0
   \   000020   A9..         MOV     R1,?XSP + 1
   \   000022   88..         MOV     ?V4,R0
   \   000024   89..         MOV     ?V5,R1
   \   000026   F5..         MOV     ?V6,A
   \   000028                ; Setup parameters for call to function osal_nv_item_init
   \   000028   F5..         MOV     ?V8,A
   \   00002A   F5..         MOV     ?V9,A
   \   00002C   78..         MOV     R0,#?V8
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   7C08         MOV     R4,#0x8
   \   000033   7D00         MOV     R5,#0x0
   \   000035   7A01         MOV     R2,#0x1
   \   000037   7B00         MOV     R3,#0x0
   \   000039   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00003C   7402         MOV     A,#0x2
   \   00003E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000041   E9           MOV     A,R1
   \   000042   7046         JNZ     ??zmain_ext_addr_0
   \   000044                ; Setup parameters for call to function osal_nv_read
   \   000044   75....       MOV     ?V8,#aExtendedAddress & 0xff
   \   000047   75....       MOV     ?V9,#(aExtendedAddress >> 8) & 0xff
   \   00004A   78..         MOV     R0,#?V8
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   75..08       MOV     ?V8,#0x8
   \   000052   75..00       MOV     ?V9,#0x0
   \   000055   78..         MOV     R0,#?V8
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   7C00         MOV     R4,#0x0
   \   00005C   7D00         MOV     R5,#0x0
   \   00005E   7A01         MOV     R2,#0x1
   \   000060   7B00         MOV     R3,#0x0
   \   000062   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000065   7404         MOV     A,#0x4
   \   000067   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006A   E9           MOV     A,R1
   \   00006B   701D         JNZ     ??zmain_ext_addr_0
   \   00006D                ; Setup parameters for call to function osal_memcmp
   \   00006D   78..         MOV     R0,#?V4
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000072   7C08         MOV     R4,#0x8
   \   000074   7D00         MOV     R5,#0x0
   \   000076   A9..         MOV     R1,?V0
   \   000078   AA..         MOV     R2,?V1
   \   00007A   AB..         MOV     R3,?V2
   \   00007C   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00007F   7403         MOV     A,#0x3
   \   000081   12....       LCALL   ?DEALLOC_XSTACK8
   \   000084   E9           MOV     A,R1
   \   000085   7003         JNZ     $+5
   \   000087   02....       LJMP    ??zmain_ext_addr_1 & 0xFFFF
    185            {
    186              // Attempt to read the extended address from the location on the lock bits page
    187              // where the programming tools know to reserve it.
    188              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zmain_ext_addr_0:
   \   00008A                ; Setup parameters for call to function HalFlashRead
   \   00008A   75..08       MOV     ?V8,#0x8
   \   00008D   78..         MOV     R0,#?V8
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000092   7C..         MOV     R4,#aExtendedAddress & 0xff
   \   000094   7D..         MOV     R5,#(aExtendedAddress >> 8) & 0xff
   \   000096   7AE8         MOV     R2,#-0x18
   \   000098   7B07         MOV     R3,#0x7
   \   00009A   797F         MOV     R1,#0x7f
   \   00009C   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00009F   7402         MOV     A,#0x2
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
    189          
    190              if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
   \   0000A4                ; Setup parameters for call to function osal_memcmp
   \   0000A4   78..         MOV     R0,#?V4
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A9   7C08         MOV     R4,#0x8
   \   0000AB   7D00         MOV     R5,#0x0
   \   0000AD   A9..         MOV     R1,?V0
   \   0000AF   AA..         MOV     R2,?V1
   \   0000B1   AB..         MOV     R3,?V2
   \   0000B3   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000B6   7403         MOV     A,#0x3
   \   0000B8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BB   E9           MOV     A,R1
   \   0000BC   6035         JZ      ??zmain_ext_addr_2
    191              {
    192                // Attempt to read the extended address from the designated location in the Info Page.
    193                if (!osal_memcmp((uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
   \   0000BE                ; Setup parameters for call to function osal_memcmp
   \   0000BE   78..         MOV     R0,#?V4
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C3   7C08         MOV     R4,#0x8
   \   0000C5   7D00         MOV     R5,#0x0
   \   0000C7   790C         MOV     R1,#0xc
   \   0000C9   7A78         MOV     R2,#0x78
   \   0000CB   7B00         MOV     R3,#0x0
   \   0000CD   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000D0   7403         MOV     A,#0x3
   \   0000D2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D5   E9           MOV     A,R1
   \   0000D6   7054         JNZ     ??zmain_ext_addr_3
    194                {
    195                  osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
   \   0000D8                ; Setup parameters for call to function osal_memcpy
   \   0000D8   75..0C       MOV     ?V0,#0xc
   \   0000DB   75..78       MOV     ?V1,#0x78
   \   0000DE   78..         MOV     R0,#?V0
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E3   7C08         MOV     R4,#0x8
   \   0000E5   7D00         MOV     R5,#0x0
   \   0000E7   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   0000E9   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   0000EB   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000EE   7403         MOV     A,#0x3
   \   0000F0   12....       LCALL   ?DEALLOC_XSTACK8
    196                }
    197                else  // No valid extended address was found.
    198                {
    199                  uint8 idx;
    200                  
    201          #if !defined ( NV_RESTORE )
    202                  writeNV = FALSE;  // Make this a temporary IEEE address
    203          #endif
    204          
    205                  /* Attempt to create a sufficiently random extended address for expediency.
    206                   * Note: this is only valid/legal in a test environment and
    207                   *       must never be used for a commercial product.
    208                   */
    209                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
    210                  {
    211                    uint16 randy = osal_rand();
    212                    aExtendedAddress[idx++] = LO_UINT16(randy);
    213                    aExtendedAddress[idx++] = HI_UINT16(randy);
    214                  }
    215                  // Next-to-MSB identifies ZigBee devicetype.
    216          #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
    217                  aExtendedAddress[idx++] = 0x10;
    218          #elif ZG_BUILD_RTRONLY_TYPE
    219                  aExtendedAddress[idx++] = 0x20;
    220          #else
    221                  aExtendedAddress[idx++] = 0x30;
    222          #endif
    223                  // MSB has historical signficance.
    224                  aExtendedAddress[idx] = 0xF8;
    225                }
    226              }
    227          
    228              if (writeNV)
    229              {
    230                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \                     ??zmain_ext_addr_2:
   \   0000F3                ; Setup parameters for call to function osal_nv_write
   \   0000F3   75....       MOV     ?V0,#aExtendedAddress & 0xff
   \   0000F6   75....       MOV     ?V1,#(aExtendedAddress >> 8) & 0xff
   \   0000F9   78..         MOV     R0,#?V0
   \   0000FB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FE   75..08       MOV     ?V0,#0x8
   \   000101   75..00       MOV     ?V1,#0x0
   \   000104   78..         MOV     R0,#?V0
   \   000106   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000109   7C00         MOV     R4,#0x0
   \   00010B   7D00         MOV     R5,#0x0
   \   00010D   7A01         MOV     R2,#0x1
   \   00010F   7B00         MOV     R3,#0x0
   \   000111   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000114   7404         MOV     A,#0x4
   \   000116   12....       LCALL   ?DEALLOC_XSTACK8
    231              }
    232            }
    233          
    234            // Set the MAC PIB extended address according to results from above.
    235            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1:
   \   000119                ; Setup parameters for call to function ZMacSetReq
   \   000119   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   00011B   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   00011D   79E2         MOV     R1,#-0x1e
   \   00011F   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    236          }
   \   000122   7408         MOV     A,#0x8
   \   000124   12....       LCALL   ?DEALLOC_XSTACK8
   \   000127   7F0A         MOV     R7,#0xa
   \   000129   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??zmain_ext_addr_3:
   \   00012C   7E00         MOV     R6,#0x0
   \                     ??zmain_ext_addr_4:
   \   00012E                ; Setup parameters for call to function osal_rand
   \   00012E   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000131   8A..         MOV     ?V0,R2
   \   000133   EE           MOV     A,R6
   \   000134   FA           MOV     R2,A
   \   000135   74..         MOV     A,#aExtendedAddress & 0xff
   \   000137   2A           ADD     A,R2
   \   000138   F582         MOV     DPL,A
   \   00013A   E4           CLR     A
   \   00013B   34..         ADDC    A,#(aExtendedAddress >> 8) & 0xff
   \   00013D   F583         MOV     DPH,A
   \   00013F   E5..         MOV     A,?V0
   \   000141   F0           MOVX    @DPTR,A
   \   000142   0E           INC     R6
   \   000143   EE           MOV     A,R6
   \   000144   F8           MOV     R0,A
   \   000145   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000148   EB           MOV     A,R3
   \   000149   F0           MOVX    @DPTR,A
   \   00014A   0E           INC     R6
   \   00014B   EE           MOV     A,R6
   \   00014C   C3           CLR     C
   \   00014D   9406         SUBB    A,#0x6
   \   00014F   40DD         JC      ??zmain_ext_addr_4
   \   000151   08           INC     R0
   \   000152   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000155   7430         MOV     A,#0x30
   \   000157   F0           MOVX    @DPTR,A
   \   000158   08           INC     R0
   \   000159   74..         MOV     A,#aExtendedAddress & 0xff
   \   00015B   28           ADD     A,R0
   \   00015C   F582         MOV     DPL,A
   \   00015E   E4           CLR     A
   \   00015F   34..         ADDC    A,#(aExtendedAddress >> 8) & 0xff
   \   000161   F583         MOV     DPH,A
   \   000163   74F8         MOV     A,#-0x8
   \   000165   F0           MOVX    @DPTR,A
   \   000166   80B1         SJMP    ??zmain_ext_addr_1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   74..         MOV     A,#aExtendedAddress & 0xff
   \   000002   2E           ADD     A,R6
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   34..         ADDC    A,#(aExtendedAddress >> 8) & 0xff
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??main::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    main

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zmain_ext_addr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_ext_addr

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
    237          
    238          #if defined ZCL_KEY_ESTABLISH
    239          /**************************************************************************************************
    240           * @fn          zmain_cert_init
    241           *
    242           * @brief       Initialize the Certicom certificate information.
    243           *
    244           * input parameters
    245           *
    246           * None.
    247           *
    248           * output parameters
    249           *
    250           * None.
    251           *
    252           * @return      None.
    253           **************************************************************************************************
    254           */
    255          static void zmain_cert_init(void)
    256          {
    257            uint8 certData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN];
    258            uint8 nullData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN] = {
    259              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    260              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    261              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    262              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    263              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    264              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    265            };
    266          
    267            (void)osal_nv_item_init(ZCD_NV_IMPLICIT_CERTIFICATE, ZCL_KE_IMPLICIT_CERTIFICATE_LEN, NULL);
    268            (void)osal_nv_item_init(ZCD_NV_DEVICE_PRIVATE_KEY, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, NULL);
    269          
    270            // First check whether non-null certificate data exists in the OSAL NV. To save on code space,
    271            // just use the ZCD_NV_CA_PUBLIC_KEY as the bellwether for all three.
    272            if ((SUCCESS != osal_nv_item_init(ZCD_NV_CA_PUBLIC_KEY, ZCL_KE_CA_PUBLIC_KEY_LEN, NULL))    ||
    273                (SUCCESS != osal_nv_read(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData))  ||
    274                (osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN)))
    275            {
    276              // Attempt to read the certificate data from its corresponding location on the lock bits page.
    277              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_CA_PUBLIC_KEY_OSET, certData,
    278                                                   ZCL_KE_CA_PUBLIC_KEY_LEN);
    279              // If the certificate data is not NULL, use it to update the corresponding NV items.
    280              if (!osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN))
    281              {
    282                (void)osal_nv_write(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData);
    283                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IMPLICIT_CERT_OSET, certData,
    284                                                     ZCL_KE_IMPLICIT_CERTIFICATE_LEN);
    285                (void)osal_nv_write(ZCD_NV_IMPLICIT_CERTIFICATE, 0,
    286                                    ZCL_KE_IMPLICIT_CERTIFICATE_LEN, certData);
    287                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_DEV_PRIVATE_KEY_OSET, certData,
    288                                                  ZCL_KE_DEVICE_PRIVATE_KEY_LEN);
    289                (void)osal_nv_write(ZCD_NV_DEVICE_PRIVATE_KEY, 0, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, certData);
    290              }
    291            }
    292          }
    293          #endif
    294          
    295          /**************************************************************************************************
    296           * @fn          zmain_dev_info
    297           *
    298           * @brief       This displays the IEEE (MSB to LSB) on the LCD.
    299           *
    300           * input parameters
    301           *
    302           * None.
    303           *
    304           * output parameters
    305           *
    306           * None.
    307           *
    308           * @return      None.
    309           **************************************************************************************************
    310           */
    311          static void zmain_dev_info(void)
    312          {
    313          #ifdef LCD_SUPPORTED
    314            uint8 i;
    315            uint8 *xad;
    316            uint8 lcd_buf[Z_EXTADDR_LEN*2+1];
    317          
    318            // Display the extended address.
    319            xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
    320          
    321            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
    322            {
    323              uint8 ch;
    324              ch = (*xad >> 4) & 0x0F;
    325              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    326              ch = *xad & 0x0F;
    327              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    328            }
    329            lcd_buf[Z_EXTADDR_LEN*2] = '\0';
    330            HalLcdWriteString( "IEEE: ", HAL_LCD_LINE_1 );
    331            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
    332          #endif
    333          }
    334          
    335          #ifdef LCD_SUPPORTED
    336          /*********************************************************************
    337           * @fn      zmain_lcd_init
    338           * @brief   Initialize LCD at start up.
    339           * @return  none
    340           *********************************************************************/
    341          static void zmain_lcd_init ( void )
    342          {
    343          #ifdef SERIAL_DEBUG_SUPPORTED
    344            {
    345              HalLcdWriteString( "TexasInstruments", HAL_LCD_LINE_1 );
    346          
    347          #if defined( MT_MAC_FUNC )
    348          #if defined( ZDO_COORDINATOR )
    349                HalLcdWriteString( "MAC-MT Coord", HAL_LCD_LINE_2 );
    350          #else
    351                HalLcdWriteString( "MAC-MT Device", HAL_LCD_LINE_2 );
    352          #endif // ZDO
    353          #elif defined( MT_NWK_FUNC )
    354          #if defined( ZDO_COORDINATOR )
    355                HalLcdWriteString( "NWK Coordinator", HAL_LCD_LINE_2 );
    356          #else
    357                HalLcdWriteString( "NWK Device", HAL_LCD_LINE_2 );
    358          #endif // ZDO
    359          #endif // MT_FUNC
    360            }
    361          #endif // SERIAL_DEBUG_SUPPORTED
    362          }
    363          #endif
    364          
    365          /*********************************************************************
    366          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   main
        0      0   -> HalAdcCheckVdd
        0      0   -> HalDriverInit
        0      0   -> InitBoard
        0      0   -> ZMacInit
        0      0   -> osal_init_system
        0      0   -> osal_int_disable
        0      0   -> osal_int_enable
        0      0   -> osal_nv_init
        0      0   -> osal_start_system
        0      0   -> zgInit
        0      0   -> zmain_ext_addr
      1     30   zmain_ext_addr
        0     28   -> HalFlashRead
        0     26   -> ZMacSetReq
        0     29   -> osal_memcmp
        0     29   -> osal_memcpy
        0     28   -> osal_nv_item_init
        0     30   -> osal_nv_read
        0     30   -> osal_nv_write
        0     26   -> osal_rand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      15  ?Subroutine0
      15  ?Subroutine1
      11  ?Subroutine2
       1  CLKCONCMD
       1  CLKCONSTA
       1  P1DIR
       1  SLEEPCMD
       1  SLEEPSTA
       1  _A_P1
     575  main
       6  main::?relay
     360  zmain_ext_addr
       6  zmain_ext_addr::?relay

 
 976 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
   6 bytes in segment SFR_AN
   8 bytes in segment XDATA_ROM_C
 
  12 bytes of CODE     memory
   8 bytes of CONST    memory
   0 bytes of DATA     memory (+ 6 bytes shared)
 976 bytes of HUGECODE memory

Errors: none
Warnings: none
