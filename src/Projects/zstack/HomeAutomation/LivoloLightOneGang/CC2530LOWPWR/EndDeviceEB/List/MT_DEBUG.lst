###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                16/Jan/2019  20:41:47
# Copyright 2004-2016 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        Z:\home\pail\git\dnckatsw00x\src\Components\mt\MT_DEBUG.c
#    Command line       =  
#        -f
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        Z:\home\pail\git\dnckatsw00x\src\Components\mt\MT_DEBUG.c -D SECURE=1
#        -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D POWER_SAVING -D
#        NWK_AUTO_POLL -D xHOLD_AUTO_START -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG
#        -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
#        xZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES
#        -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D xZCL_DIAGNOSTIC -D
#        xFEATURE_SYSTEM_STATS -lC
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\EndDeviceEB\List
#        -lA
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\Source\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\Source\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\ZMain\TI2530DB\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\hal\include\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\hal\target\CC2530LOWPWR\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\mac\include\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\mac\high_level\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\mt\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\osal\include\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\services\saddr\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\services\sdata\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\af\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\nwk\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\sapi\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\sec\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\sys\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\zcl\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\zdo\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\zmac\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\EndDeviceEB\List\MT_DEBUG.lst
#    Object file        =  
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\EndDeviceEB\Obj\MT_DEBUG.r51
#
###############################################################################

Z:\home\pail\git\dnckatsw00x\src\Components\mt\MT_DEBUG.c
      1          /***************************************************************************************************
      2            Filename:       MT_DEBUG.c
      3            Revised:        $Date: 2013-07-29 05:42:52 -0700 (Mon, 29 Jul 2013) $
      4            Revision:       $Revision: 34794 $
      5          
      6            Description:    MonitorTest functions for debug utilities.
      7          
      8            Copyright 2007-2013 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          
     44          #include "ZComDef.h"
     45          #include "MT.h"
     46          #include "MT_DEBUG.h"
     47          #include "MT_UART.h"
     48          #include "mac_main.h"
     49          #include "mac_data.h"
     50          #include "mac_rx.h"
     51          #include "mac_tx.h"
     52          #include "nwk_globals.h"
     53          #include "mac_radio_defs.h"
     54          
     55          /***************************************************************************************************
     56           * LOCAL FUNCTIONs
     57           ***************************************************************************************************/
     58          
     59          #if defined (MT_DEBUG_FUNC)
     60          static void MT_DebugSetThreshold(uint8 *pBuf);
     61          static void MT_DebugMacDataDump(void);
     62          #endif
     63          
     64          #if defined (MT_DEBUG_FUNC)
     65          /***************************************************************************************************
     66           * @fn      MT_DebugProcessing
     67           *
     68           * @brief   Process all the DEBUG commands that are issued by test tool
     69           *
     70           * @param   pBuf - pointer to received buffer
     71           *
     72           * @return  status
     73           ***************************************************************************************************/
     74          uint8 MT_DebugCommandProcessing(uint8 *pBuf)
     75          {
     76            uint8 status = MT_RPC_SUCCESS;
     77          
     78            switch (pBuf[MT_RPC_POS_CMD1])
     79            {
     80              case MT_DEBUG_SET_THRESHOLD:
     81                MT_DebugSetThreshold(pBuf);
     82                break;
     83          
     84            case MT_DEBUG_MAC_DATA_DUMP:
     85                MT_DebugMacDataDump();
     86                break;
     87          
     88              default:
     89                status = MT_RPC_ERR_COMMAND_ID;
     90                break;
     91            }
     92          
     93            return status;
     94          }
     95          
     96          /***************************************************************************************************
     97           * @fn      MT_DebugSetThreshold
     98           *
     99           * @brief   Process Debug Set Threshold
    100           *
    101           * @param   pBuf - pointer to received buffer
    102           *
    103           * @return  void
    104           ***************************************************************************************************/
    105          static void MT_DebugSetThreshold(uint8 *pBuf)
    106          {
    107            uint8 retValue = ZSuccess;
    108            uint8 cmdId;
    109          
    110            /* parse header */
    111            cmdId = pBuf[MT_RPC_POS_CMD1];
    112            pBuf += MT_RPC_FRAME_HDR_SZ;
    113          
    114            /* Populate info */
    115            debugCompId = *pBuf++;
    116            debugThreshold = *pBuf;
    117          
    118            /* Build and send back the response */
    119            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_DBG), cmdId, 1, &retValue);
    120          }
    121          
    122          /***************************************************************************************************
    123           * @fn      MT_DebugMacDataDump
    124           *
    125           * @brief   Process the debug MAC Data Dump request.
    126           *
    127           * @param   pBuf - pointer to received buffer
    128           *
    129           * @return  void
    130           ***************************************************************************************************/
    131          static void MT_DebugMacDataDump(void)
    132          {
    133            uint8 buf[sizeof(mtDebugMacDataDump_t)];
    134            uint8 *pBuf = buf;
    135          
    136          #ifdef FEATURE_PACKET_FILTER_STATS
    137            *pBuf++ = BREAK_UINT32(nwkInvalidPackets, 0);
    138            *pBuf++ = BREAK_UINT32(nwkInvalidPackets, 1);
    139            *pBuf++ = BREAK_UINT32(nwkInvalidPackets, 2);
    140            *pBuf++ = BREAK_UINT32(nwkInvalidPackets, 3);
    141            *pBuf++ = BREAK_UINT32(rxCrcFailure, 0);
    142            *pBuf++ = BREAK_UINT32(rxCrcFailure, 1);
    143            *pBuf++ = BREAK_UINT32(rxCrcFailure, 2);
    144            *pBuf++ = BREAK_UINT32(rxCrcFailure, 3);
    145            *pBuf++ = BREAK_UINT32(rxCrcSuccess, 0);
    146            *pBuf++ = BREAK_UINT32(rxCrcSuccess, 1);
    147            *pBuf++ = BREAK_UINT32(rxCrcSuccess, 2);
    148            *pBuf++ = BREAK_UINT32(rxCrcSuccess, 3);
    149          #endif
    150          #if defined MAC_RADIO_CC2520
    151            *pBuf++ = macSpiReadReg(FSMSTAT0);
    152            *pBuf++ = macSpiReadReg(FSMSTAT1);
    153          #else
    154            *pBuf++ = FSMSTAT0;
    155            *pBuf++ = FSMSTAT1;
    156          #endif
    157            *pBuf++ = macData.rxCount;
    158            *pBuf++ = macData.directCount;
    159            *pBuf++ = macMain.state;
    160            *pBuf++ = macRxActive;
    161            *pBuf   = macTxActive;
    162          
    163            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_DBG),
    164                                                 MT_DEBUG_MAC_DATA_DUMP, sizeof(buf), buf);
    165          }
    166          #endif
    167          
    168          /***************************************************************************************************
    169           * @fn      MT_ProcessDebugMsg
    170           *
    171           * @brief   Build and send a debug message.
    172           *
    173           * @param   byte *data - pointer to the data portion of the debug message
    174           *
    175           * @return  void
    176           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    177          void MT_ProcessDebugMsg( mtDebugMsg_t *msg )
   \                     MT_ProcessDebugMsg:
    178          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    179            byte *msg_ptr;
    180            byte dataLen;
    181            uint8 buf[11];
    182            uint8 *pBuf;
    183          
    184            /* Calculate the data length based */
    185            dataLen = 5 + (msg->numParams * sizeof ( uint16 ));
    186          
    187            /* Get a message buffer to build the debug message */
    188            msg_ptr = osal_msg_allocate( (byte)(SPI_0DATA_MSG_LEN + dataLen + 1) );
   \   00000E   EE           MOV     A,R6
   \   00000F   2404         ADD     A,#0x4
   \   000011   F8           MOV     R0,A
   \   000012   E4           CLR     A
   \   000013   3F           ADDC    A,R7
   \   000014   F9           MOV     R1,A
   \   000015   88..         MOV     ?V0,R0
   \   000017   89..         MOV     ?V1,R1
   \   000019                ; Setup parameters for call to function osal_msg_allocate
   \   000019   8882         MOV     DPL,R0
   \   00001B   F583         MOV     DPH,A
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   C3           CLR     C
   \   00001F   33           RLC     A
   \   000020   240B         ADD     A,#0xb
   \   000022   FA           MOV     R2,A
   \   000023   7B00         MOV     R3,#0x0
   \   000025   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    189            if ( msg_ptr )
   \   000028   EA           MOV     A,R2
   \   000029   4B           ORL     A,R3
   \   00002A   7003         JNZ     $+5
   \   00002C   02....       LJMP    ??MT_ProcessDebugMsg_0 & 0xFFFF
    190            {
    191              /* Build the message */
    192              pBuf = buf;
    193              *pBuf++ = msg->compID;
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   85..82       MOV     DPL,?XSP + 0
   \   000039   85..83       MOV     DPH,?XSP + 1
   \   00003C   F0           MOVX    @DPTR,A
    194              *pBuf++ = msg->severity;
   \   00003D   8E82         MOV     DPL,R6
   \   00003F   8F83         MOV     DPH,R7
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   C0E0         PUSH    A
   \   000047   7401         MOV     A,#0x1
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   D0E0         POP     A
   \   00004E   F0           MOVX    @DPTR,A
    195              *pBuf++ = msg->numParams;
   \   00004F   85..82       MOV     DPL,?V0
   \   000052   85..83       MOV     DPH,?V1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   C0E0         PUSH    A
   \   000058   7402         MOV     A,#0x2
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   D0E0         POP     A
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   7403         MOV     A,#0x3
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   A882         MOV     R0,DPL
   \   000067   A983         MOV     R1,DPH
    196          
    197              if ( msg->numParams >= 1 )
   \   000069   85..82       MOV     DPL,?V0
   \   00006C   85..83       MOV     DPH,?V1
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   7003         JNZ     $+5
   \   000072   02....       LJMP    ??MT_ProcessDebugMsg_1 & 0xFFFF
    198              {
    199                *pBuf++ = LO_UINT16( msg->param1 );
   \   000075   EE           MOV     A,R6
   \   000076   2405         ADD     A,#0x5
   \   000078   F8           MOV     R0,A
   \   000079   E4           CLR     A
   \   00007A   3F           ADDC    A,R7
   \   00007B   F9           MOV     R1,A
   \   00007C   8882         MOV     DPL,R0
   \   00007E   8983         MOV     DPH,R1
   \   000080   E0           MOVX    A,@DPTR
   \   000081   C0E0         PUSH    A
   \   000083   7403         MOV     A,#0x3
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   D0E0         POP     A
   \   00008A   F0           MOVX    @DPTR,A
    200                *pBuf++ = HI_UINT16( msg->param1 );
   \   00008B   8882         MOV     DPL,R0
   \   00008D   8983         MOV     DPH,R1
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   C0E0         PUSH    A
   \   000093   7404         MOV     A,#0x4
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   D0E0         POP     A
   \   00009A   F0           MOVX    @DPTR,A
   \   00009B   7405         MOV     A,#0x5
   \   00009D   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A0   A882         MOV     R0,DPL
   \   0000A2   A983         MOV     R1,DPH
    201              }
    202          
    203              if ( msg->numParams >= 2 )
   \   0000A4   85..82       MOV     DPL,?V0
   \   0000A7   85..83       MOV     DPH,?V1
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   C3           CLR     C
   \   0000AC   9402         SUBB    A,#0x2
   \   0000AE   402F         JC      ??MT_ProcessDebugMsg_2
    204              {
    205                *pBuf++ = LO_UINT16( msg->param2 );
   \   0000B0   EE           MOV     A,R6
   \   0000B1   2407         ADD     A,#0x7
   \   0000B3   F8           MOV     R0,A
   \   0000B4   E4           CLR     A
   \   0000B5   3F           ADDC    A,R7
   \   0000B6   F9           MOV     R1,A
   \   0000B7   8882         MOV     DPL,R0
   \   0000B9   8983         MOV     DPH,R1
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   C0E0         PUSH    A
   \   0000BE   7405         MOV     A,#0x5
   \   0000C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C3   D0E0         POP     A
   \   0000C5   F0           MOVX    @DPTR,A
    206                *pBuf++ = HI_UINT16( msg->param2 );
   \   0000C6   8882         MOV     DPL,R0
   \   0000C8   8983         MOV     DPH,R1
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   C0E0         PUSH    A
   \   0000CE   7406         MOV     A,#0x6
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   D0E0         POP     A
   \   0000D5   F0           MOVX    @DPTR,A
   \   0000D6   7407         MOV     A,#0x7
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   A882         MOV     R0,DPL
   \   0000DD   A983         MOV     R1,DPH
    207              }
    208          
    209              if ( msg->numParams == 3 )
   \                     ??MT_ProcessDebugMsg_2:
   \   0000DF   85..82       MOV     DPL,?V0
   \   0000E2   85..83       MOV     DPH,?V1
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   6403         XRL     A,#0x3
   \   0000E8   700D         JNZ     ??MT_ProcessDebugMsg_1
    210              {
    211                *pBuf++ = LO_UINT16( msg->param3 );
   \   0000EA   EE           MOV     A,R6
   \   0000EB   2409         ADD     A,#0x9
   \   0000ED   12....       LCALL   ?Subroutine0 & 0xFFFF
    212                *pBuf++ = HI_UINT16( msg->param3 );
    213              }
   \                     ??CrossCallReturnLabel_0:
   \   0000F0   E8           MOV     A,R0
   \   0000F1   2402         ADD     A,#0x2
   \   0000F3   F8           MOV     R0,A
   \   0000F4   5001         JNC     ??MT_ProcessDebugMsg_1
   \   0000F6   09           INC     R1
    214          
    215              *pBuf++ = LO_UINT16( msg->timestamp );
   \                     ??MT_ProcessDebugMsg_1:
   \   0000F7   EE           MOV     A,R6
   \   0000F8   240B         ADD     A,#0xb
   \   0000FA   12....       LCALL   ?Subroutine0 & 0xFFFF
    216              *pBuf = HI_UINT16( msg->timestamp );
    217          
    218          #ifdef MT_UART_DEFAULT_PORT
    219              /* Debug message is set to AREQ CMD 0x80 for now */
    220              /* Build and send back the response */
    221              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_DBG), 0x80, dataLen, buf);
    222          #endif
    223              osal_msg_deallocate( msg_ptr );
   \                     ??CrossCallReturnLabel_1:
   \   0000FD                ; Setup parameters for call to function osal_msg_deallocate
   \   0000FD   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    224            }
    225          }
   \                     ??MT_ProcessDebugMsg_0:
   \   000100   740B         MOV     A,#0xb
   \   000102   12....       LCALL   ?DEALLOC_XSTACK8
   \   000105   7F04         MOV     R7,#0x4
   \   000107   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   FC           MOV     R4,A
   \   000001   E4           CLR     A
   \   000002   3F           ADDC    A,R7
   \   000003   FD           MOV     R5,A
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   E0           MOVX    A,@DPTR
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   8C82         MOV     DPL,R4
   \   000010   8D83         MOV     DPH,R5
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \   000018   A3           INC     DPTR
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   22           RET
    226          
    227          /***************************************************************************************************
    228           * @fn      MT_ProcessDebugStr
    229           *
    230           * @brief   Build and send a debug string.
    231           *
    232           * @param   byte *dstr - pointer to the data portion of the debug message
    233           *
    234           * @return  void
    235           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    236          void MT_ProcessDebugStr(mtDebugStr_t *dstr)
   \                     MT_ProcessDebugStr:
    237          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    238            byte *msg_ptr;
    239          
    240            /* Get a message buffer to build the debug message */
    241            msg_ptr = osal_mem_alloc( (byte)(SPI_0DATA_MSG_LEN + dstr->strLen) );
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   2405         ADD     A,#0x5
   \   00000E   FA           MOV     R2,A
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    242            if ( msg_ptr )
   \   000014   EA           MOV     A,R2
   \   000015   4B           ORL     A,R3
   \   000016   6003         JZ      ??MT_ProcessDebugStr_0
    243            {
    244          #ifdef MT_UART_DEFAULT_PORT
    245              /* Debug message is set to AREQ CMD 0x80 for now */
    246              /* Build and send back the response */
    247              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_DBG), MT_DEBUG_MSG, dstr->strLen, dstr->pString);
    248          #endif
    249              osal_mem_free( msg_ptr );
   \   000018                ; Setup parameters for call to function osal_mem_free
   \   000018   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    250            }
    251          }
   \                     ??MT_ProcessDebugStr_0:
   \   00001B   7F02         MOV     R7,#0x2
   \   00001D   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessDebugMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessDebugMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessDebugStr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessDebugStr
    252          
    253          /**************************************************************************************************
    254           */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     23   MT_ProcessDebugMsg
        0     23   -> osal_msg_allocate
        0     23   -> osal_msg_deallocate
      0     10   MT_ProcessDebugStr
        0     10   -> osal_mem_alloc
        0     10   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      27  ?Subroutine0
     266  MT_ProcessDebugMsg
       6  MT_ProcessDebugMsg::?relay
      32  MT_ProcessDebugStr
       6  MT_ProcessDebugStr::?relay

 
 325 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
 
  12 bytes of CODE     memory
 325 bytes of HUGECODE memory

Errors: none
Warnings: none
