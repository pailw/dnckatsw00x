###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                16/Jan/2019  20:41:56
# Copyright 2004-2016 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\Source\zcl_samplelight.c
#    Command line       =  
#        -f
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\Source\zcl_samplelight.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D
#        POWER_SAVING -D NWK_AUTO_POLL -D xHOLD_AUTO_START -D xZTOOL_P1 -D
#        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_REPORT -D xZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D
#        xZCL_DIAGNOSTIC -D xFEATURE_SYSTEM_STATS -lC
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\EndDeviceEB\List
#        -lA
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\Source\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\Source\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\ZMain\TI2530DB\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\hal\include\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\hal\target\CC2530LOWPWR\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\mac\include\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\mac\high_level\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\mt\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\osal\include\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\services\saddr\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\services\sdata\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\af\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\nwk\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\sapi\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\sec\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\sys\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\zcl\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\zdo\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\zmac\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\EndDeviceEB\List\zcl_samplelight.lst
#    Object file        =  
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\EndDeviceEB\Obj\zcl_samplelight.r51
#
###############################################################################

Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\Source\zcl_samplelight.c
      1          /**************************************************************************************************
      2            Filename:       zcl_sampleLight.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6          
      7            Description:    Zigbee Cluster Library - sample device application.
      8          
      9          
     10            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42            This application implements a ZigBee HA 1.2 Light. It can be configured as an
     43            On/Off light, or as a dimmable light. The following flags must be defined in
     44            the compiler's pre-defined symbols.
     45          
     46            ZCL_ON_OFF
     47            ZCL_LEVEL_CTRL    (only if dimming functionality desired)
     48            HOLD_AUTO_START
     49            ZCL_EZMODE
     50          
     51            This device supports all mandatory and optional commands/attributes for the
     52            OnOff (0x0006) and LevelControl (0x0008) clusters.
     53          
     54            SCREEN MODES
     55            ----------------------------------------
     56            Main:
     57              - SW1: Toggle local light
     58              - SW2: Invoke EZMode
     59              - SW4: Enable/Disable local permit join
     60              - SW5: Go to Help screen
     61            ----------------------------------------
     62          *********************************************************************/
     63          
     64          /*********************************************************************
     65           * INCLUDES
     66           */
     67          #include "ZComDef.h"
     68          #include "OSAL.h"
     69          #include "AF.h"
     70          #include "ZDApp.h"
     71          #include "ZDObject.h"
     72          #include "MT_SYS.h"
     73          
     74          #include "nwk_util.h"
     75          
     76          #include "zcl.h"
     77          #include "zcl_general.h"
     78          #include "zcl_ha.h"
     79          #include "zcl_ezmode.h"
     80          #include "zcl_diagnostic.h"
     81          
     82          #include "zcl_samplelight.h"
     83          
     84          #include "onboard.h"
     85          
     86          /* HAL */
     87          #include "hal_lcd.h"
     88          #include "hal_led.h"
     89          #include "hal_key.h"
     90          
     91          #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \
     92                || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
     93          #include "zgp_translationtable.h"
     94            #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
     95              #define ZGP_AUTO_TT
     96            #endif
     97          #endif
     98          
     99          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    100          #include "math.h"
    101          #include "hal_timer.h"
    102          #endif
    103          
    104          #include "NLMEDE.h"
    105          
    106          /*********************************************************************
    107           * MACROS
    108           */
    109          
    110          /*********************************************************************
    111           * CONSTANTS
    112           */
    113          #if (defined HAL_BOARD_ZLIGHT)
    114          #define LEVEL_MAX                 0xFE
    115          #define LEVEL_MIN                 0x0
    116          #define GAMMA_VALUE               2
    117          #define PWM_FULL_DUTY_CYCLE       1000
    118          #elif (defined HAL_PWM)
    119          #define LEVEL_MAX                 0xFE
    120          #define LEVEL_MIN                 0x0
    121          #define GAMMA_VALUE               2
    122          #define PWM_FULL_DUTY_CYCLE       100
    123          #endif
    124          
    125          /*********************************************************************
    126           * TYPEDEFS
    127           */
    128          
    129          /*********************************************************************
    130           * GLOBAL VARIABLES
    131           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          byte zclSampleLight_TaskID;
   \                     zclSampleLight_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          byte zclSampleLight1_TaskID;
   \                     zclSampleLight1_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint8 zclSampleLightSeqNum;
   \                     zclSampleLightSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          
    136          
    137          /*********************************************************************
    138           * GLOBAL FUNCTIONS
    139           */
    140          
    141          /*********************************************************************
    142           * LOCAL VARIABLES
    143           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          afAddrType_t zclSampleLight_DstAddr;
   \                     zclSampleLight_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    145          
    146          #ifdef ZCL_EZMODE
    147          static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
    148          static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
    149          
    150          
    151          // register EZ-Mode with task information (timeout events, callback, etc...)
    152          static const zclEZMode_RegisterData_t zclSampleLight_RegisterEZModeData =
    153          {
    154            &zclSampleLight_TaskID,
    155            SAMPLELIGHT_EZMODE_NEXTSTATE_EVT,
    156            SAMPLELIGHT_EZMODE_TIMEOUT_EVT,
    157            &zclSampleLightSeqNum,
    158            zclSampleLight_EZModeCB
    159          };
    160          
    161          #else

   \                                 In  segment XDATA_I, align 1, keep-with-next
    162          uint16 bindingInClusters[] =
   \                     bindingInClusters:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for bindingInClusters>`
   \   000002                REQUIRE __INIT_XDATA_I
    163          {
    164          //  ZCL_CLUSTER_ID_GEN_ON_OFF,
    165            ZCL_CLUSTER_ID_GEN_ON_OFF
    166          #ifdef ZCL_LEVEL_CTRL
    167            , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
    168          #endif
    169          };
    170          #define ZCLSAMPLELIGHT_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
    171          
    172          static cId_t bindingOutClusters[] =
    173          {
    174          //  ZCL_CLUSTER_ID_GEN_ON_OFF,
    175            ZCL_CLUSTER_ID_GEN_ON_OFF
    176          #ifdef ZCL_LEVEL_CTRL
    177            , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
    178          #endif
    179          };
    180          #define ZCLSAMPLELIGHT_BINDINGLISTOUT (sizeof(bindingOutClusters) / sizeof(bindingOutClusters[0]))
    181          
    182          
    183          #endif  // ZCL_EZMODE
    184          
    185          // Test Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
    186          static endPointDesc_t sampleLight_TestEp =
   \                     sampleLight_TestEp:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for sampleLight_TestEp>`
   \   000006                REQUIRE __INIT_XDATA_I
    187          {
    188            SAMPLELIGHT_ENDPOINT,
    189            &zclSampleLight_TaskID,
    190            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    191            (afNetworkLatencyReq_t)0            // No Network Latency req
    192          };
    193          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    194          static endPointDesc_t sampleLight_TestEp1 =
   \                     sampleLight_TestEp1:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for sampleLight_TestEp1>`
   \   000006                REQUIRE __INIT_XDATA_I
    195          {
    196            SAMPLELIGHT_ENDPOINT+1,
    197            &zclSampleLight1_TaskID,
    198            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    199            (afNetworkLatencyReq_t)0            // No Network Latency req
    200          };

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    201          uint8 giLightScreenMode = LIGHT_MAINMODE;   // display the main screen mode first
   \                     giLightScreenMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    202          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    203          uint8 gPermitDuration = 0;    // permit joining default to disabled
   \                     gPermitDuration:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    204          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    205          devStates_t zclSampleLight_NwkState = DEV_INIT;
   \                     zclSampleLight_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleLight_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    206          
    207          #if ZCL_LEVEL_CTRL
    208          uint8 zclSampleLight_WithOnOff;       // set to TRUE if state machine should set light on/off
    209          uint8 zclSampleLight_NewLevel;        // new level when done moving
    210          bool  zclSampleLight_NewLevelUp;      // is direction to new level up or down?
    211          int32 zclSampleLight_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
    212          int32 zclSampleLight_Rate32;          // rate in units, fixed point (e.g. 16.123)
    213          uint8 zclSampleLight_LevelLastLevel;  // to save the Current Level before the light was turned OFF
    214          #endif
    215          
    216          /*********************************************************************
    217           * LOCAL FUNCTIONS
    218           */
    219          static void zclSampleLight_HandleKeys( byte shift, byte keys );
    220          static void zclSampleLight_BasicResetCB( void );
    221          static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd );
    222          static void zclSampleLight_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
    223          static void zclSampleLight_OnOffCB( uint8 cmd );
    224          static void zclSampleLight_ProcessIdentifyTimeChange( void );
    225          #ifdef ZCL_LEVEL_CTRL
    226          static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
    227          static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd );
    228          static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd );
    229          static void zclSampleLight_LevelControlStopCB( void );
    230          static void zclSampleLight_DefaultMove( void );
    231          static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel );
    232          static uint16 zclSampleLight_GetTime ( uint8 level, uint16 time );
    233          static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate );
    234          static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time );
    235          static void zclSampleLight_AdjustLightLevel( void );
    236          #endif
    237          
    238          // app display functions
    239          static void zclSampleLight_LcdDisplayUpdate( void );
    240          #ifdef LCD_SUPPORTED
    241          static void zclSampleLight_LcdDisplayMainMode( void );
    242          static void zclSampleLight_LcdDisplayHelpMode( void );
    243          #endif
    244          static void zclSampleLight_DisplayLight( void );
    245          
    246          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    247          void zclSampleLight_UpdateLampLevel( uint8 level );
    248          #endif
    249          
    250          // Functions to process ZCL Foundation incoming Command/Response messages
    251          static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    252          #ifdef ZCL_READ
    253          static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    254          #endif
    255          #ifdef ZCL_WRITE
    256          static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    257          #endif
    258          static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    259          #ifdef ZCL_DISCOVER
    260          static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    261          static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    262          static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    263          #endif
    264          
    265          /*********************************************************************
    266           * STATUS STRINGS
    267           */
    268          #ifdef LCD_SUPPORTED
    269          const char sDeviceName[]   = "  Sample Light";
    270          const char sClearLine[]    = " ";
    271          const char sSwLight[]      = "SW1: ToggleLight";  // 16 chars max
    272          const char sSwEZMode[]     = "SW2: EZ-Mode";
    273          char sSwHelp[]             = "SW5: Help       ";  // last character is * if NWK open
    274          const char sLightOn[]      = "    LIGHT ON ";
    275          const char sLightOff[]     = "    LIGHT OFF";
    276           #if ZCL_LEVEL_CTRL
    277           char sLightLevel[]        = "    LEVEL ###"; // displays level 1-254
    278           #endif
    279          #endif
    280          
    281          /*********************************************************************
    282           * ZCL General Profile Callback table
    283           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    284          static zclGeneral_AppCallbacks_t zclSampleLight_CmdCallbacks =
   \                     zclSampleLight_CmdCallbacks:
   \   000000                DS 28
   \   00001C                REQUIRE `?<Initializer for zclSampleLight_CmdCallbacks>`
   \   00001C                REQUIRE __INIT_XDATA_I
    285          {
    286            zclSampleLight_BasicResetCB,            // Basic Cluster Reset command
    287            zclSampleLight_IdentifyCB,              // Identify command
    288          #ifdef ZCL_EZMODE
    289            NULL,                                   // Identify EZ-Mode Invoke command
    290            NULL,                                   // Identify Update Commission State command
    291          #endif
    292            NULL,                                   // Identify Trigger Effect command
    293            zclSampleLight_IdentifyQueryRspCB,      // Identify Query Response command
    294            zclSampleLight_OnOffCB,                 // On/Off cluster commands
    295            NULL,                                   // On/Off cluster enhanced command Off with Effect
    296            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    297            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    298          #ifdef ZCL_LEVEL_CTRL
    299            zclSampleLight_LevelControlMoveToLevelCB, // Level Control Move to Level command
    300            zclSampleLight_LevelControlMoveCB,        // Level Control Move command
    301            zclSampleLight_LevelControlStepCB,        // Level Control Step command
    302            zclSampleLight_LevelControlStopCB,        // Level Control Stop command
    303          #endif
    304          #ifdef ZCL_GROUPS
    305            NULL,                                   // Group Response commands
    306          #endif
    307          #ifdef ZCL_SCENES
    308            NULL,                                  // Scene Store Request command
    309            NULL,                                  // Scene Recall Request command
    310            NULL,                                  // Scene Response command
    311          #endif
    312          #ifdef ZCL_ALARMS
    313            NULL,                                  // Alarm (Response) commands
    314          #endif
    315          #ifdef SE_UK_EXT
    316            NULL,                                  // Get Event Log command
    317            NULL,                                  // Publish Event Log command
    318          #endif
    319            NULL,                                  // RSSI Location command
    320            NULL                                   // RSSI Location Response command
    321          };
    322          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    323          void zclPower_Init( byte task_id )
   \                     zclPower_Init:
    324          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    325          
    326          //  zclSampleLight_TaskID = task_id;
    327          
    328            
    329          //  Onboard_wait_ms(1000);
    330          /*  HAL_TURN_ON_LED4();
    331            HAL_TURN_OFF_LED2();
    332            Onboard_wait_ms(20);
    333            HAL_TURN_OFF_LED4();
    334            Onboard_wait_ms(1000);
    335            HAL_TURN_ON_LED4();
    336            Onboard_wait_ms(20);
    337            HAL_TURN_OFF_LED4();
    338            Onboard_wait_ms(1000);
    339            HAL_TURN_ON_LED4();
    340            Onboard_wait_ms(20);
    341            HAL_TURN_OFF_LED4();
    342            Onboard_wait_ms(1000);
    343            HAL_TURN_ON_LED2();
    344            Onboard_wait_ms(20);
    345            HAL_TURN_OFF_LED2();
    346            Onboard_wait_ms(1000);
    347            HAL_TURN_ON_LED2();
    348            Onboard_wait_ms(20);
    349            HAL_TURN_OFF_LED2();
    350            Onboard_wait_ms(1000);
    351            HAL_TURN_ON_LED2();
    352            Onboard_wait_ms(20);
    353            HAL_TURN_OFF_LED2();
    354            Onboard_wait_ms(1000);*/
    355          }
   \   000000   02....       LJMP    ?BRET
    356          
    357          /*********************************************************************
    358           * @fn          zclSampleLight_Init
    359           *
    360           * @brief       Initialization function for the zclGeneral layer.
    361           *
    362           * @param       none
    363           *
    364           * @return      none
    365           */
    366          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    367          void zclSampleLight_Init( byte task_id )
   \                     zclSampleLight_Init:
    368          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    369          
    370            zclSampleLight_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000009   12....       LCALL   ?Subroutine3 & 0xFFFF
    371          
    372          
    373            // Set destination address to indirect
    374            zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
    375            zclSampleLight_DstAddr.endPoint = 0;
    376            zclSampleLight_DstAddr.addr.shortAddr = 0;
    377           
    378          // This app is part of the Home Automation Profile
    379            zclHA_Init( &(zclSampleLight_SimpleDesc[0]) ); //button 1
   \                     ??CrossCallReturnLabel_0:
   \   00000C                ; Setup parameters for call to function zclHA_Init
   \   00000C   7A..         MOV     R2,#zclSampleLight_SimpleDesc & 0xff
   \   00000E   7B..         MOV     R3,#(zclSampleLight_SimpleDesc >> 8) & 0xff
   \   000010   12....       LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
    380          
    381            // Register the ZCL General Cluster Library callback functions
    382            zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zclSampleLight_CmdCallbacks );//button 1
   \   000013                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000013   7A..         MOV     R2,#zclSampleLight_CmdCallbacks & 0xff
   \   000015   7B..         MOV     R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
   \   000017   7901         MOV     R1,#0x1
   \   000019   12....       LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    383          
    384            // Register the application's attribute list
    385            zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zclSampleLight_NumAttributes, zclSampleLight_Attrs );//button 1
   \   00001C                ; Setup parameters for call to function zcl_registerAttrList
   \   00001C   7C..         MOV     R4,#zclSampleLight_Attrs & 0xff
   \   00001E   7D..         MOV     R5,#(zclSampleLight_Attrs >> 8) & 0xff
   \   000020   90....       MOV     DPTR,#zclSampleLight_NumAttributes
   \   000023   E4           CLR     A
   \   000024   93           MOVC    A,@A+DPTR
   \   000025   FA           MOV     R2,A
   \   000026   7901         MOV     R1,#0x1
   \   000028   12....       LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    386          
    387            // Register the Application to receive the unprocessed Foundation command/response messages
    388            zcl_registerForMsg( zclSampleLight_TaskID );
   \   00002B                ; Setup parameters for call to function zcl_registerForMsg
   \   00002B   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   12....       LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    389          
    390          #ifdef ZCL_DISCOVER
    391            // Register the application's command list
    392            zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zclSampleLight_Cmds );//button 1
    393          #endif
    394          
    395            // Register for all key events - This app will handle all key events
    396            RegisterForKeys( zclSampleLight_TaskID );
   \   000033                ; Setup parameters for call to function RegisterForKeys
   \   000033   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    397          
    398            // Register for a test endpoint
    399            afRegister( &sampleLight_TestEp );
   \   00003B                ; Setup parameters for call to function afRegister
   \   00003B   7A..         MOV     R2,#sampleLight_TestEp & 0xff
   \   00003D   7B..         MOV     R3,#(sampleLight_TestEp >> 8) & 0xff
   \   00003F                REQUIRE ?Subroutine0
   \   00003F                ; // Fall through to label ?Subroutine0
    400            //afRegister( &sampleLight_TestEp1 );
    401          
    402          #ifdef ZCL_EZMODE
    403            // Register EZ-Mode
    404            zcl_RegisterEZMode( &zclSampleLight_RegisterEZModeData );
    405          
    406            // Register with the ZDO to receive Match Descriptor Responses
    407            ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
    408          #endif
    409          
    410          
    411          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    412            HalTimer1Init( 0 );
    413            halTimer1SetChannelDuty( WHITE_LED, 0 );
    414            halTimer1SetChannelDuty( RED_LED, 0 );
    415            halTimer1SetChannelDuty( BLUE_LED, 0 );
    416            halTimer1SetChannelDuty( GREEN_LED, 0 );
    417          
    418            // find if we are already on a network from NV_RESTORE
    419            uint8 state;
    420            NLME_GetRequest( nwkNwkState, 0, &state );
    421          
    422            if ( state < NWK_ENDDEVICE )
    423            {
    424              // Start EZMode on Start up to avoid button press
    425              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_START_EZMODE_EVT, 500 );
    426            }
    427          #if ZCL_LEVEL_CTRL
    428            zclSampleLight_DefaultMove();
    429          #endif
    430          #endif // #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    431          
    432          #ifdef ZCL_DIAGNOSTIC
    433            // Register the application's callback function to read/write attribute data.
    434            // This is only required when the attribute data format is unknown to ZCL.
    435            zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
    436          
    437            if ( zclDiagnostic_InitStats() == ZSuccess )
    438            {
    439              // Here the user could start the timer to save Diagnostics to NV
    440            }
    441          #endif
    442          
    443          #ifdef LCD_SUPPORTED
    444            HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
    445          #endif  // LCD_SUPPORTED
    446          
    447          #ifdef ZGP_AUTO_TT
    448            zgpTranslationTable_RegisterEP ( &zclSampleLight_SimpleDesc[0] );
    449          #endif
    450          //  HalLedSet( HAL_LED_1, HAL_LED_MODE_BLINK);
    451          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
   \   000003   7F01         MOV     R7,#0x1
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#zclSampleLight_DstAddr + 8
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   F0           MOVX    @DPTR,A
   \   000008   90....       MOV     DPTR,#zclSampleLight_DstAddr
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   22           RET
    452          
    453          
    454          /*********************************************************************
    455           * @fn          zclSampleLight_Init
    456           *
    457           * @brief       Initialization function for the zclGeneral layer.
    458           *
    459           * @param       none
    460           *
    461           * @return      none
    462           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    463          void zclSampleLight1_Init( byte task_id )
   \                     zclSampleLight1_Init:
    464          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    465            zclSampleLight1_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#zclSampleLight1_TaskID
   \   000009   12....       LCALL   ?Subroutine3 & 0xFFFF
    466          
    467            
    468            // Set destination address to indirect
    469            zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
    470            zclSampleLight_DstAddr.endPoint = 0;
    471            zclSampleLight_DstAddr.addr.shortAddr = 0;
    472          
    473          // This app is part of the Home Automation Profile
    474            zclHA_Init( &(zclSampleLight_SimpleDesc[1]) ); //button 2
   \                     ??CrossCallReturnLabel_1:
   \   00000C                ; Setup parameters for call to function zclHA_Init
   \   00000C   7A..         MOV     R2,#(zclSampleLight_SimpleDesc + 12) & 0xff
   \   00000E   7B..         MOV     R3,#((zclSampleLight_SimpleDesc + 12) >> 8) & 0xff
   \   000010   12....       LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
    475          
    476            // Register the ZCL General Cluster Library callback functions
    477            zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT+1, &zclSampleLight_CmdCallbacks );//button 2
   \   000013                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000013   7A..         MOV     R2,#zclSampleLight_CmdCallbacks & 0xff
   \   000015   7B..         MOV     R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
   \   000017   7902         MOV     R1,#0x2
   \   000019   12....       LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    478          
    479            // Register the application's attribute list
    480            zcl_registerAttrList( SAMPLELIGHT_ENDPOINT+1, zclSampleLight_NumAttributes, zclSampleLight_Attrs );//button 2
   \   00001C                ; Setup parameters for call to function zcl_registerAttrList
   \   00001C   7C..         MOV     R4,#zclSampleLight_Attrs & 0xff
   \   00001E   7D..         MOV     R5,#(zclSampleLight_Attrs >> 8) & 0xff
   \   000020   90....       MOV     DPTR,#zclSampleLight_NumAttributes
   \   000023   E4           CLR     A
   \   000024   93           MOVC    A,@A+DPTR
   \   000025   FA           MOV     R2,A
   \   000026   7902         MOV     R1,#0x2
   \   000028   12....       LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    481          
    482            // Register the Application to receive the unprocessed Foundation command/response messages
    483          //  zcl_registerForMsg( zclSampleLight1_TaskID );
    484          
    485          #ifdef ZCL_DISCOVER
    486            // Register the application's command list
    487            zcl_registerCmdList( SAMPLELIGHT_ENDPOINT+1, zclCmdsArraySize, zclSampleLight_Cmds );//button 1
    488          #endif
    489          
    490          #ifdef ZCL_DISCOVER
    491            // Register the application's command list
    492            zcl_registerCmdList( SAMPLELIGHT_ENDPOINT+1, zclCmdsArraySize, zclSampleLight_Cmds );
    493          #endif
    494          
    495            // Register for all key events - This app will handle all key events
    496          //  RegisterForKeys( zclSampleLight1_TaskID );
    497          
    498            // Register for a test endpoint
    499            afRegister( &sampleLight_TestEp1 );
   \   00002B                ; Setup parameters for call to function afRegister
   \   00002B   7A..         MOV     R2,#sampleLight_TestEp1 & 0xff
   \   00002D   7B..         MOV     R3,#(sampleLight_TestEp1 >> 8) & 0xff
   \   00002F   80..         SJMP    ?Subroutine0
    500          
    501          #ifdef ZCL_EZMODE
    502            // Register EZ-Mode
    503            zcl_RegisterEZMode( &zclSampleLight_RegisterEZModeData );
    504          
    505            // Register with the ZDO to receive Match Descriptor Responses
    506            ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
    507          #endif
    508          
    509          
    510          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    511            HalTimer1Init( 0 );
    512            halTimer1SetChannelDuty( WHITE_LED, 0 );
    513            halTimer1SetChannelDuty( RED_LED, 0 );
    514            halTimer1SetChannelDuty( BLUE_LED, 0 );
    515            halTimer1SetChannelDuty( GREEN_LED, 0 );
    516          
    517            // find if we are already on a network from NV_RESTORE
    518            uint8 state;
    519            NLME_GetRequest( nwkNwkState, 0, &state );
    520          
    521            if ( state < NWK_ENDDEVICE )
    522            {
    523              // Start EZMode on Start up to avoid button press
    524              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_START_EZMODE_EVT, 500 );
    525            }
    526          #if ZCL_LEVEL_CTRL
    527            zclSampleLight_DefaultMove();
    528          #endif
    529          #endif // #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    530          
    531          #ifdef ZCL_DIAGNOSTIC
    532            // Register the application's callback function to read/write attribute data.
    533            // This is only required when the attribute data format is unknown to ZCL.
    534            zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
    535          
    536            if ( zclDiagnostic_InitStats() == ZSuccess )
    537            {
    538              // Here the user could start the timer to save Diagnostics to NV
    539            }
    540          #endif
    541          
    542          #ifdef LCD_SUPPORTED
    543            HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
    544          #endif  // LCD_SUPPORTED
    545          
    546          #ifdef ZGP_AUTO_TT
    547            zgpTranslationTable_RegisterEP ( &zclSampleLight_SimpleDesc[1] );
    548          #endif
    549          }
    550          
    551          
    552          /*********************************************************************
    553           * @fn          zclSample_event_loop
    554           *
    555           * @brief       Event Loop Processor for zclGeneral.
    556           *
    557           * @param       none
    558           *
    559           * @return      none
    560           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    561          uint16 zclSampleLight_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleLight_event_loop:
    562          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    563            afIncomingMSGPacket_t *MSGpkt;
    564          
    565            (void)task_id;  // Intentionally unreferenced parameter
    566          
    567            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7047         JNZ     ??zclSampleLight_event_loop_0
    568            {
    569              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleLight_TaskID )) )
    570              {
    571                switch ( MSGpkt->hdr.event )
    572                {
    573          #ifdef ZCL_EZMODE
    574                  case ZDO_CB_MSG:
    575                    zclSampleLight_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    576                    break;
    577          #endif
    578                  case ZCL_INCOMING_MSG:
    579                    // Incoming ZCL Foundation command/response messages
    580                    zclSampleLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    581                    break;
    582          
    583                  case KEY_CHANGE:
    584                    zclSampleLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    585                    break;
    586          
    587                  case ZDO_STATE_CHANGE:
    588                    zclSampleLight_NwkState = (devStates_t)(MSGpkt->hdr.status);
    589          
    590                    // now on the network
    591                    if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
    592                         (zclSampleLight_NwkState == DEV_ROUTER)   ||
    593                         (zclSampleLight_NwkState == DEV_END_DEVICE) )
    594                    {
    595                      giLightScreenMode = LIGHT_MAINMODE;
    596                      zclSampleLight_LcdDisplayUpdate();
    597          #ifdef ZCL_EZMODE
    598                      zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
    599          #endif // ZCL_EZMODE
    600                    }
    601                    break;
    602          
    603                  default:
    604                    break;
    605                }
    606          
    607                // Release the memory
    608                osal_msg_deallocate( (uint8 *)MSGpkt );
    609              }
    610          
    611              // return unprocessed events
    612              return (events ^ SYS_EVENT_MSG);
    613            }
    614          
    615            if ( events & SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT )
   \   00000D   EE           MOV     A,R6
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   4003         JC      $+5
   \   000012   02....       LJMP    ??zclSampleLight_event_loop_1 & 0xFFFF
    616            {
    617              if ( zclSampleLight_IdentifyTime > 0 )
   \   000015   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000018   E8           MOV     A,R0
   \   000019   49           ORL     A,R1
   \   00001A   600C         JZ      ??zclSampleLight_event_loop_2
    618                zclSampleLight_IdentifyTime--;
   \   00001C   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   24FF         ADD     A,#-0x1
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   34FF         ADDC    A,#-0x1
   \   000027   F0           MOVX    @DPTR,A
    619              zclSampleLight_ProcessIdentifyTimeChange();
   \                     ??zclSampleLight_event_loop_2:
   \   000028                ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
   \   000028   12....       LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
    620          
    621              return ( events ^ SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
   \   00002B   EE           MOV     A,R6
   \   00002C   6401         XRL     A,#0x1
   \   00002E   02....       LJMP    ??zclSampleLight_event_loop_3 & 0xFFFF
    622            }
   \                     ??zclSampleLight_event_loop_4:
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   90....       MOV     DPTR,#zclSampleLight_NwkState
   \   000036   F0           MOVX    @DPTR,A
   \   000037   6409         XRL     A,#0x9
   \   000039   600A         JZ      ??zclSampleLight_event_loop_5
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6407         XRL     A,#0x7
   \   00003E   6005         JZ      ??zclSampleLight_event_loop_5
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6406         XRL     A,#0x6
   \   000043   7008         JNZ     ??zclSampleLight_event_loop_6
   \                     ??zclSampleLight_event_loop_5:
   \   000045   90....       MOV     DPTR,#giLightScreenMode
   \   000048   E4           CLR     A
   \   000049   F0           MOVX    @DPTR,A
   \   00004A                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   00004A   12....       LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
   \                     ??zclSampleLight_event_loop_6:
   \   00004D                ; Setup parameters for call to function osal_msg_deallocate
   \   00004D   AA..         MOV     R2,?V0
   \   00004F   AB..         MOV     R3,?V1
   \   000051   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclSampleLight_event_loop_0:
   \   000054                ; Setup parameters for call to function osal_msg_receive
   \   000054   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00005C   8A..         MOV     ?V0,R2
   \   00005E   8B..         MOV     ?V1,R3
   \   000060   EA           MOV     A,R2
   \   000061   45..         ORL     A,?V1
   \   000063   606E         JZ      ??zclSampleLight_event_loop_7
   \   000065   8A82         MOV     DPL,R2
   \   000067   8B83         MOV     DPH,R3
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   24CC         ADD     A,#-0x34
   \   00006C   600A         JZ      ??zclSampleLight_event_loop_8
   \   00006E   2474         ADD     A,#0x74
   \   000070   604D         JZ      ??zclSampleLight_event_loop_9
   \   000072   24EF         ADD     A,#-0x11
   \   000074   60BB         JZ      ??zclSampleLight_event_loop_4
   \   000076   80D5         SJMP    ??zclSampleLight_event_loop_6
   \                     ??zclSampleLight_event_loop_8:
   \   000078   EA           MOV     A,R2
   \   000079   2417         ADD     A,#0x17
   \   00007B   F8           MOV     R0,A
   \   00007C   E4           CLR     A
   \   00007D   35..         ADDC    A,?V1
   \   00007F   F9           MOV     R1,A
   \   000080   E8           MOV     A,R0
   \   000081   FA           MOV     R2,A
   \   000082   E9           MOV     A,R1
   \   000083   FB           MOV     R3,A
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   14           DEC     A
   \   00008D   6011         JZ      ??zclSampleLight_event_loop_10
   \   00008F   24FD         ADD     A,#-0x3
   \   000091   701A         JNZ     ??zclSampleLight_event_loop_11
   \   000093   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000096   E0           MOVX    A,@DPTR
   \   000097   F9           MOV     R1,A
   \   000098   E8           MOV     A,R0
   \   000099   C3           CLR     C
   \   00009A   99           SUBB    A,R1
   \   00009B   5010         JNC     ??zclSampleLight_event_loop_11
   \   00009D   08           INC     R0
   \   00009E   80F6         SJMP    ??CrossCallReturnLabel_12
   \                     ??zclSampleLight_event_loop_10:
   \   0000A0   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000A3   8001         SJMP    ??zclSampleLight_event_loop_12
   \                     ??zclSampleLight_event_loop_13:
   \   0000A5   08           INC     R0
   \                     ??zclSampleLight_event_loop_12:
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   F9           MOV     R1,A
   \   0000A8   E8           MOV     A,R0
   \   0000A9   C3           CLR     C
   \   0000AA   99           SUBB    A,R1
   \   0000AB   40F8         JC      ??zclSampleLight_event_loop_13
   \                     ??zclSampleLight_event_loop_11:
   \   0000AD   8A82         MOV     DPL,R2
   \   0000AF   8B83         MOV     DPH,R3
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   FA           MOV     R2,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   FB           MOV     R3,A
   \   0000B6   EA           MOV     A,R2
   \   0000B7   4B           ORL     A,R3
   \   0000B8   6093         JZ      ??zclSampleLight_event_loop_6
   \   0000BA                ; Setup parameters for call to function osal_mem_free
   \   0000BA   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000BD   808E         SJMP    ??zclSampleLight_event_loop_6
   \                     ??zclSampleLight_event_loop_9:
   \   0000BF                ; Setup parameters for call to function zclSampleLight_HandleKeys
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   FA           MOV     R2,A
   \   0000C4   85..82       MOV     DPL,?V0
   \   0000C7   8B83         MOV     DPH,R3
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   F9           MOV     R1,A
   \   0000CD   12....       LCALL   `??zclSampleLight_HandleKeys::?relay`; Banked call to: zclSampleLight_HandleKeys
   \   0000D0   02....       LJMP    ??zclSampleLight_event_loop_6 & 0xFFFF
   \                     ??zclSampleLight_event_loop_7:
   \   0000D3   EE           MOV     A,R6
   \   0000D4   FA           MOV     R2,A
   \   0000D5   EF           MOV     A,R7
   \   0000D6   6480         XRL     A,#0x80
   \   0000D8   8011         SJMP    ??zclSampleLight_event_loop_14
    623          
    624            if ( events & SAMPLELIGHT_MAIN_SCREEN_EVT )
   \                     ??zclSampleLight_event_loop_1:
   \   0000DA   5410         ANL     A,#0x10
   \   0000DC   6010         JZ      ??zclSampleLight_event_loop_15
    625            {
    626              giLightScreenMode = LIGHT_MAINMODE;
   \   0000DE   90....       MOV     DPTR,#giLightScreenMode
   \   0000E1   E4           CLR     A
   \   0000E2   F0           MOVX    @DPTR,A
    627              zclSampleLight_LcdDisplayUpdate();
   \   0000E3                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   0000E3   12....       LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
    628          
    629              return ( events ^ SAMPLELIGHT_MAIN_SCREEN_EVT );
   \   0000E6   EE           MOV     A,R6
   \   0000E7   6410         XRL     A,#0x10
   \                     ??zclSampleLight_event_loop_3:
   \   0000E9   FA           MOV     R2,A
   \   0000EA   EF           MOV     A,R7
   \                     ??zclSampleLight_event_loop_14:
   \   0000EB   FB           MOV     R3,A
   \   0000EC   8004         SJMP    ??zclSampleLight_event_loop_16
    630            }
    631          
    632          #ifdef ZCL_EZMODE
    633          #if (defined HAL_BOARD_ZLIGHT)
    634            // event to start EZMode on startup with a delay
    635            if ( events & SAMPLELIGHT_START_EZMODE_EVT )
    636            {
    637              // Invoke EZ-Mode
    638              zclEZMode_InvokeData_t ezModeData;
    639          
    640              // Invoke EZ-Mode
    641              ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
    642              if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
    643                   (zclSampleLight_NwkState == DEV_ROUTER)   ||
    644                   (zclSampleLight_NwkState == DEV_END_DEVICE) )
    645              {
    646                ezModeData.onNetwork = TRUE;      // node is already on the network
    647              }
    648              else
    649              {
    650                ezModeData.onNetwork = FALSE;     // node is not yet on the network
    651              }
    652              ezModeData.initiator = FALSE;          // OnOffLight is a target
    653              ezModeData.numActiveOutClusters = 0;
    654              ezModeData.pActiveOutClusterIDs = NULL;
    655              ezModeData.numActiveInClusters = 0;
    656              ezModeData.pActiveOutClusterIDs = NULL;
    657              zcl_InvokeEZMode( &ezModeData );
    658          
    659              return ( events ^ SAMPLELIGHT_START_EZMODE_EVT );
    660            }
    661          #endif // #if (defined HAL_BOARD_ZLIGHT)
    662          
    663            // going on to next state
    664            if ( events & SAMPLELIGHT_EZMODE_NEXTSTATE_EVT )
    665            {
    666              zcl_EZModeAction ( EZMODE_ACTION_PROCESS, NULL );   // going on to next state
    667              return ( events ^ SAMPLELIGHT_EZMODE_NEXTSTATE_EVT );
    668            }
    669          
    670            // the overall EZMode timer expired, so we timed out
    671            if ( events & SAMPLELIGHT_EZMODE_TIMEOUT_EVT )
    672            {
    673              zcl_EZModeAction ( EZMODE_ACTION_TIMED_OUT, NULL ); // EZ-Mode timed out
    674              return ( events ^ SAMPLELIGHT_EZMODE_TIMEOUT_EVT );
    675            }
    676          #endif // ZLC_EZMODE
    677          
    678          #ifdef ZCL_LEVEL_CTRL
    679            if ( events & SAMPLELIGHT_LEVEL_CTRL_EVT )
    680            {
    681              zclSampleLight_AdjustLightLevel();
    682              return ( events ^ SAMPLELIGHT_LEVEL_CTRL_EVT );
    683            }
    684          #endif
    685          
    686            // Discard unknown events
    687            return 0;
   \                     ??zclSampleLight_event_loop_15:
   \   0000EE   7A00         MOV     R2,#0x0
   \   0000F0   7B00         MOV     R3,#0x0
   \                     ??zclSampleLight_event_loop_16:
   \   0000F2   7F04         MOV     R7,#0x4
   \   0000F4   02....       LJMP    ?BANKED_LEAVE_XDATA
    688          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   7800         MOV     R0,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   000003                REQUIRE ??Subroutine12_0
   \   000003                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    689          
    690          /*********************************************************************
    691           * @fn      zclSampleLight_HandleKeys
    692           *
    693           * @brief   Handles all key events for this device.
    694           *
    695           * @param   shift - true if in shift/alt.
    696           * @param   keys - bit field for key events. Valid entries:
    697           *                 HAL_KEY_SW_5
    698           *                 HAL_KEY_SW_4
    699           *                 HAL_KEY_SW_2
    700           *                 HAL_KEY_SW_1
    701           *
    702           * @return  none
    703           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    704          static void zclSampleLight_HandleKeys( byte shift, byte keys )
   \                     zclSampleLight_HandleKeys:
    705          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
    706            zclSampleLight_Hold = 0;
   \   00000C   90....       MOV     DPTR,#zclSampleLight_Hold
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
    707            zclSampleLight_Hold1 = 0;
   \   000011   90....       MOV     DPTR,#zclSampleLight_Hold1
   \   000014   F0           MOVX    @DPTR,A
    708          
    709            if ( keys & HAL_KEY_SW_6 )
   \   000015   EE           MOV     A,R6
   \   000016   A2E5         MOV     C,0xE0 /* A   */.5
   \   000018   501C         JNC     ??zclSampleLight_HandleKeys_0
    710          //  if ( shift )
    711            {
    712              giLightScreenMode = LIGHT_MAINMODE;
   \   00001A   90....       MOV     DPTR,#giLightScreenMode
   \   00001D   E4           CLR     A
   \   00001E   F0           MOVX    @DPTR,A
    713          
    714              // toggle local light immediately
    715              zclSampleLight_OnOff = zclSampleLight_OnOff ? LIGHT_OFF : LIGHT_ON;
   \   00001F   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6005         JZ      ??zclSampleLight_HandleKeys_1
   \   000025   12....       LCALL   ?Subroutine5 & 0xFFFF
    716              if ( zclSampleLight_OnOff == LIGHT_ON )
    717              {
    718                HalLedBlink(HAL_LED_4, 1, 50, 40);
    719              }
    720              else
    721              {
    722                HalLedBlink(HAL_LED_2, 1, 50, 40);
   \                     ??CrossCallReturnLabel_4:
   \   000028   8003         SJMP    ??CrossCallReturnLabel_6
   \                     ??zclSampleLight_HandleKeys_1:
   \   00002A   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00002D   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    723              }
    724              zclSampleLight_Hold = 1;
   \   000030   90....       MOV     DPTR,#zclSampleLight_Hold
   \   000033   7401         MOV     A,#0x1
   \   000035   F0           MOVX    @DPTR,A
    725          #ifdef ZCL_LEVEL_CTRL
    726              zclSampleLight_LevelCurrentLevel = zclSampleLight_OnOff ? zclSampleLight_LevelOnLevel : ATTR_LEVEL_MIN_LEVEL;
    727          #endif
    728            }
    729          
    730          /*  if ( keys & HAL_KEY_SW_3 )
    731            {
    732              giLightScreenMode = LIGHT_MAINMODE;
    733          
    734              // toggle local light immediately
    735              zclSampleLight_OnOff1 = zclSampleLight_OnOff1 ? LIGHT_OFF : LIGHT_ON;
    736              zclSampleLight_Hold1 = 1;
    737          
    738          #ifdef ZCL_LEVEL_CTRL
    739              zclSampleLight_LevelCurrentLevel = zclSampleLight_OnOff ? zclSampleLight_LevelOnLevel : ATTR_LEVEL_MIN_LEVEL;
    740          #endif
    741            }
    742          
    743          */
    744            if ( keys & HAL_KEY_SW_5 )
   \                     ??zclSampleLight_HandleKeys_0:
   \   000036   EE           MOV     A,R6
   \   000037   A2E2         MOV     C,0xE0 /* A   */.2
   \   000039   4003         JC      $+5
   \   00003B   02....       LJMP    ??zclSampleLight_HandleKeys_2 & 0xFFFF
    745            {
    746          #if (defined HAL_BOARD_ZLIGHT)
    747          
    748              zclSampleLight_BasicResetCB();
    749          
    750          #else
    751          
    752              giLightScreenMode = LIGHT_MAINMODE;
   \   00003E   90....       MOV     DPTR,#giLightScreenMode
   \   000041   E4           CLR     A
   \   000042   F0           MOVX    @DPTR,A
    753          
    754          #ifdef ZCL_EZMODE
    755              {
    756                // Invoke EZ-Mode
    757                zclEZMode_InvokeData_t ezModeData;
    758          
    759                // Invoke EZ-Mode
    760                ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
    761                if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
    762                    (zclSampleLight_NwkState == DEV_ROUTER)   ||
    763                      (zclSampleLight_NwkState == DEV_END_DEVICE) )
    764                {
    765                  ezModeData.onNetwork = TRUE;      // node is already on the network
    766                }
    767                else
    768                {
    769                  ezModeData.onNetwork = FALSE;     // node is not yet on the network
    770                }
    771                ezModeData.initiator = FALSE;          // OnOffLight is a target
    772                ezModeData.numActiveOutClusters = 0;
    773                ezModeData.pActiveOutClusterIDs = NULL;
    774                ezModeData.numActiveInClusters = 0;
    775                ezModeData.pActiveOutClusterIDs = NULL;
    776                zcl_InvokeEZMode( &ezModeData );
    777              }
    778          
    779          #else // NOT EZ-Mode
    780              {
    781                zAddrType_t dstAddr;
    782                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \   000043                ; Setup parameters for call to function HalLedSet
   \   000043   FA           MOV     R2,A
   \   000044   7908         MOV     R1,#0x8
   \   000046   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    783          
    784                // Initiate an End Device Bind Request, this bind request will
    785                // only use a cluster list that is important to binding.
    786                dstAddr.addrMode = afAddr16Bit;
   \   000049   7408         MOV     A,#0x8
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   7402         MOV     A,#0x2
   \   000050   F0           MOVX    @DPTR,A
    787                dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
   \   000051   85..82       MOV     DPL,?XSP + 0
   \   000054   85..83       MOV     DPH,?XSP + 1
   \   000057   E4           CLR     A
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   \   00005A   F0           MOVX    @DPTR,A
    788                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    789                                     SAMPLELIGHT_ENDPOINT,
    790                                     ZCL_HA_PROFILE_ID,
    791                                     ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
    792          //                           ZCLSAMPLELIGHT_BINDINGLISTOUT, bindingOutClusters,
    793                                     0,NULL,
    794                                     TRUE );
   \   00005B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00005B   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00005E   8A..         MOV     ?V0,R2
   \   000060   8B..         MOV     ?V1,R3
   \   000062   AC..         MOV     R4,?V0
   \   000064   AD..         MOV     R5,?V1
   \   000066                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   000066   75..01       MOV     ?V0,#0x1
   \   000069   78..         MOV     R0,#?V0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006E   E4           CLR     A
   \   00006F   F5..         MOV     ?V0,A
   \   000071   F5..         MOV     ?V1,A
   \   000073   78..         MOV     R0,#?V0
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   78..         MOV     R0,#?V0
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007D   75....       MOV     ?V0,#bindingInClusters & 0xff
   \   000080   75....       MOV     ?V1,#(bindingInClusters >> 8) & 0xff
   \   000083   78..         MOV     R0,#?V0
   \   000085   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000088   75..01       MOV     ?V0,#0x1
   \   00008B   78..         MOV     R0,#?V0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000090   75..04       MOV     ?V0,#0x4
   \   000093   75..01       MOV     ?V1,#0x1
   \   000096   78..         MOV     R0,#?V0
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009B   7901         MOV     R1,#0x1
   \   00009D   7409         MOV     A,#0x9
   \   00009F   12....       LCALL   ?XSTACK_DISP101_8
   \   0000A2   12....       LCALL   `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
   \   0000A5   7409         MOV     A,#0x9
   \   0000A7   12....       LCALL   ?DEALLOC_XSTACK8
    795                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    796                                     SAMPLELIGHT_ENDPOINT+1,
    797                                     ZCL_HA_PROFILE_ID,
    798                                     ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
    799          //                           ZCLSAMPLELIGHT_BINDINGLISTOUT, bindingOutClusters,
    800                                     0,NULL,
    801                                     TRUE );
   \   0000AA                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000AA   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000AD   8A..         MOV     ?V0,R2
   \   0000AF   8B..         MOV     ?V1,R3
   \   0000B1   AC..         MOV     R4,?V0
   \   0000B3   AD..         MOV     R5,?V1
   \   0000B5                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   0000B5   75..01       MOV     ?V0,#0x1
   \   0000B8   78..         MOV     R0,#?V0
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BD   E4           CLR     A
   \   0000BE   F5..         MOV     ?V0,A
   \   0000C0   F5..         MOV     ?V1,A
   \   0000C2   78..         MOV     R0,#?V0
   \   0000C4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C7   78..         MOV     R0,#?V0
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CC   75....       MOV     ?V0,#bindingInClusters & 0xff
   \   0000CF   75....       MOV     ?V1,#(bindingInClusters >> 8) & 0xff
   \   0000D2   78..         MOV     R0,#?V0
   \   0000D4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D7   75..01       MOV     ?V0,#0x1
   \   0000DA   78..         MOV     R0,#?V0
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DF   75..04       MOV     ?V0,#0x4
   \   0000E2   75..01       MOV     ?V1,#0x1
   \   0000E5   78..         MOV     R0,#?V0
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EA   7902         MOV     R1,#0x2
   \   0000EC   7409         MOV     A,#0x9
   \   0000EE   12....       LCALL   ?XSTACK_DISP101_8
   \   0000F1   12....       LCALL   `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
   \   0000F4   7409         MOV     A,#0x9
   \   0000F6   12....       LCALL   ?DEALLOC_XSTACK8
    802              }
    803          #endif // ZCL_EZMODE
    804          #endif // HAL_BOARD_ZLIGHT
    805            }
    806          /*
    807            if ( keys & HAL_KEY_SW_3 )
    808            {
    809              NLME_SendNetworkStatus( zclSampleLight_DstAddr.addr.shortAddr,
    810                                 NLME_GetShortAddr(), NWKSTAT_NONTREE_LINK_FAILURE, FALSE );
    811            }
    812          
    813            if ( keys & HAL_KEY_SW_4 )
    814            {
    815              giLightScreenMode = LIGHT_MAINMODE;
    816          
    817              if ( ( zclSampleLight_NwkState == DEV_ZB_COORD ) ||
    818                    ( zclSampleLight_NwkState == DEV_ROUTER ) )
    819              {
    820                zAddrType_t tmpAddr;
    821          
    822                tmpAddr.addrMode = Addr16Bit;
    823                tmpAddr.addr.shortAddr = NLME_GetShortAddr();
    824          
    825                // toggle permit join
    826                gPermitDuration = gPermitDuration ? 0 : 0xff;
    827          
    828                // Trust Center significance is always true
    829                ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
    830              }
    831            }
    832          
    833            // Shift F5 does a Basic Reset (factory defaults)
    834            if ( shift && ( keys & HAL_KEY_SW_5 ) )
    835            {
    836              zclSampleLight_BasicResetCB();
    837            }
    838            else if ( keys & HAL_KEY_SW_5 )
    839            {
    840              giLightScreenMode = giLightScreenMode ? LIGHT_MAINMODE : LIGHT_HELPMODE;
    841            }
    842          */
    843            // update the display, including the light
    844            zclSampleLight_LcdDisplayUpdate();
   \                     ??zclSampleLight_HandleKeys_2:
   \   0000F9                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   0000F9   12....       LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
    845          }
   \   0000FC   7409         MOV     A,#0x9
   \   0000FE                REQUIRE ?Subroutine1
   \   0000FE                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine11_0
   \   000003                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7401         MOV     A,#0x1
   \   000002   F0           MOVX    @DPTR,A
   \   000003                ; Setup parameters for call to function HalLedBlink
   \   000003                ; Setup parameters for call to function HalLedBlink
   \   000003   7C28         MOV     R4,#0x28
   \   000005   7D00         MOV     R5,#0x0
   \   000007   7B32         MOV     R3,#0x32
   \   000009   FA           MOV     R2,A
   \   00000A   7908         MOV     R1,#0x8
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E4           CLR     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002                ; Setup parameters for call to function HalLedBlink
   \   000002                ; Setup parameters for call to function HalLedBlink
   \   000002   7C28         MOV     R4,#0x28
   \   000004   FD           MOV     R5,A
   \   000005   7B32         MOV     R3,#0x32
   \   000007   7A01         MOV     R2,#0x1
   \   000009   7902         MOV     R1,#0x2
   \   00000B   22           RET
    846          
    847          /*********************************************************************
    848           * @fn      zclSampleLight_LcdDisplayUpdate
    849           *
    850           * @brief   Called to update the LCD display.
    851           *
    852           * @param   none
    853           *
    854           * @return  none
    855           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    856          void zclSampleLight_LcdDisplayUpdate( void )
   \                     zclSampleLight_LcdDisplayUpdate:
    857          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    858             //report state for button 1
    859            zclSampleLightSeqNum++;
   \   00000A   90....       MOV     DPTR,#zclSampleLightSeqNum
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   04           INC     A
   \   00000F   F0           MOVX    @DPTR,A
    860            zclReportCmd_t rptnullcmd;
                                  ^
Warning[Pe550]: variable "rptnullcmd" was set but never used

  static cId_t bindingOutClusters[] =
               ^
"Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\Source\zcl_samplelight.c",172  Warning[Pe177]: 
          variable "bindingOutClusters" was declared but never referenced
    861            rptnullcmd.numAttr = 0;
    862          
    863            zclReportCmd_t rptcmd;
    864            rptcmd.numAttr = 1;
   \   000010   7401         MOV     A,#0x1
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   7401         MOV     A,#0x1
   \   000017   F0           MOVX    @DPTR,A
    865            // Set destination address to indirect
    866            zclSampleLight_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000018   90....       MOV     DPTR,#zclSampleLight_DstAddr + 8
   \   00001B   04           INC     A
   \   00001C   12....       LCALL   ?Subroutine4 & 0xFFFF
    867            zclSampleLight_DstAddr.addr.shortAddr = 0;
    868            zclSampleLight_DstAddr.endPoint=1;
    869          
    870            if (zclSampleLight_Hold == 1) {
   \                     ??CrossCallReturnLabel_2:
   \   00001F   90....       MOV     DPTR,#zclSampleLight_Hold
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6401         XRL     A,#0x1
   \   000025   704F         JNZ     ??zclSampleLight_LcdDisplayUpdate_0
    871              rptcmd.attrList[0].attrID = ATTRID_ON_OFF;
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E4           CLR     A
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   F0           MOVX    @DPTR,A
    872              rptcmd.attrList[0].dataType = ZCL_DATATYPE_BOOLEAN;
   \   000030   7404         MOV     A,#0x4
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   7410         MOV     A,#0x10
   \   000037   F0           MOVX    @DPTR,A
    873              rptcmd.attrList[0].attrData = (void *)(&zclSampleLight_OnOff);
   \   000038   7405         MOV     A,#0x5
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   74..         MOV     A,#zclSampleLight_OnOff & 0xff
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   74..         MOV     A,#(zclSampleLight_OnOff >> 8) & 0xff
   \   000043   12....       LCALL   ?Subroutine7 & 0xFFFF
    874              zcl_SendReportCmd(SAMPLELIGHT_ENDPOINT,&zclSampleLight_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, &rptcmd, ZCL_FRAME_SERVER_CLIENT_DIR, true, zclSampleLightSeqNum );
    875            } else {
   \                     ??CrossCallReturnLabel_8:
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000049   75..01       MOV     ?V0,#0x1
   \   00004C   78..         MOV     R0,#?V0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000051   78..         MOV     R0,#?V0
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000056   7404         MOV     A,#0x4
   \   000058   12....       LCALL   ?XSTACK_DISP100_8
   \   00005B   88..         MOV     ?V0,R0
   \   00005D   89..         MOV     ?V1,R1
   \   00005F   78..         MOV     R0,#?V0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   7C06         MOV     R4,#0x6
   \   000066   7D00         MOV     R5,#0x0
   \   000068   7A..         MOV     R2,#zclSampleLight_DstAddr & 0xff
   \   00006A   7B..         MOV     R3,#(zclSampleLight_DstAddr >> 8) & 0xff
   \   00006C   7901         MOV     R1,#0x1
   \   00006E   12....       LCALL   `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
   \   000071   7405         MOV     A,#0x5
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
    876          //	    rptcmd.attrList[0].attrID = ATTRID_BASIC_DEVICE_ENABLED;
    877          //	    rptcmd.attrList[0].dataType = ZCL_DATATYPE_BOOLEAN;
    878          //	    rptcmd.attrList[0].attrData = (void *)(&zclSampleLight_DeviceEnable);
    879          	    //zcl_SendReportCmd(SAMPLELIGHT_ENDPOINT,&zclSampleLight_DstAddr, ZCL_CLUSTER_ID_GEN_BASIC, &rptcmd, ZCL_FRAME_SERVER_CLIENT_DIR, true, zclSampleLightSeqNum );
    880          //	    zcl_SendReportCmd(SAMPLELIGHT_ENDPOINT,&zclSampleLight_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, &rptnullcmd, ZCL_FRAME_SERVER_CLIENT_DIR, true, zclSampleLightSeqNum );
    881            }
    882          
    883          
    884            //report state for button 2
    885            zclSampleLightSeqNum++;
   \                     ??zclSampleLight_LcdDisplayUpdate_0:
   \   000076   90....       MOV     DPTR,#zclSampleLightSeqNum
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   04           INC     A
   \   00007B   F0           MOVX    @DPTR,A
    886            zclReportCmd_t rptcmd1;
    887            // Set destination address to indirect
    888            zclSampleLight_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00007C   90....       MOV     DPTR,#zclSampleLight_DstAddr + 8
   \   00007F   7402         MOV     A,#0x2
   \   000081   12....       LCALL   ?Subroutine4 & 0xFFFF
    889            zclSampleLight_DstAddr.addr.shortAddr = 0;
    890            zclSampleLight_DstAddr.endPoint=1;
    891            rptcmd1.numAttr = 1;
   \                     ??CrossCallReturnLabel_3:
   \   000084   85..82       MOV     DPL,?XSP + 0
   \   000087   85..83       MOV     DPH,?XSP + 1
   \   00008A   F0           MOVX    @DPTR,A
    892          
    893            if (zclSampleLight_Hold1 == 1) {
   \   00008B   90....       MOV     DPTR,#zclSampleLight_Hold1
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   6401         XRL     A,#0x1
   \   000091   704F         JNZ     ??zclSampleLight_LcdDisplayUpdate_1
    894              rptcmd1.attrList[0].attrID = ATTRID_ON_OFF;
   \   000093   7401         MOV     A,#0x1
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   E4           CLR     A
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   A3           INC     DPTR
   \   00009B   F0           MOVX    @DPTR,A
    895              rptcmd1.attrList[0].dataType = ZCL_DATATYPE_BOOLEAN;
   \   00009C   7403         MOV     A,#0x3
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   7410         MOV     A,#0x10
   \   0000A3   F0           MOVX    @DPTR,A
    896              rptcmd1.attrList[0].attrData = (void *)(&zclSampleLight_OnOff1);
   \   0000A4   7404         MOV     A,#0x4
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   74..         MOV     A,#zclSampleLight_OnOff1 & 0xff
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   74..         MOV     A,#(zclSampleLight_OnOff1 >> 8) & 0xff
   \   0000AF   12....       LCALL   ?Subroutine7 & 0xFFFF
    897              zcl_SendReportCmd(SAMPLELIGHT_ENDPOINT+1,&zclSampleLight_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, &rptcmd1, ZCL_FRAME_SERVER_CLIENT_DIR, true, zclSampleLightSeqNum );
    898            } else {
   \                     ??CrossCallReturnLabel_9:
   \   0000B2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B5   75..01       MOV     ?V0,#0x1
   \   0000B8   78..         MOV     R0,#?V0
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BD   78..         MOV     R0,#?V0
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C2   7403         MOV     A,#0x3
   \   0000C4   12....       LCALL   ?XSTACK_DISP100_8
   \   0000C7   88..         MOV     ?V0,R0
   \   0000C9   89..         MOV     ?V1,R1
   \   0000CB   78..         MOV     R0,#?V0
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D0   7C06         MOV     R4,#0x6
   \   0000D2   7D00         MOV     R5,#0x0
   \   0000D4   7A..         MOV     R2,#zclSampleLight_DstAddr & 0xff
   \   0000D6   7B..         MOV     R3,#(zclSampleLight_DstAddr >> 8) & 0xff
   \   0000D8   7902         MOV     R1,#0x2
   \   0000DA   12....       LCALL   `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
   \   0000DD   7405         MOV     A,#0x5
   \   0000DF   12....       LCALL   ?DEALLOC_XSTACK8
    899          //	    rptcmd1.attrList[0].attrID = ATTRID_BASIC_DEVICE_ENABLED;
    900          //	    rptcmd1.attrList[0].dataType = ZCL_DATATYPE_BOOLEAN;
    901          //	    rptcmd1.attrList[0].attrData = (void *)(&zclSampleLight_DeviceEnable);
    902          //	    zcl_SendReportCmd(SAMPLELIGHT_ENDPOINT+1,&zclSampleLight_DstAddr, ZCL_CLUSTER_ID_GEN_BASIC, &rptcmd1, ZCL_FRAME_SERVER_CLIENT_DIR, true, zclSampleLightSeqNum );
    903          //	    zcl_SendReportCmd(SAMPLELIGHT_ENDPOINT+1,&zclSampleLight_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, &rptnullcmd, ZCL_FRAME_SERVER_CLIENT_DIR, true, zclSampleLightSeqNum );
    904            }
    905            /*//report state
    906            zclSampleLightSeqNumState++;
    907            zclReportCmd_t rptcmd;
    908            rptcmd.numAttr = 1;
    909            rptcmd.attrList[0].attrID = ATTRID_ON_OFF;
    910            rptcmd.attrList[0].dataType = ZCL_DATATYPE_BOOLEAN;
    911            rptcmd.attrList[0].attrData = (void *)(&zclSampleLight_OnOff);
    912          
    913            // Set destination address to indirect
    914            zclSampleLight_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    915            zclSampleLight_DstAddr.addr.shortAddr = 0;
    916            zclSampleLight_DstAddr.endPoint=1;
    917            zcl_SendReportCmd(SAMPLELIGHT_ENDPOINT,&zclSampleLight_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, &rptcmd, ZCL_FRAME_SERVER_CLIENT_DIR, true, zclSampleLightSeqNumState );*/
    918            
    919          #ifdef LCD_SUPPORTED
    920            if ( giLightScreenMode == LIGHT_HELPMODE )
    921            {
    922              zclSampleLight_LcdDisplayHelpMode();
    923            }
    924            else
    925            {
    926              zclSampleLight_LcdDisplayMainMode();
    927            }
    928          #endif
    929          
    930            zclSampleLight_DisplayLight();
    931          }
   \                     ??zclSampleLight_LcdDisplayUpdate_1:
   \   0000E2   7402         MOV     A,#0x2
   \   0000E4   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendReportCmd
   \   000001                ; Setup parameters for call to function zcl_SendReportCmd
   \   000001   90....       MOV     DPTR,#zclSampleLightSeqNum
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0,A
   \   000007   78..         MOV     R0,#?V0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#zclSampleLight_DstAddr
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   F0           MOVX    @DPTR,A
   \   000008   90....       MOV     DPTR,#zclSampleLight_DstAddr + 9
   \   00000B   04           INC     A
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   22           RET
    932          
    933          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    934          /*********************************************************************
    935           * @fn      zclSampleLight_UpdateLampLevel
    936           *
    937           * @brief   Update lamp level output with gamma compensation
    938           *
    939           * @param   level
    940           *
    941           * @return  none
    942           */
    943          void zclSampleLight_UpdateLampLevel( uint8 level )
    944          
    945          {
    946            uint16 gammaCorrectedLevel;
    947          
    948            // gamma correct the level
    949            gammaCorrectedLevel = (uint16) ( pow( ( (float)level / LEVEL_MAX ), (float)GAMMA_VALUE ) * (float)LEVEL_MAX);
    950          
    951            halTimer1SetChannelDuty(WHITE_LED, (uint16)(((uint32)gammaCorrectedLevel*PWM_FULL_DUTY_CYCLE)/LEVEL_MAX) );
    952          }
    953          #endif
    954          
    955          /*********************************************************************
    956           * @fn      zclSampleLight_DisplayLight
    957           *
    958           * @brief   Displays current state of light on LED and also on main display if supported.
    959           *
    960           * @param   none
    961           *
    962           * @return  none
    963           */
    964          static void zclSampleLight_DisplayLight( void )
    965          {
    966            // set the LED1 based on light (on or off)
    967          /*  if ( zclSampleLight_OnOff == LIGHT_ON )
    968            {
    969              HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
    970            }
    971            else
    972            {
    973              HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
    974            }
    975          
    976            if ( zclSampleLight_OnOff1 == LIGHT_ON )
    977            {
    978              HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
    979            }
    980            else
    981            {
    982              HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
    983            }*/
    984            
    985          #ifdef LCD_SUPPORTED
    986            if (giLightScreenMode == LIGHT_MAINMODE)
    987            {
    988          #ifdef ZCL_LEVEL_CTRL
    989              // display current light level
    990              if ( ( zclSampleLight_LevelCurrentLevel == ATTR_LEVEL_MIN_LEVEL ) &&
    991                   ( zclSampleLight_OnOff == LIGHT_OFF ) )
    992              {
    993                HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
    994              }
    995              else if ( ( zclSampleLight_LevelCurrentLevel >= ATTR_LEVEL_MAX_LEVEL ) ||
    996                        ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelOnLevel ) ||
    997                         ( ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ) &&
    998                           ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelLastLevel ) ) )
    999              {
   1000                HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
   1001              }
   1002              else    // "    LEVEL ###"
   1003              {
   1004                zclHA_uint8toa( zclSampleLight_LevelCurrentLevel, &sLightLevel[10] );
   1005                HalLcdWriteString( (char *)sLightLevel, HAL_LCD_LINE_2 );
   1006              }
   1007          #else
   1008              if ( zclSampleLight_OnOff )
   1009              {
   1010                HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
   1011              }
   1012              else
   1013              {
   1014                HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
   1015              }
   1016          #endif // ZCL_LEVEL_CTRL
   1017            }
   1018          #endif // LCD_SUPPORTED
   1019          }
   1020          
   1021          #ifdef LCD_SUPPORTED
   1022          /*********************************************************************
   1023           * @fn      zclSampleLight_LcdDisplayMainMode
   1024           *
   1025           * @brief   Called to display the main screen on the LCD.
   1026           *
   1027           * @param   none
   1028           *
   1029           * @return  none
   1030           */
   1031          static void zclSampleLight_LcdDisplayMainMode( void )
   1032          {
   1033            // display line 1 to indicate NWK status
   1034            if ( zclSampleLight_NwkState == DEV_ZB_COORD )
   1035            {
   1036              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZC );
   1037            }
   1038            else if ( zclSampleLight_NwkState == DEV_ROUTER )
   1039            {
   1040              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZR );
   1041            }
   1042            else if ( zclSampleLight_NwkState == DEV_END_DEVICE )
   1043            {
   1044              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZED );
   1045            }
   1046          
   1047            // end of line 3 displays permit join status (*)
   1048            if ( gPermitDuration )
   1049            {
   1050              sSwHelp[15] = '*';
   1051            }
   1052            else
   1053            {
   1054              sSwHelp[15] = ' ';
   1055            }
   1056            HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
   1057          }
   1058          
   1059          /*********************************************************************
   1060           * @fn      zclSampleLight_LcdDisplayHelpMode
   1061           *
   1062           * @brief   Called to display the SW options on the LCD.
   1063           *
   1064           * @param   none
   1065           *
   1066           * @return  none
   1067           */
   1068          static void zclSampleLight_LcdDisplayHelpMode( void )
   1069          {
   1070            HalLcdWriteString( (char *)sSwLight, HAL_LCD_LINE_1 );
   1071            HalLcdWriteString( (char *)sSwEZMode, HAL_LCD_LINE_2 );
   1072            HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
   1073          }
   1074          #endif  // LCD_SUPPORTED
   1075          
   1076          /*********************************************************************
   1077           * @fn      zclSampleLight_ProcessIdentifyTimeChange
   1078           *
   1079           * @brief   Called to process any change to the IdentifyTime attribute.
   1080           *
   1081           * @param   none
   1082           *
   1083           * @return  none
   1084           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1085          static void zclSampleLight_ProcessIdentifyTimeChange( void )
   \                     zclSampleLight_ProcessIdentifyTimeChange:
   1086          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1087            if ( zclSampleLight_IdentifyTime > 0 )
   \   000004   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000007   E8           MOV     A,R0
   \   000008   49           ORL     A,R1
   \   000009   6026         JZ      ??zclSampleLight_ProcessIdentifyTimeChange_0
   1088            {
   1089              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
   \   00000B                ; Setup parameters for call to function osal_start_timerEx
   \   00000B   90....       MOV     DPTR,#__Constant_3e8
   \   00000E   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000011   7A01         MOV     R2,#0x1
   \   000013   7B00         MOV     R3,#0x0
   \   000015   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00001D   7404         MOV     A,#0x4
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
   1090              HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
   \   000022                ; Setup parameters for call to function HalLedBlink
   \   000022   7CE8         MOV     R4,#-0x18
   \   000024   7D03         MOV     R5,#0x3
   \   000026   7B05         MOV     R3,#0x5
   \   000028   7AFF         MOV     R2,#-0x1
   \   00002A   7908         MOV     R1,#0x8
   \   00002C   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   \   00002F   800C         SJMP    ??zclSampleLight_ProcessIdentifyTimeChange_1
   1091            }
   1092            else
   1093            {
   1094          #ifdef ZCL_EZMODE
   1095              if ( zclSampleLight_IdentifyCommissionState & EZMODE_COMMISSION_OPERATIONAL )
   1096              {
   1097                HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
   1098              }
   1099              else
   1100              {
   1101                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   1102              }
   1103          #endif
   1104          
   1105              osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
   \                     ??zclSampleLight_ProcessIdentifyTimeChange_0:
   \   000031                ; Setup parameters for call to function osal_stop_timerEx
   \   000031   7A01         MOV     R2,#0x1
   \   000033   7B00         MOV     R3,#0x0
   \   000035   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1106            }
   1107          }
   \                     ??zclSampleLight_ProcessIdentifyTimeChange_1:
   \   00003D                REQUIRE ?Subroutine2
   \   00003D                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
   1108          
   1109          /*********************************************************************
   1110           * @fn      zclSampleLight_BasicResetCB
   1111           *
   1112           * @brief   Callback from the ZCL General Cluster Library
   1113           *          to set all the Basic Cluster attributes to default values.
   1114           *
   1115           * @param   none
   1116           *
   1117           * @return  none
   1118           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1119          static void zclSampleLight_BasicResetCB( void )
   \                     zclSampleLight_BasicResetCB:
   1120          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 5
   \   000004   74FB         MOV     A,#-0x5
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1121            NLME_LeaveReq_t leaveReq;
   1122            // Set every field to 0
   1123            osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C05         MOV     R4,#0x5
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   AA..         MOV     R2,?XSP + 0
   \   000011   AB..         MOV     R3,?XSP + 1
   \   000013   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1124          
   1125            // This will enable the device to rejoin the network after reset.
   1126            leaveReq.rejoin = TRUE;
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   7401         MOV     A,#0x1
   \   00001D   F0           MOVX    @DPTR,A
   1127          
   1128            // Set the NV startup option to force a "new" join.
   1129            zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00001E                ; Setup parameters for call to function zgWriteStartupOptions
   \   00001E   7A02         MOV     R2,#0x2
   \   000020   79FF         MOV     R1,#-0x1
   \   000022   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   1130          
   1131            // Leave the network, and reset afterwards
   1132            if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
   \   000025                ; Setup parameters for call to function NLME_LeaveReq
   \   000025   AA..         MOV     R2,?XSP + 0
   \   000027   AB..         MOV     R3,?XSP + 1
   \   000029   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   00002C   E9           MOV     A,R1
   \   00002D   6005         JZ      ??zclSampleLight_BasicResetCB_0
   1133            {
   1134              // Couldn't send out leave; prepare to reset anyway
   1135              ZDApp_LeaveReset( FALSE );
   \   00002F                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00002F   7900         MOV     R1,#0x0
   \   000031   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   1136            }
   1137          }
   \                     ??zclSampleLight_BasicResetCB_0:
   \   000034   7405         MOV     A,#0x5
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   \   000039   80..         SJMP    ?Subroutine2
   1138          
   1139          /*********************************************************************
   1140           * @fn      zclSampleLight_IdentifyCB
   1141           *
   1142           * @brief   Callback from the ZCL General Cluster Library when
   1143           *          it received an Identity Command for this application.
   1144           *
   1145           * @param   srcAddr - source address and endpoint of the response message
   1146           * @param   identifyTime - the number of seconds to identify yourself
   1147           *
   1148           * @return  none
   1149           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1150          static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd )
   \                     zclSampleLight_IdentifyCB:
   1151          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1152            zclSampleLight_IdentifyTime = pCmd->identifyTime;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00000D   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   000010   E8           MOV     A,R0
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   E9           MOV     A,R1
   \   000014   F0           MOVX    @DPTR,A
   1153            zclSampleLight_ProcessIdentifyTimeChange();
   \   000015                ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
   \   000015   12....       LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
   1154          }
   \   000018   80..         SJMP    ?Subroutine2
   1155          
   1156          /*********************************************************************
   1157           * @fn      zclSampleLight_IdentifyQueryRspCB
   1158           *
   1159           * @brief   Callback from the ZCL General Cluster Library when
   1160           *          it received an Identity Query Response Command for this application.
   1161           *
   1162           * @param   srcAddr - requestor's address
   1163           * @param   timeout - number of seconds to identify yourself (valid for query response)
   1164           *
   1165           * @return  none
   1166           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1167          static void zclSampleLight_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
   \                     zclSampleLight_IdentifyQueryRspCB:
   1168          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1169            (void)pRsp;
   1170          #ifdef ZCL_EZMODE
   1171            {
   1172              zclEZMode_ActionData_t data;
   1173              data.pIdentifyQueryRsp = pRsp;
   1174              zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
   1175            }
   1176          #endif
   1177          }
   \   000000   02....       LJMP    ?BRET
   1178          
   1179          /*********************************************************************
   1180           * @fn      zclSampleLight_OnOffCB
   1181           *
   1182           * @brief   Callback from the ZCL General Cluster Library when
   1183           *          it received an On/Off Command for this application.
   1184           *
   1185           * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
   1186           *
   1187           * @return  none
   1188           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1189          static void zclSampleLight_OnOffCB( uint8 cmd )
   \                     zclSampleLight_OnOffCB:
   1190          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1191            afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
   \   000007                ; Setup parameters for call to function zcl_getRawAFMsg
   \   000007   12....       LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
   1192          if (pPtr->endPoint == SAMPLELIGHT_ENDPOINT) //button 1
   \   00000A   EA           MOV     A,R2
   \   00000B   2414         ADD     A,#0x14
   \   00000D   F582         MOV     DPL,A
   \   00000F   E4           CLR     A
   \   000010   3B           ADDC    A,R3
   \   000011   F583         MOV     DPH,A
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   7401         MOV     A,#0x1
   \   000017   68           XRL     A,R0
   \   000018   7026         JNZ     ??zclSampleLight_OnOffCB_0
   1193          {
   1194            zclSampleLight_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
   \   00001A   12....       LCALL   ?Subroutine8 & 0xFFFF
   1195          
   1196          
   1197            // Turn on the light
   1198            if ( cmd == COMMAND_ON )
   \                     ??CrossCallReturnLabel_10:
   \   00001D   600E         JZ      ??zclSampleLight_OnOffCB_1
   1199            {
   1200              zclSampleLight_OnOff = LIGHT_ON;
   1201              HalLedBlink(HAL_LED_4, 1, 50, 40);
   1202          
   1203            }
   1204            // Turn off the light
   1205            else if ( cmd == COMMAND_OFF )
   \   00001F   EE           MOV     A,R6
   \   000020   6013         JZ      ??zclSampleLight_OnOffCB_2
   1206            {
   1207              zclSampleLight_OnOff = LIGHT_OFF;
   1208              HalLedBlink(HAL_LED_2, 1, 50, 40);
   1209            }
   1210            // Toggle the light
   1211            else if ( cmd == COMMAND_TOGGLE )
   \   000022   7402         MOV     A,#0x2
   \   000024   6E           XRL     A,R6
   \   000025   703D         JNZ     ??zclSampleLight_OnOffCB_3
   1212            {
   1213              if ( zclSampleLight_OnOff == LIGHT_OFF )
   \   000027   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   7008         JNZ     ??zclSampleLight_OnOffCB_2
   1214              {
   1215                zclSampleLight_OnOff = LIGHT_ON;
   \                     ??zclSampleLight_OnOffCB_1:
   \   00002D   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   000030   12....       LCALL   ?Subroutine6 & 0xFFFF
   1216                HalLedBlink(HAL_LED_4, 1, 50, 40);
   1217              }
   \                     ??CrossCallReturnLabel_7:
   \   000033   8006         SJMP    ??CrossCallReturnLabel_5
   1218              else
   1219              {
   1220                zclSampleLight_OnOff = LIGHT_OFF;
   \                     ??zclSampleLight_OnOffCB_2:
   \   000035   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   000038   12....       LCALL   ?Subroutine5 & 0xFFFF
   1221                HalLedBlink(HAL_LED_2, 1, 50, 40);
   1222              }
   1223            }
   1224          }
   \                     ??CrossCallReturnLabel_5:
   \   00003B   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   \   00003E   8024         SJMP    ??zclSampleLight_OnOffCB_3
   1225          else if (pPtr->endPoint == SAMPLELIGHT_ENDPOINT+1) //button 2
   \                     ??zclSampleLight_OnOffCB_0:
   \   000040   7402         MOV     A,#0x2
   \   000042   68           XRL     A,R0
   \   000043   701F         JNZ     ??zclSampleLight_OnOffCB_3
   1226          {
   1227            zclSampleLight_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
   \   000045   12....       LCALL   ?Subroutine8 & 0xFFFF
   1228          
   1229          
   1230            // Turn on the light
   1231            if ( cmd == COMMAND_ON )
   \                     ??CrossCallReturnLabel_11:
   \   000048   600E         JZ      ??zclSampleLight_OnOffCB_4
   1232            {
   1233              zclSampleLight_OnOff1 = LIGHT_ON;
   1234            }
   1235            // Turn off the light
   1236            else if ( cmd == COMMAND_OFF )
   \   00004A   EE           MOV     A,R6
   \   00004B   6012         JZ      ??zclSampleLight_OnOffCB_5
   1237            {
   1238              zclSampleLight_OnOff1 = LIGHT_OFF;
   1239            }
   1240            // Toggle the light
   1241            else if ( cmd == COMMAND_TOGGLE )
   \   00004D   7402         MOV     A,#0x2
   \   00004F   6E           XRL     A,R6
   \   000050   7012         JNZ     ??zclSampleLight_OnOffCB_3
   1242            {
   1243              if ( zclSampleLight_OnOff1 == LIGHT_OFF )
   \   000052   90....       MOV     DPTR,#zclSampleLight_OnOff1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   7007         JNZ     ??zclSampleLight_OnOffCB_5
   1244              {
   1245                zclSampleLight_OnOff1 = LIGHT_ON;
   \                     ??zclSampleLight_OnOffCB_4:
   \   000058   90....       MOV     DPTR,#zclSampleLight_OnOff1
   \   00005B   7401         MOV     A,#0x1
   \   00005D   8004         SJMP    ??zclSampleLight_OnOffCB_6
   1246              }
   1247              else
   1248              {
   1249                zclSampleLight_OnOff1 = LIGHT_OFF;
   \                     ??zclSampleLight_OnOffCB_5:
   \   00005F   90....       MOV     DPTR,#zclSampleLight_OnOff1
   \   000062   E4           CLR     A
   \                     ??zclSampleLight_OnOffCB_6:
   \   000063   F0           MOVX    @DPTR,A
   1250              }
   1251            }
   1252          
   1253          }
   1254          
   1255          #if ZCL_LEVEL_CTRL
   1256            zclSampleLight_DefaultMove( );
   1257          #endif
   1258          
   1259            // update the display
   1260            zclSampleLight_LcdDisplayUpdate( );
   \                     ??zclSampleLight_OnOffCB_3:
   \   000064                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   000064   12....       LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
   1261          }
   \   000067   02....       LJMP    ??Subroutine11_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00000D   90....       MOV     DPTR,#zclSampleLight_DstAddr
   \   000010   E8           MOV     A,R0
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   E9           MOV     A,R1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   7401         MOV     A,#0x1
   \   000017   6E           XRL     A,R6
   \   000018   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for bindingInClusters>`:
   \   000000   0600         DW 6

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleLight_TestEp>`:
   \   000000   01           DB 1
   \   000001   ....         DW zclSampleLight_TaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleLight_TestEp1>`:
   \   000000   02           DB 2
   \   000001   ....         DW zclSampleLight1_TaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleLight_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleLight_CmdCallbacks>`:
   \   000000   ....         DW `??zclSampleLight_BasicResetCB::?relay`
   \   000002   ....         DW `??zclSampleLight_IdentifyCB::?relay`
   \   000004   0000         DW 0H
   \   000006   ....         DW `??zclSampleLight_IdentifyQueryRspCB::?relay`
   \   000008   ....         DW `??zclSampleLight_OnOffCB::?relay`
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H
   \   000014   0000         DW 0H
   \   000016   0000         DW 0H
   \   000018   0000         DW 0H
   \   00001A   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclPower_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclPower_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight1_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight1_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_LcdDisplayUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_LcdDisplayUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_ProcessIdentifyTimeChange::?re`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_ProcessIdentifyTimeChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_BasicResetCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_IdentifyCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_IdentifyCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_IdentifyQueryRspCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_IdentifyQueryRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_OnOffCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_OnOffCB
   1262          
   1263          #ifdef ZCL_LEVEL_CTRL
   1264          /*********************************************************************
   1265           * @fn      zclSampleLight_TimeRateHelper
   1266           *
   1267           * @brief   Calculate time based on rate, and startup level state machine
   1268           *
   1269           * @param   newLevel - new level for current level
   1270           *
   1271           * @return  diff (directly), zclSampleLight_CurrentLevel32 and zclSampleLight_NewLevel, zclSampleLight_NewLevelUp
   1272           */
   1273          static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel )
   1274          {
   1275            uint32 diff;
   1276            uint32 newLevel32;
   1277          
   1278            // remember current and new level
   1279            zclSampleLight_NewLevel = newLevel;
   1280            zclSampleLight_CurrentLevel32 = (uint32)1000 * zclSampleLight_LevelCurrentLevel;
   1281          
   1282            // calculate diff
   1283            newLevel32 = (uint32)1000 * newLevel;
   1284            if ( zclSampleLight_LevelCurrentLevel > newLevel )
   1285            {
   1286              diff = zclSampleLight_CurrentLevel32 - newLevel32;
   1287              zclSampleLight_NewLevelUp = FALSE;  // moving down
   1288            }
   1289            else
   1290            {
   1291              diff = newLevel32 - zclSampleLight_CurrentLevel32;
   1292              zclSampleLight_NewLevelUp = TRUE;   // moving up
   1293            }
   1294          
   1295            return ( diff );
   1296          }
   1297          
   1298          /*********************************************************************
   1299           * @fn      zclSampleLight_MoveBasedOnRate
   1300           *
   1301           * @brief   Calculate time based on rate, and startup level state machine
   1302           *
   1303           * @param   newLevel - new level for current level
   1304           * @param   rate16   - fixed point rate (e.g. 16.123)
   1305           *
   1306           * @return  none
   1307           */
   1308          static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate )
   1309          {
   1310            uint32 diff;
   1311          
   1312            // determine how much time (in 10ths of seconds) based on the difference and rate
   1313            zclSampleLight_Rate32 = rate;
   1314            diff = zclSampleLight_TimeRateHelper( newLevel );
   1315            zclSampleLight_LevelRemainingTime = diff / rate;
   1316            if ( !zclSampleLight_LevelRemainingTime )
   1317            {
   1318              zclSampleLight_LevelRemainingTime = 1;
   1319            }
   1320          
   1321            osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   1322          }
   1323          
   1324          /*********************************************************************
   1325           * @fn      zclSampleLight_MoveBasedOnTime
   1326           *
   1327           * @brief   Calculate rate based on time, and startup level state machine
   1328           *
   1329           * @param   newLevel  - new level for current level
   1330           * @param   time      - in 10ths of seconds
   1331           *
   1332           * @return  none
   1333           */
   1334          static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time )
   1335          {
   1336            uint16 diff;
   1337          
   1338            // determine rate (in units) based on difference and time
   1339            diff = zclSampleLight_TimeRateHelper( newLevel );
   1340            zclSampleLight_LevelRemainingTime = zclSampleLight_GetTime( newLevel, time );
   1341            zclSampleLight_Rate32 = diff / time;
   1342          
   1343            osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   1344          }
   1345          
   1346          /*********************************************************************
   1347           * @fn      zclSampleLight_GetTime
   1348           *
   1349           * @brief   Determine amount of time that MoveXXX will take to complete.
   1350           *
   1351           * @param   level = new level to move to
   1352           *          time  = 0xffff=default, or 0x0000-n amount of time in tenths of seconds.
   1353           *
   1354           * @return  none
   1355           */
   1356          static uint16 zclSampleLight_GetTime( uint8 level, uint16 time )
   1357          {
   1358            // there is a hiearchy of the amount of time to use for transistioning
   1359            // check each one in turn. If none of defaults are set, then use fastest
   1360            // time possible.
   1361            if ( time == 0xFFFF )
   1362            {
   1363              // use On or Off Transition Time if set (not 0xffff)
   1364              if ( zclSampleLight_OnOff == LIGHT_ON )
   1365              {
   1366                time = zclSampleLight_LevelOffTransitionTime;
   1367              }
   1368              else
   1369              {
   1370                time = zclSampleLight_LevelOnTransitionTime;
   1371              }
   1372          
   1373              // else use OnOffTransitionTime if set (not 0xffff)
   1374              if ( time == 0xFFFF )
   1375              {
   1376                time = zclSampleLight_LevelOnOffTransitionTime;
   1377              }
   1378          
   1379              // else as fast as possible
   1380              if ( time == 0xFFFF )
   1381              {
   1382                time = 1;
   1383              }
   1384            }
   1385          
   1386            if ( !time )
   1387            {
   1388              time = 1; // as fast as possible
   1389            }
   1390          
   1391            return ( time );
   1392          }
   1393          
   1394          /*********************************************************************
   1395           * @fn      zclSampleLight_DefaultMove
   1396           *
   1397           * @brief   We were turned on/off. Use default time to move to on or off.
   1398           *
   1399           * @param   zclSampleLight_OnOff - must be set prior to calling this function.
   1400           *
   1401           * @return  none
   1402           */
   1403          static void zclSampleLight_DefaultMove( void )
   1404          {
   1405            uint8  newLevel;
   1406            uint32 rate;      // fixed point decimal (3 places, eg. 16.345)
   1407            uint16 time;
   1408          
   1409            // if moving to on position, move to on level
   1410            if ( zclSampleLight_OnOff )
   1411            {
   1412              if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
   1413              {
   1414                // The last Level (before going OFF) should be used)
   1415                newLevel = zclSampleLight_LevelLastLevel;
   1416              }
   1417              else
   1418              {
   1419                newLevel = zclSampleLight_LevelOnLevel;
   1420              }
   1421          
   1422              time = zclSampleLight_LevelOnTransitionTime;
   1423            }
   1424            else
   1425            {
   1426              newLevel = ATTR_LEVEL_MIN_LEVEL;
   1427          
   1428              if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
   1429              {
   1430                // Save the current Level before going OFF to use it when the light turns ON
   1431                // it should be back to this level
   1432                zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
   1433              }
   1434          
   1435              time = zclSampleLight_LevelOffTransitionTime;
   1436            }
   1437          
   1438            // else use OnOffTransitionTime if set (not 0xffff)
   1439            if ( time == 0xFFFF )
   1440            {
   1441              time = zclSampleLight_LevelOnOffTransitionTime;
   1442            }
   1443          
   1444            // else as fast as possible
   1445            if ( time == 0xFFFF )
   1446            {
   1447              time = 1;
   1448            }
   1449          
   1450            // calculate rate based on time (int 10ths) for full transition (1-254)
   1451            rate = 255000 / time;    // units per tick, fixed point, 3 decimal places (e.g. 8500 = 8.5 units per tick)
   1452          
   1453            // start up state machine.
   1454            zclSampleLight_WithOnOff = TRUE;
   1455            zclSampleLight_MoveBasedOnRate( newLevel, rate );
   1456          }
   1457          
   1458          /*********************************************************************
   1459           * @fn      zclSampleLight_AdjustLightLevel
   1460           *
   1461           * @brief   Called each 10th of a second while state machine running
   1462           *
   1463           * @param   none
   1464           *
   1465           * @return  none
   1466           */
   1467          static void zclSampleLight_AdjustLightLevel( void )
   1468          {
   1469            // one tick (10th of a second) less
   1470            if ( zclSampleLight_LevelRemainingTime )
   1471            {
   1472              --zclSampleLight_LevelRemainingTime;
   1473            }
   1474          
   1475            // no time left, done
   1476            if ( zclSampleLight_LevelRemainingTime == 0)
   1477            {
   1478              zclSampleLight_LevelCurrentLevel = zclSampleLight_NewLevel;
   1479            }
   1480          
   1481            // still time left, keep increment/decrementing
   1482            else
   1483            {
   1484              if ( zclSampleLight_NewLevelUp )
   1485              {
   1486                zclSampleLight_CurrentLevel32 += zclSampleLight_Rate32;
   1487              }
   1488              else
   1489              {
   1490                zclSampleLight_CurrentLevel32 -= zclSampleLight_Rate32;
   1491              }
   1492              zclSampleLight_LevelCurrentLevel = (uint8)( zclSampleLight_CurrentLevel32 / 1000 );
   1493            }
   1494          
   1495          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
   1496            zclSampleLight_UpdateLampLevel(zclSampleLight_LevelCurrentLevel);
   1497          #endif
   1498          
   1499            // also affect on/off
   1500            if ( zclSampleLight_WithOnOff )
   1501            {
   1502              if ( zclSampleLight_LevelCurrentLevel > ATTR_LEVEL_MIN_LEVEL )
   1503              {
   1504                zclSampleLight_OnOff = LIGHT_ON;
   1505          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
   1506                ENABLE_LAMP;
   1507          #endif
   1508              }
   1509              else
   1510              {
   1511                zclSampleLight_OnOff = LIGHT_OFF;
   1512          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
   1513                DISABLE_LAMP;
   1514          #endif
   1515              }
   1516            }
   1517          
   1518            // display light level as we go
   1519            zclSampleLight_DisplayLight( );
   1520          
   1521            // keep ticking away
   1522            if ( zclSampleLight_LevelRemainingTime )
   1523            {
   1524              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   1525            }
   1526          }
   1527          
   1528          /*********************************************************************
   1529           * @fn      zclSampleLight_LevelControlMoveToLevelCB
   1530           *
   1531           * @brief   Callback from the ZCL General Cluster Library when
   1532           *          it received a LevelControlMoveToLevel Command for this application.
   1533           *
   1534           * @param   pCmd - ZigBee command parameters
   1535           *
   1536           * @return  none
   1537           */
   1538          static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
   1539          {
   1540            zclSampleLight_WithOnOff = pCmd->withOnOff;
   1541            zclSampleLight_MoveBasedOnTime( pCmd->level, pCmd->transitionTime );
   1542          }
   1543          
   1544          /*********************************************************************
   1545           * @fn      zclSampleLight_LevelControlMoveCB
   1546           *
   1547           * @brief   Callback from the ZCL General Cluster Library when
   1548           *          it received a LevelControlMove Command for this application.
   1549           *
   1550           * @param   pCmd - ZigBee command parameters
   1551           *
   1552           * @return  none
   1553           */
   1554          static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd )
   1555          {
   1556            uint8 newLevel;
   1557            uint32 rate;
   1558          
   1559            // convert rate from units per second to units per tick (10ths of seconds)
   1560            // and move at that right up or down
   1561            zclSampleLight_WithOnOff = pCmd->withOnOff;
   1562          
   1563            if ( pCmd->moveMode == LEVEL_MOVE_UP )
   1564            {
   1565              newLevel = ATTR_LEVEL_MAX_LEVEL;  // fully on
   1566            }
   1567            else
   1568            {
   1569              newLevel = ATTR_LEVEL_MIN_LEVEL; // fully off
   1570            }
   1571          
   1572            rate = (uint32)100 * pCmd->rate;
   1573            zclSampleLight_MoveBasedOnRate( newLevel, rate );
   1574          }
   1575          
   1576          /*********************************************************************
   1577           * @fn      zclSampleLight_LevelControlStepCB
   1578           *
   1579           * @brief   Callback from the ZCL General Cluster Library when
   1580           *          it received an On/Off Command for this application.
   1581           *
   1582           * @param   pCmd - ZigBee command parameters
   1583           *
   1584           * @return  none
   1585           */
   1586          static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd )
   1587          {
   1588            uint8 newLevel;
   1589          
   1590            // determine new level, but don't exceed boundaries
   1591            if ( pCmd->stepMode == LEVEL_MOVE_UP )
   1592            {
   1593              if ( (uint16)zclSampleLight_LevelCurrentLevel + pCmd->amount > ATTR_LEVEL_MAX_LEVEL )
   1594              {
   1595                newLevel = ATTR_LEVEL_MAX_LEVEL;
   1596              }
   1597              else
   1598              {
   1599                newLevel = zclSampleLight_LevelCurrentLevel + pCmd->amount;
   1600              }
   1601            }
   1602            else
   1603            {
   1604              if ( pCmd->amount >= zclSampleLight_LevelCurrentLevel )
   1605              {
   1606                newLevel = ATTR_LEVEL_MIN_LEVEL;
   1607              }
   1608              else
   1609              {
   1610                newLevel = zclSampleLight_LevelCurrentLevel - pCmd->amount;
   1611              }
   1612            }
   1613          
   1614            // move to the new level
   1615            zclSampleLight_WithOnOff = pCmd->withOnOff;
   1616            zclSampleLight_MoveBasedOnTime( newLevel, pCmd->transitionTime );
   1617          }
   1618          
   1619          /*********************************************************************
   1620           * @fn      zclSampleLight_LevelControlStopCB
   1621           *
   1622           * @brief   Callback from the ZCL General Cluster Library when
   1623           *          it received an Level Control Stop Command for this application.
   1624           *
   1625           * @param   pCmd - ZigBee command parameters
   1626           *
   1627           * @return  none
   1628           */
   1629          static void zclSampleLight_LevelControlStopCB( void )
   1630          {
   1631            // stop immediately
   1632            osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT );
   1633            zclSampleLight_LevelRemainingTime = 0;
   1634          }
   1635          #endif
   1636          
   1637          /******************************************************************************
   1638           *
   1639           *  Functions for processing ZCL Foundation incoming Command/Response messages
   1640           *
   1641           *****************************************************************************/
   1642          
   1643          /*********************************************************************
   1644           * @fn      zclSampleLight_ProcessIncomingMsg
   1645           *
   1646           * @brief   Process ZCL Foundation incoming message
   1647           *
   1648           * @param   pInMsg - pointer to the received message
   1649           *
   1650           * @return  none
   1651           */
   1652          static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   1653          {
   1654            switch ( pInMsg->zclHdr.commandID )
   1655            {
   1656          #ifdef ZCL_READ
   1657              case ZCL_CMD_READ_RSP:
   1658                zclSampleLight_ProcessInReadRspCmd( pInMsg );
   1659                break;
   1660          #endif
   1661          #ifdef ZCL_WRITE
   1662              case ZCL_CMD_WRITE_RSP:
   1663                zclSampleLight_ProcessInWriteRspCmd( pInMsg );
   1664                break;
   1665          #endif
   1666          #ifdef ZCL_REPORT
   1667              // Attribute Reporting implementation should be added here
   1668              case ZCL_CMD_CONFIG_REPORT:
   1669                // zclSampleLight_ProcessInConfigReportCmd( pInMsg );
   1670                break;
   1671          
   1672              case ZCL_CMD_CONFIG_REPORT_RSP:
   1673                // zclSampleLight_ProcessInConfigReportRspCmd( pInMsg );
   1674                break;
   1675          
   1676              case ZCL_CMD_READ_REPORT_CFG:
   1677                // zclSampleLight_ProcessInReadReportCfgCmd( pInMsg );
   1678                break;
   1679          
   1680              case ZCL_CMD_READ_REPORT_CFG_RSP:
   1681                // zclSampleLight_ProcessInReadReportCfgRspCmd( pInMsg );
   1682                break;
   1683          
   1684              case ZCL_CMD_REPORT:
   1685                // zclSampleLight_ProcessInReportCmd( pInMsg );
   1686                break;
   1687          #endif
   1688              case ZCL_CMD_DEFAULT_RSP:
   1689                zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
   1690                break;
   1691          #ifdef ZCL_DISCOVER
   1692              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
   1693                zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
   1694                break;
   1695          
   1696              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
   1697                zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
   1698                break;
   1699          
   1700              case ZCL_CMD_DISCOVER_ATTRS_RSP:
   1701                zclSampleLight_ProcessInDiscAttrsRspCmd( pInMsg );
   1702                break;
   1703          
   1704              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
   1705                zclSampleLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
   1706                break;
   1707          #endif
   1708              default:
   1709                break;
   1710            }
   1711          
   1712            if ( pInMsg->attrCmd )
   1713              osal_mem_free( pInMsg->attrCmd );
   1714          }
   1715          
   1716          #ifdef ZCL_READ
   1717          /*********************************************************************
   1718           * @fn      zclSampleLight_ProcessInReadRspCmd
   1719           *
   1720           * @brief   Process the "Profile" Read Response Command
   1721           *
   1722           * @param   pInMsg - incoming message to process
   1723           *
   1724           * @return  none
   1725           */
   1726          static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   1727          {
   1728            zclReadRspCmd_t *readRspCmd;
   1729            uint8 i;
   1730          
   1731            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
   1732            for (i = 0; i < readRspCmd->numAttr; i++)
   1733            {
   1734              // Notify the originator of the results of the original read attributes
   1735              // attempt and, for each successfull request, the value of the requested
   1736              // attribute
   1737            }
   1738          
   1739            return ( TRUE );
   1740          }
   1741          #endif // ZCL_READ
   1742          
   1743          #ifdef ZCL_WRITE
   1744          /*********************************************************************
   1745           * @fn      zclSampleLight_ProcessInWriteRspCmd
   1746           *
   1747           * @brief   Process the "Profile" Write Response Command
   1748           *
   1749           * @param   pInMsg - incoming message to process
   1750           *
   1751           * @return  none
   1752           */
   1753          static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
   1754          {
   1755            zclWriteRspCmd_t *writeRspCmd;
   1756            uint8 i;
   1757          
   1758            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
   1759            for ( i = 0; i < writeRspCmd->numAttr; i++ )
   1760            {
   1761              // Notify the device of the results of the its original write attributes
   1762              // command.
   1763            }
   1764          
   1765            return ( TRUE );
   1766          }
   1767          #endif // ZCL_WRITE
   1768          
   1769          /*********************************************************************
   1770           * @fn      zclSampleLight_ProcessInDefaultRspCmd
   1771           *
   1772           * @brief   Process the "Profile" Default Response Command
   1773           *
   1774           * @param   pInMsg - incoming message to process
   1775           *
   1776           * @return  none
   1777           */
   1778          static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
   1779          {
   1780            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
   1781          
   1782            // Device is notified of the Default Response command.
   1783            (void)pInMsg;
   1784          
   1785            return ( TRUE );
   1786          }
   1787          
   1788          #ifdef ZCL_DISCOVER
   1789          /*********************************************************************
   1790           * @fn      zclSampleLight_ProcessInDiscCmdsRspCmd
   1791           *
   1792           * @brief   Process the Discover Commands Response Command
   1793           *
   1794           * @param   pInMsg - incoming message to process
   1795           *
   1796           * @return  none
   1797           */
   1798          static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   1799          {
   1800            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
   1801            uint8 i;
   1802          
   1803            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   1804            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   1805            {
   1806              // Device is notified of the result of its attribute discovery command.
   1807            }
   1808          
   1809            return ( TRUE );
   1810          }
   1811          
   1812          /*********************************************************************
   1813           * @fn      zclSampleLight_ProcessInDiscAttrsRspCmd
   1814           *
   1815           * @brief   Process the "Profile" Discover Attributes Response Command
   1816           *
   1817           * @param   pInMsg - incoming message to process
   1818           *
   1819           * @return  none
   1820           */
   1821          static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
   1822          {
   1823            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
   1824            uint8 i;
   1825          
   1826            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
   1827            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1828            {
   1829              // Device is notified of the result of its attribute discovery command.
   1830            }
   1831          
   1832            return ( TRUE );
   1833          }
   1834          
   1835          /*********************************************************************
   1836           * @fn      zclSampleLight_ProcessInDiscAttrsExtRspCmd
   1837           *
   1838           * @brief   Process the "Profile" Discover Attributes Extended Response Command
   1839           *
   1840           * @param   pInMsg - incoming message to process
   1841           *
   1842           * @return  none
   1843           */
   1844          static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
   1845          {
   1846            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
   1847            uint8 i;
   1848          
   1849            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
   1850            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1851            {
   1852              // Device is notified of the result of its attribute discovery command.
   1853            }
   1854          
   1855            return ( TRUE );
   1856          }
   1857          #endif // ZCL_DISCOVER
   1858          
   1859          #if ZCL_EZMODE
   1860          /*********************************************************************
   1861           * @fn      zclSampleLight_ProcessZDOMsgs
   1862           *
   1863           * @brief   Called when this node receives a ZDO/ZDP response.
   1864           *
   1865           * @param   none
   1866           *
   1867           * @return  status
   1868           */
   1869          static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
   1870          {
   1871            zclEZMode_ActionData_t data;
   1872            ZDO_MatchDescRsp_t *pMatchDescRsp;
   1873          
   1874            // Let EZ-Mode know of the Simple Descriptor Response
   1875            if ( pMsg->clusterID == Match_Desc_rsp )
   1876            {
   1877              pMatchDescRsp = ZDO_ParseEPListRsp( pMsg );
   1878              data.pMatchDescRsp = pMatchDescRsp;
   1879              zcl_EZModeAction( EZMODE_ACTION_MATCH_DESC_RSP, &data );
   1880              osal_mem_free( pMatchDescRsp );
   1881            }
   1882          }
   1883          
   1884          /*********************************************************************
   1885           * @fn      zclSampleLight_EZModeCB
   1886           *
   1887           * @brief   The Application is informed of events. This can be used to show on the UI what is
   1888          *           going on during EZ-Mode steering/finding/binding.
   1889           *
   1890           * @param   state - an
   1891           *
   1892           * @return  none
   1893           */
   1894          static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
   1895          {
   1896          #ifdef LCD_SUPPORTED
   1897            char *pStr;
   1898            uint8 err;
   1899          #endif
   1900          
   1901            // time to go into identify mode
   1902            if ( state == EZMODE_STATE_IDENTIFYING )
   1903            {
   1904          #ifdef LCD_SUPPORTED
   1905              HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
   1906          #endif
   1907          
   1908              zclSampleLight_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
   1909              zclSampleLight_ProcessIdentifyTimeChange();
   1910            }
   1911          
   1912            // autoclosing, show what happened (success, cancelled, etc...)
   1913            if( state == EZMODE_STATE_AUTOCLOSE )
   1914            {
   1915          #ifdef LCD_SUPPORTED
   1916              pStr = NULL;
   1917              err = pData->sAutoClose.err;
   1918              if ( err == EZMODE_ERR_SUCCESS )
   1919              {
   1920                pStr = "EZMode: Success";
   1921              }
   1922              else if ( err == EZMODE_ERR_NOMATCH )
   1923              {
   1924                pStr = "EZMode: NoMatch"; // not a match made in heaven
   1925              }
   1926              if ( pStr )
   1927              {
   1928                if ( giLightScreenMode == LIGHT_MAINMODE )
   1929                {
   1930                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   1931                }
   1932              }
   1933          #endif
   1934            }
   1935          
   1936            // finished, either show DstAddr/EP, or nothing (depending on success or not)
   1937            if( state == EZMODE_STATE_FINISH )
   1938            {
   1939              // turn off identify mode
   1940              zclSampleLight_IdentifyTime = 0;
   1941              zclSampleLight_ProcessIdentifyTimeChange();
   1942          
   1943          #ifdef LCD_SUPPORTED
   1944              // if successful, inform user which nwkaddr/ep we bound to
   1945              pStr = NULL;
   1946              err = pData->sFinish.err;
   1947              if( err == EZMODE_ERR_SUCCESS )
   1948              {
   1949                // already stated on autoclose
   1950              }
   1951              else if ( err == EZMODE_ERR_CANCELLED )
   1952              {
   1953                pStr = "EZMode: Cancel";
   1954              }
   1955              else if ( err == EZMODE_ERR_BAD_PARAMETER )
   1956              {
   1957                pStr = "EZMode: BadParm";
   1958              }
   1959              else if ( err == EZMODE_ERR_TIMEDOUT )
   1960              {
   1961                pStr = "EZMode: TimeOut";
   1962              }
   1963              if ( pStr )
   1964              {
   1965                if ( giLightScreenMode == LIGHT_MAINMODE )
   1966                {
   1967                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   1968                }
   1969              }
   1970          #endif
   1971              // show main UI screen 3 seconds after binding
   1972              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_MAIN_SCREEN_EVT, 3000 );
   1973            }
   1974          }
   1975          #endif // ZCL_EZMODE
   1976          
   1977          /****************************************************************************
   1978          ****************************************************************************/
   1979          
   1980          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   zclPower_Init
      0      9   zclSampleLight1_Init
        0      9   -> afRegister
        0      9   -> zclGeneral_RegisterCmdCallbacks
        0      9   -> zclHA_Init
        0      9   -> zcl_registerAttrList
      2      5   zclSampleLight_BasicResetCB
        2      5   -> NLME_LeaveReq
        2      5   -> ZDApp_LeaveReset
        2      5   -> osal_memset
        2      5   -> zgWriteStartupOptions
      0     40   zclSampleLight_HandleKeys
        0     19   -> HalLedBlink
        0     19   -> HalLedSet
        0     19   -> NLME_GetShortAddr
        0     28   -> ZDP_EndDeviceBindReq
        0     19   -> zclSampleLight_LcdDisplayUpdate
      2      0   zclSampleLight_IdentifyCB
        2      0   -> zclSampleLight_ProcessIdentifyTimeChange
      0      0   zclSampleLight_IdentifyQueryRspCB
      0      9   zclSampleLight_Init
        0      9   -> RegisterForKeys
        0      9   -> afRegister
        0      9   -> zclGeneral_RegisterCmdCallbacks
        0      9   -> zclHA_Init
        0      9   -> zcl_registerAttrList
        0      9   -> zcl_registerForMsg
      0     36   zclSampleLight_LcdDisplayUpdate
        0     17   -> zcl_SendReportCmd
      0     10   zclSampleLight_OnOffCB
        0     10   -> HalLedBlink
        0     10   -> zclSampleLight_LcdDisplayUpdate
        0     10   -> zcl_getRawAFMsg
      2     16   zclSampleLight_ProcessIdentifyTimeChange
        2      0   -> HalLedBlink
        2      4   -> osal_start_timerEx
        2      0   -> osal_stop_timerEx
      0     12   zclSampleLight_event_loop
        0     12   -> osal_mem_free
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> zclSampleLight_HandleKeys
        0     12   -> zclSampleLight_LcdDisplayUpdate
        0     12   -> zclSampleLight_ProcessIdentifyTimeChange


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for bindingInClusters>
       6  ?<Initializer for sampleLight_TestEp1>
       6  ?<Initializer for sampleLight_TestEp>
      28  ?<Initializer for zclSampleLight_CmdCallbacks>
       1  ?<Initializer for zclSampleLight_NwkState>
       5  ??Subroutine11_0
       6  ??Subroutine12_0
       8  ?Subroutine0
       3  ?Subroutine1
       3  ?Subroutine10
       7  ?Subroutine2
      15  ?Subroutine3
      14  ?Subroutine4
      12  ?Subroutine5
      13  ?Subroutine6
      10  ?Subroutine7
      25  ?Subroutine8
      14  ?Subroutine9
       4  __Constant_3e8
       2  bindingInClusters
       1  gPermitDuration
       1  giLightScreenMode
       6  sampleLight_TestEp
       6  sampleLight_TestEp1
       3  zclPower_Init
       6  zclPower_Init::?relay
      49  zclSampleLight1_Init
       6  zclSampleLight1_Init::?relay
       1  zclSampleLight1_TaskID
       1  zclSampleLightSeqNum
      59  zclSampleLight_BasicResetCB
       6  zclSampleLight_BasicResetCB::?relay
      28  zclSampleLight_CmdCallbacks
      12  zclSampleLight_DstAddr
     254  zclSampleLight_HandleKeys
       6  zclSampleLight_HandleKeys::?relay
      26  zclSampleLight_IdentifyCB
       6  zclSampleLight_IdentifyCB::?relay
       3  zclSampleLight_IdentifyQueryRspCB
       6  zclSampleLight_IdentifyQueryRspCB::?relay
      63  zclSampleLight_Init
       6  zclSampleLight_Init::?relay
     231  zclSampleLight_LcdDisplayUpdate
       6  zclSampleLight_LcdDisplayUpdate::?relay
       1  zclSampleLight_NwkState
     106  zclSampleLight_OnOffCB
       6  zclSampleLight_OnOffCB::?relay
      61  zclSampleLight_ProcessIdentifyTimeChange
       6  zclSampleLight_ProcessIdentifyTimeChange::?relay
       1  zclSampleLight_TaskID
     247  zclSampleLight_event_loop
       6  zclSampleLight_event_loop::?relay

 
 1 237 bytes in segment BANKED_CODE
    66 bytes in segment BANK_RELAYS
    43 bytes in segment XDATA_I
    43 bytes in segment XDATA_ID
     4 bytes in segment XDATA_ROM_C
    17 bytes in segment XDATA_Z
 
   109 bytes of CODE     memory
     0 bytes of CONST    memory (+ 4 bytes shared)
 1 237 bytes of HUGECODE memory
    60 bytes of XDATA    memory

Errors: none
Warnings: 2
