###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                16/Jan/2019  20:41:41
# Copyright 2004-2016 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        Z:\home\pail\git\dnckatsw00x\src\Components\hal\target\CC2530LOWPWR\hal_key.c
#    Command line       =  
#        -f
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        Z:\home\pail\git\dnckatsw00x\src\Components\hal\target\CC2530LOWPWR\hal_key.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D
#        POWER_SAVING -D NWK_AUTO_POLL -D xHOLD_AUTO_START -D xZTOOL_P1 -D
#        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_REPORT -D xZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D
#        xZCL_DIAGNOSTIC -D xFEATURE_SYSTEM_STATS -lC
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\EndDeviceEB\List
#        -lA
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\Source\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\Source\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\ZMain\TI2530DB\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\hal\include\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\hal\target\CC2530LOWPWR\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\mac\include\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\mac\high_level\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\mt\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\osal\include\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\services\saddr\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\services\sdata\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\af\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\nwk\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\sapi\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\sec\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\sys\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\zcl\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\stack\zdo\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\zmac\
#        -I
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\EndDeviceEB\List\hal_key.lst
#    Object file        =  
#        Z:\home\pail\git\dnckatsw00x\src\Projects\zstack\HomeAutomation\LivoloLightOneGang\CC2530LOWPWR\EndDeviceEB\Obj\hal_key.r51
#
###############################################################################

Z:\home\pail\git\dnckatsw00x\src\Components\hal\target\CC2530LOWPWR\hal_key.c
      1          /**************************************************************************************************
      2            Filename:       hal_key.c
      3            Revised:        $Date: 2010-09-15 19:02:45 -0700 (Wed, 15 Sep 2010) $
      4            Revision:       $Revision: 23815 $
      5          
      6            Description:    This file contains the interface to the HAL KEY Service.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          /*********************************************************************
     40           NOTE: If polling is used, the hal_driver task schedules the KeyRead()
     41                 to occur every 100ms.  This should be long enough to naturally
     42                 debounce the keys.  The KeyRead() function remembers the key
     43                 state of the previous poll and will only return a non-zero
     44                 value if the key state changes.
     45          
     46           NOTE: If interrupts are used, the KeyRead() function is scheduled
     47                 25ms after the interrupt occurs by the ISR.  This delay is used
     48                 for key debouncing.  The ISR disables any further Key interrupt
     49                 until KeyRead() is executed.  KeyRead() will re-enable Key
     50                 interrupts after executing.  Unlike polling, when interrupts
     51                 are enabled, the previous key state is not remembered.  This
     52                 means that KeyRead() will return the current state of the keys
     53                 (not a change in state of the keys).
     54          
     55           NOTE: If interrupts are used, the KeyRead() fucntion is scheduled by
     56                 the ISR.  Therefore, the joystick movements will only be detected
     57                 during a pushbutton interrupt caused by S1 or the center joystick
     58                 pushbutton.
     59          
     60           NOTE: When a switch like S1 is pushed, the S1 signal goes from a normally
     61                 high state to a low state.  This transition is typically clean.  The
     62                 duration of the low state is around 200ms.  When the signal returns
     63                 to the high state, there is a high likelihood of signal bounce, which
     64                 causes a unwanted interrupts.  Normally, we would set the interrupt
     65                 edge to falling edge to generate an interrupt when S1 is pushed, but
     66                 because of the signal bounce, it is better to set the edge to rising
     67                 edge to generate an interrupt when S1 is released.  The debounce logic
     68                 can then filter out the signal bounce.  The result is that we typically
     69                 get only 1 interrupt per button push.  This mechanism is not totally
     70                 foolproof because occasionally, signal bound occurs during the falling
     71                 edge as well.  A similar mechanism is used to handle the joystick
     72                 pushbutton on the DB.  For the EB, we do not have independent control
     73                 of the interrupt edge for the S1 and center joystick pushbutton.  As
     74                 a result, only one or the other pushbuttons work reasonably well with
     75                 interrupts.  The default is the make the S1 switch on the EB work more
     76                 reliably.
     77          
     78          *********************************************************************/
     79          
     80          /**************************************************************************************************
     81           *                                            INCLUDES
     82           **************************************************************************************************/
     83          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x89
   \   unsigned char volatile __sfr P0IFG
   \                     P0IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8c
   \   unsigned char volatile __sfr PICTL
   \                     PICTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
     84          #include "hal_defs.h"
     85          #include "hal_types.h"
     86          #include "hal_board.h"
     87          #include "hal_drivers.h"
     88          #include "hal_adc.h"
     89          #include "hal_key.h"
     90          #include "osal.h"
     91          
     92          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
     93          
     94          /**************************************************************************************************
     95           *                                              MACROS
     96           **************************************************************************************************/
     97          
     98          /**************************************************************************************************
     99           *                                            CONSTANTS
    100           **************************************************************************************************/
    101          #define HAL_KEY_RISING_EDGE   0
    102          #define HAL_KEY_FALLING_EDGE  1
    103          
    104          #define HAL_KEY_DEBOUNCE_VALUE  25
    105          
    106          /* CPU port interrupt */
    107          #define HAL_KEY_CPU_PORT_0_IF P0IF
    108          
    109          /* SW_6 is at P0.1 */
    110          #define HAL_KEY_SW_6_PORT   P0
    111          #define HAL_KEY_SW_6_BIT    BV(1)
    112          #define HAL_KEY_SW_6_SEL    P0SEL
    113          #define HAL_KEY_SW_6_DIR    P0DIR
    114          
    115          /* edge interrupt */
    116          #define HAL_KEY_SW_6_EDGEBIT  BV(0)
    117          #define HAL_KEY_SW_6_EDGE     HAL_KEY_FALLING_EDGE
    118          
    119          
    120          /* SW_6 interrupts */
    121          #define HAL_KEY_SW_6_IEN      IEN1  /* CPU interrupt mask register */
    122          #define HAL_KEY_SW_6_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    123          #define HAL_KEY_SW_6_ICTL     P0IEN /* Port Interrupt Control register */
    124          #define HAL_KEY_SW_6_ICTLBIT  BV(1) /* P0IEN - P0.1 enable/disable bit */
    125          #define HAL_KEY_SW_6_PXIFG    P0IFG /* Interrupt flag at source */
    126          
    127          /**************************************************************************************************
    128           *                                            TYPEDEFS
    129           **************************************************************************************************/
    130          
    131          
    132          /**************************************************************************************************
    133           *                                        GLOBAL VARIABLES
    134           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          static uint8 halKeySavedKeys;     /* used to store previous key state in polling mode */
   \                     halKeySavedKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          static halKeyCBack_t pHalKeyProcessFunction;
   \                     pHalKeyProcessFunction:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          bool Hal_KeyIntEnable;            /* interrupt enable/disable flag */
   \                     Hal_KeyIntEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          static uint8 HalKeyConfigured;
   \                     HalKeyConfigured:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    139          
    140          /**************************************************************************************************
    141           *                                        FUNCTIONS - Local
    142           **************************************************************************************************/
    143          void halProcessKeyInterrupt(void);
    144          
    145          
    146          /**************************************************************************************************
    147           *                                        FUNCTIONS - API
    148           **************************************************************************************************/
    149          
    150          
    151          /**************************************************************************************************
    152           * @fn      HalKeyInit
    153           *
    154           * @brief   Initilize Key Service
    155           *
    156           * @param   none
    157           *
    158           * @return  None
    159           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    160          void HalKeyInit( void )
   \                     HalKeyInit:
    161          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    162          
    163            /* Initialize previous key to 0 */
    164            halKeySavedKeys = 0;
   \   000004   90....       MOV     DPTR,#halKeySavedKeys
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
    165          
    166            HAL_KEY_SW_6_SEL &= ~(HAL_KEY_SW_6_BIT);    /* Set pin function to GPIO */
   \   000009   53F3FD       ANL     0xf3,#0xfd
    167            HAL_KEY_SW_6_DIR &= ~(HAL_KEY_SW_6_BIT);    /* Set pin direction to Input */
   \   00000C   53FDFD       ANL     0xfd,#0xfd
    168          
    169            /* Initialize callback function */
    170            pHalKeyProcessFunction  = NULL;
   \   00000F   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   F0           MOVX    @DPTR,A
    171          
    172            /* Start with key is not configured */
    173            HalKeyConfigured = FALSE;
   \   000015   90....       MOV     DPTR,#HalKeyConfigured
   \   000018   F0           MOVX    @DPTR,A
    174          }
   \   000019   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00001C                REQUIRE P0SEL
   \   00001C                REQUIRE P0DIR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    175          
    176          
    177          /**************************************************************************************************
    178           * @fn      HalKeyConfig
    179           *
    180           * @brief   Configure the Key serivce
    181           *
    182           * @param   interruptEnable - TRUE/FALSE, enable/disable interrupt
    183           *          cback - pointer to the CallBack function
    184           *
    185           * @return  None
    186           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    187          void HalKeyConfig (bool interruptEnable, halKeyCBack_t cback)
   \                     HalKeyConfig:
    188          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    189            /* Enable/Disable Interrupt or */
    190            Hal_KeyIntEnable = interruptEnable;
   \   000006   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000009   F0           MOVX    @DPTR,A
    191          
    192            /* Register the callback fucntion */
    193            pHalKeyProcessFunction = cback;
   \   00000A   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   00000D   EA           MOV     A,R2
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   EB           MOV     A,R3
   \   000011   F0           MOVX    @DPTR,A
    194          
    195            /* Determine if interrupt is enable or not */
    196            if (Hal_KeyIntEnable)
   \   000012   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000015   E0           MOVX    A,@DPTR
   \   000016   6024         JZ      ??HalKeyConfig_0
    197            {
    198              /* Rising/Falling edge configuratinn */
    199          
    200              PICTL &= ~(HAL_KEY_SW_6_EDGEBIT);    /* Clear the edge bit */
   \   000018   538CFE       ANL     0x8c,#0xfe
    201              /* For falling edge, the bit must be set. */
    202            #if (HAL_KEY_SW_6_EDGE == HAL_KEY_FALLING_EDGE)
    203              PICTL |= HAL_KEY_SW_6_EDGEBIT;
   \   00001B   438C01       ORL     0x8c,#0x1
    204            #endif
    205          
    206          
    207              /* Interrupt configuration:
    208               * - Enable interrupt generation at the port
    209               * - Enable CPU interrupt
    210               * - Clear any pending interrupt
    211               */
    212              HAL_KEY_SW_6_ICTL |= HAL_KEY_SW_6_ICTLBIT;
   \   00001E   43AB02       ORL     0xab,#0x2
    213              HAL_KEY_SW_6_IEN |= HAL_KEY_SW_6_IENBIT;
   \   000021   D2BD         SETB    0xb8.5
    214              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT);
   \   000023   7589FD       MOV     0x89,#-0x3
    215          
    216              /* Do this only after the hal_key is configured - to work with sleep stuff */
    217              if (HalKeyConfigured == TRUE)
   \   000026   90....       MOV     DPTR,#HalKeyConfigured
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6401         XRL     A,#0x1
   \   00002C   701F         JNZ     ??HalKeyConfig_1
    218              {
    219                osal_stop_timerEx(Hal_TaskID, HAL_KEY_EVENT);  /* Cancel polling if active */
   \   00002E                ; Setup parameters for call to function osal_stop_timerEx
   \   00002E   7A10         MOV     R2,#0x10
   \   000030   7B00         MOV     R3,#0x0
   \   000032   90....       MOV     DPTR,#Hal_TaskID
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F9           MOV     R1,A
   \   000037   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   00003A   8011         SJMP    ??HalKeyConfig_1
    220              }
    221            }
    222            else    /* Interrupts NOT enabled */
    223            {
    224              HAL_KEY_SW_6_ICTL &= ~(HAL_KEY_SW_6_ICTLBIT); /* don't generate interrupt */
   \                     ??HalKeyConfig_0:
   \   00003C   53ABFD       ANL     0xab,#0xfd
    225              HAL_KEY_SW_6_IEN &= ~(HAL_KEY_SW_6_IENBIT);   /* Clear interrupt enable bit */
   \   00003F   C2BD         CLR     0xb8.5
    226          
    227              osal_set_event(Hal_TaskID, HAL_KEY_EVENT);
   \   000041                ; Setup parameters for call to function osal_set_event
   \   000041   7A10         MOV     R2,#0x10
   \   000043   7B00         MOV     R3,#0x0
   \   000045   90....       MOV     DPTR,#Hal_TaskID
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F9           MOV     R1,A
   \   00004A   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    228            }
    229          
    230            /* Key now is configured */
    231            HalKeyConfigured = TRUE;
   \                     ??HalKeyConfig_1:
   \   00004D   90....       MOV     DPTR,#HalKeyConfigured
   \   000050   7401         MOV     A,#0x1
   \   000052   F0           MOVX    @DPTR,A
    232          }
   \   000053   FF           MOV     R7,A
   \   000054   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000057                REQUIRE PICTL
   \   000057                REQUIRE P0IEN
   \   000057                REQUIRE _A_IEN1
   \   000057                REQUIRE P0IFG
    233          
    234          
    235          /**************************************************************************************************
    236           * @fn      HalKeyRead
    237           *
    238           * @brief   Read the current value of a key
    239           *
    240           * @param   None
    241           *
    242           * @return  keys - current keys status
    243           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    244          uint8 HalKeyRead ( void )
   \                     HalKeyRead:
    245          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    246            uint8 keys = 0;
   \   000000   7900         MOV     R1,#0x0
    247          
    248            if (HAL_PUSH_BUTTON1())
   \   000002   A281         MOV     C,0x80.1
   \   000004   5002         JNC     ??HalKeyRead_0
    249            {
    250              keys |= HAL_KEY_SW_6;
   \   000006   7920         MOV     R1,#0x20
    251            }
    252          
    253            return keys;
   \                     ??HalKeyRead_0:
   \   000008   02....       LJMP    ?BRET
   \   00000B                REQUIRE _A_P0
    254          }
    255          
    256          
    257          /**************************************************************************************************
    258           * @fn      HalKeyPoll
    259           *
    260           * @brief   Called by hal_driver to poll the keys
    261           *
    262           * @param   None
    263           *
    264           * @return  None
    265           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    266          void HalKeyPoll (void)
   \                     HalKeyPoll:
    267          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    268            uint8 keys = 0;
   \   000004   7900         MOV     R1,#0x0
    269          
    270            if (HAL_PUSH_BUTTON1())
   \   000006   A281         MOV     C,0x80.1
   \   000008   5002         JNC     ??HalKeyPoll_0
    271            {
    272              keys |= HAL_KEY_SW_6;
   \   00000A   7920         MOV     R1,#0x20
    273            }
    274            /* If interrupts are not enabled, previous key status and current key status
    275             * are compared to find out if a key has changed status.
    276             */
    277            if (!Hal_KeyIntEnable)
   \                     ??HalKeyPoll_0:
   \   00000C   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   7009         JNZ     ??HalKeyPoll_1
    278            {
    279              if (keys == halKeySavedKeys)
   \   000012   90....       MOV     DPTR,#halKeySavedKeys
   \   000015   E0           MOVX    A,@DPTR
   \   000016   69           XRL     A,R1
   \   000017   6021         JZ      ??HalKeyPoll_2
    280              {
    281                /* Exit - since no keys have changed */
    282                return;
    283              }
    284              /* Store the current keys for comparation next time */
    285              halKeySavedKeys = keys;
   \   000019   E9           MOV     A,R1
   \   00001A   F0           MOVX    @DPTR,A
    286            }
    287            else
    288            {
    289              /* Key interrupt handled here */
    290            }
    291          
    292          
    293            /* Invoke Callback if new keys were depressed */
    294            if (keys && (pHalKeyProcessFunction))
   \                     ??HalKeyPoll_1:
   \   00001B   E9           MOV     A,R1
   \   00001C   601C         JZ      ??HalKeyPoll_2
   \   00001E   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FA           MOV     R2,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FB           MOV     R3,A
   \   000026   EA           MOV     A,R2
   \   000027   4B           ORL     A,R3
   \   000028   6010         JZ      ??HalKeyPoll_2
    295            {
    296              (pHalKeyProcessFunction) (keys, HAL_KEY_STATE_NORMAL);
   \   00002A                ; Setup parameters for indirect call
   \   00002A   7A00         MOV     R2,#0x0
   \   00002C   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F8           MOV     R0,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F583         MOV     DPH,A
   \   000035   8882         MOV     DPL,R0
   \   000037   12....       LCALL   ?CALL_IND
    297            }
    298          }
   \                     ??HalKeyPoll_2:
   \   00003A   80..         SJMP    ?Subroutine0
   \   00003C                REQUIRE _A_P0
    299          
    300          
    301          
    302          
    303          
    304          
    305          /**************************************************************************************************
    306           * @fn      halProcessKeyInterrupt
    307           *
    308           * @brief   Checks to see if it's a valid key interrupt, saves interrupt driven key states for
    309           *          processing by HalKeyRead(), and debounces keys by scheduling HalKeyRead() 25ms later.
    310           *
    311           * @param
    312           *
    313           * @return
    314           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    315          void halProcessKeyInterrupt (void)
   \                     halProcessKeyInterrupt:
    316          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    317            bool valid=FALSE;
    318          
    319            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)  /* Interrupt Flag has been set */
   \   000004   E589         MOV     A,0x89
   \   000006   A2E1         MOV     C,0xE0 /* A   */.1
   \   000008   501A         JNC     ??halProcessKeyInterrupt_0
    320            {
    321              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT); /* Clear Interrupt Flag */
   \   00000A   7589FD       MOV     0x89,#-0x3
    322              valid = TRUE;
    323            }
    324          
    325            if (valid)
    326            {
    327              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
   \   00000D                ; Setup parameters for call to function osal_start_timerEx
   \   00000D   90....       MOV     DPTR,#__Constant_19
   \   000010   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000013   7A10         MOV     R2,#0x10
   \   000015   7B00         MOV     R3,#0x0
   \   000017   90....       MOV     DPTR,#Hal_TaskID
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00001F   7404         MOV     A,#0x4
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
    328            }
    329          }
   \                     ??halProcessKeyInterrupt_0:
   \   000024                REQUIRE ?Subroutine0
   \   000024                REQUIRE P0IFG
   \   000024                ; // Fall through to label ?Subroutine0
    330          
    331          /**************************************************************************************************
    332           * @fn      HalKeyEnterSleep
    333           *
    334           * @brief  - Get called to enter sleep mode
    335           *
    336           * @param
    337           *
    338           * @return
    339           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    340          void HalKeyEnterSleep ( void )
   \                     HalKeyEnterSleep:
    341          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    342          }
   \   000000   02....       LJMP    ?BRET
    343          
    344          /**************************************************************************************************
    345           * @fn      HalKeyExitSleep
    346           *
    347           * @brief   - Get called when sleep is over
    348           *
    349           * @param
    350           *
    351           * @return  - return saved keys
    352           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    353          uint8 HalKeyExitSleep ( void )
   \                     HalKeyExitSleep:
    354          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    355            /* Wake up and read keys */
    356            return ( HalKeyRead () );
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000007   80..         SJMP    ?Subroutine0
    357          }
    358          
    359          /***************************************************************************************************
    360           *                                    INTERRUPT SERVICE ROUTINE
    361           ***************************************************************************************************/
    362          
    363          /**************************************************************************************************
    364           * @fn      halKeyPort0Isr
    365           *
    366           * @brief   Port0 ISR
    367           *
    368           * @param
    369           *
    370           * @return
    371           **************************************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    372          HAL_ISR_FUNCTION( halKeyPort0Isr, P0INT_VECTOR )
   \                     halKeyPort0Isr:
    373          {
   \   000000   C0E0         PUSH    A
   \   000002   74F2         MOV     A,#-0xe
   \   000004   12....       LCALL   ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 14
   \   000007                ; Auto size: 0
    374            HAL_ENTER_ISR();
   \   000007   A2AF         MOV     C,0xa8.7
   \   000009   E4           CLR     A
   \   00000A   33           RLC     A
   \   00000B   FE           MOV     R6,A
   \   00000C   D2AF         SETB    0xa8.7
    375          
    376            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)
   \   00000E   E589         MOV     A,0x89
   \   000010   A2E1         MOV     C,0xE0 /* A   */.1
   \   000012   5003         JNC     ??halKeyPort0Isr_0
    377            {
    378              halProcessKeyInterrupt();
   \   000014                ; Setup parameters for call to function halProcessKeyInterrupt
   \   000014   12....       LCALL   `??halProcessKeyInterrupt::?relay`; Banked call to: halProcessKeyInterrupt
    379            }
    380          
    381            /*
    382              Clear the CPU interrupt flag for Port_0
    383              PxIFG has to be cleared before PxIF
    384            */
    385            HAL_KEY_SW_6_PXIFG = 0;
   \                     ??halKeyPort0Isr_0:
   \   000017   758900       MOV     0x89,#0x0
    386            HAL_KEY_CPU_PORT_0_IF = 0;
   \   00001A   C2C5         CLR     0xc0.5
    387            
    388            CLEAR_SLEEP_MODE();
   \   00001C   75..00       MOV     halSleepPconValue,#0x0
    389            HAL_EXIT_ISR();
   \   00001F   EE           MOV     A,R6
   \   000020   A2E0         MOV     C,0xE0 /* A   */.0
   \   000022   92AF         MOV     0xa8.7,C
    390          }
   \   000024   7F01         MOV     R7,#0x1
   \   000026   02....       LJMP    ?INTERRUPT_LEAVE_XSP
   \   000029                REQUIRE _A_IEN0
   \   000029                REQUIRE P0IFG
   \   000029                REQUIRE _A_IRCON

   \                                 In  segment INTVEC, offset 0x6b, root
   \                     `??halKeyPort0Isr::??INTVEC 107`:
   \   00006B   02....       LJMP       (halKeyPort0Isr)

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_19:
   \   000000   19000000     DD 25

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyConfig::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyConfig

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyPoll::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halProcessKeyInterrupt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halProcessKeyInterrupt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyEnterSleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyEnterSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyExitSleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyExitSleep
    391          
    392          #else
    393          
    394          
    395          void HalKeyInit(void){}
    396          void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback){}
    397          uint8 HalKeyRead(void){ return 0;}
    398          void HalKeyPoll(void){}
    399          
    400          #endif /* HAL_KEY */
    401          
    402          /**************************************************************************************************
    403          **************************************************************************************************/
    404          
    405          
    406          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   HalKeyConfig
        0      9   -> osal_set_event
        0      9   -> osal_stop_timerEx
      0      0   HalKeyEnterSleep
      2      0   HalKeyExitSleep
        2      0   -> HalKeyRead
      2      0   HalKeyInit
      2      0   HalKeyPoll
      0      0   HalKeyRead
      0     14   halKeyPort0Isr
        0     14   -> halProcessKeyInterrupt
      2     18   halProcessKeyInterrupt
        2      4   -> osal_start_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?Subroutine0
      87  HalKeyConfig
       6  HalKeyConfig::?relay
       1  HalKeyConfigured
       3  HalKeyEnterSleep
       6  HalKeyEnterSleep::?relay
       9  HalKeyExitSleep
       6  HalKeyExitSleep::?relay
      28  HalKeyInit
       6  HalKeyInit::?relay
      60  HalKeyPoll
       6  HalKeyPoll::?relay
      11  HalKeyRead
       6  HalKeyRead::?relay
       1  Hal_KeyIntEnable
       1  P0DIR
       1  P0IEN
       1  P0IFG
       1  P0SEL
       1  PICTL
       1  _A_IEN0
       1  _A_IEN1
       1  _A_IRCON
       1  _A_P0
       4  __Constant_19
      41  halKeyPort0Isr
       3  halKeyPort0Isr::??INTVEC 107
       1  halKeySavedKeys
      36  halProcessKeyInterrupt
       6  halProcessKeyInterrupt::?relay
       2  pHalKeyProcessFunction

 
 241 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
   3 bytes in segment INTVEC
  41 bytes in segment NEAR_CODE
   9 bytes in segment SFR_AN
   4 bytes in segment XDATA_ROM_C
   5 bytes in segment XDATA_Z
 
  83 bytes of CODE     memory (+ 3 bytes shared)
   0 bytes of CONST    memory (+ 4 bytes shared)
   0 bytes of DATA     memory (+ 9 bytes shared)
 241 bytes of HUGECODE memory
   5 bytes of XDATA    memory

Errors: none
Warnings: none
